// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: seshat/spatial.proto

package seshat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpatialService_CreateRoom_FullMethodName             = "/seshat.SpatialService/CreateRoom"
	SpatialService_GetRoom_FullMethodName                = "/seshat.SpatialService/GetRoom"
	SpatialService_ListRooms_FullMethodName              = "/seshat.SpatialService/ListRooms"
	SpatialService_DeleteRoom_FullMethodName             = "/seshat.SpatialService/DeleteRoom"
	SpatialService_PlaceEntity_FullMethodName            = "/seshat.SpatialService/PlaceEntity"
	SpatialService_MoveEntity_FullMethodName             = "/seshat.SpatialService/MoveEntity"
	SpatialService_RemoveEntity_FullMethodName           = "/seshat.SpatialService/RemoveEntity"
	SpatialService_GetEntityPosition_FullMethodName      = "/seshat.SpatialService/GetEntityPosition"
	SpatialService_GetEntitiesAt_FullMethodName          = "/seshat.SpatialService/GetEntitiesAt"
	SpatialService_GetEntitiesInRange_FullMethodName     = "/seshat.SpatialService/GetEntitiesInRange"
	SpatialService_GetEntitiesInArea_FullMethodName      = "/seshat.SpatialService/GetEntitiesInArea"
	SpatialService_GetEntitiesInLine_FullMethodName      = "/seshat.SpatialService/GetEntitiesInLine"
	SpatialService_FindPath_FullMethodName               = "/seshat.SpatialService/FindPath"
	SpatialService_GetDistance_FullMethodName            = "/seshat.SpatialService/GetDistance"
	SpatialService_CheckLineOfSight_FullMethodName       = "/seshat.SpatialService/CheckLineOfSight"
	SpatialService_CreateConnection_FullMethodName       = "/seshat.SpatialService/CreateConnection"
	SpatialService_GetConnections_FullMethodName         = "/seshat.SpatialService/GetConnections"
	SpatialService_MoveEntityBetweenRooms_FullMethodName = "/seshat.SpatialService/MoveEntityBetweenRooms"
	SpatialService_GetValidPositions_FullMethodName      = "/seshat.SpatialService/GetValidPositions"
	SpatialService_IsValidPosition_FullMethodName        = "/seshat.SpatialService/IsValidPosition"
)

// SpatialServiceClient is the client API for SpatialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Spatial positioning service - exposes all spatial toolkit functionality
type SpatialServiceClient interface {
	// Room management
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error)
	// Entity placement and movement
	PlaceEntity(ctx context.Context, in *PlaceEntityRequest, opts ...grpc.CallOption) (*PlaceEntityResponse, error)
	MoveEntity(ctx context.Context, in *MoveEntityRequest, opts ...grpc.CallOption) (*MoveEntityResponse, error)
	RemoveEntity(ctx context.Context, in *RemoveEntityRequest, opts ...grpc.CallOption) (*RemoveEntityResponse, error)
	GetEntityPosition(ctx context.Context, in *GetEntityPositionRequest, opts ...grpc.CallOption) (*GetEntityPositionResponse, error)
	// Spatial queries
	GetEntitiesAt(ctx context.Context, in *GetEntitiesAtRequest, opts ...grpc.CallOption) (*GetEntitiesAtResponse, error)
	GetEntitiesInRange(ctx context.Context, in *GetEntitiesInRangeRequest, opts ...grpc.CallOption) (*GetEntitiesInRangeResponse, error)
	GetEntitiesInArea(ctx context.Context, in *GetEntitiesInAreaRequest, opts ...grpc.CallOption) (*GetEntitiesInAreaResponse, error)
	GetEntitiesInLine(ctx context.Context, in *GetEntitiesInLineRequest, opts ...grpc.CallOption) (*GetEntitiesInLineResponse, error)
	// Pathfinding and movement
	FindPath(ctx context.Context, in *FindPathRequest, opts ...grpc.CallOption) (*FindPathResponse, error)
	GetDistance(ctx context.Context, in *GetDistanceRequest, opts ...grpc.CallOption) (*GetDistanceResponse, error)
	CheckLineOfSight(ctx context.Context, in *LineOfSightRequest, opts ...grpc.CallOption) (*LineOfSightResponse, error)
	// Multi-room orchestration
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error)
	MoveEntityBetweenRooms(ctx context.Context, in *MoveEntityBetweenRoomsRequest, opts ...grpc.CallOption) (*MoveEntityBetweenRoomsResponse, error)
	// Grid system queries
	GetValidPositions(ctx context.Context, in *GetValidPositionsRequest, opts ...grpc.CallOption) (*GetValidPositionsResponse, error)
	IsValidPosition(ctx context.Context, in *IsValidPositionRequest, opts ...grpc.CallOption) (*IsValidPositionResponse, error)
}

type spatialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpatialServiceClient(cc grpc.ClientConnInterface) SpatialServiceClient {
	return &spatialServiceClient{cc}
}

func (c *spatialServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, SpatialService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, SpatialService_GetRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, SpatialService_ListRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoomResponse)
	err := c.cc.Invoke(ctx, SpatialService_DeleteRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) PlaceEntity(ctx context.Context, in *PlaceEntityRequest, opts ...grpc.CallOption) (*PlaceEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceEntityResponse)
	err := c.cc.Invoke(ctx, SpatialService_PlaceEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) MoveEntity(ctx context.Context, in *MoveEntityRequest, opts ...grpc.CallOption) (*MoveEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveEntityResponse)
	err := c.cc.Invoke(ctx, SpatialService_MoveEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) RemoveEntity(ctx context.Context, in *RemoveEntityRequest, opts ...grpc.CallOption) (*RemoveEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveEntityResponse)
	err := c.cc.Invoke(ctx, SpatialService_RemoveEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) GetEntityPosition(ctx context.Context, in *GetEntityPositionRequest, opts ...grpc.CallOption) (*GetEntityPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityPositionResponse)
	err := c.cc.Invoke(ctx, SpatialService_GetEntityPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) GetEntitiesAt(ctx context.Context, in *GetEntitiesAtRequest, opts ...grpc.CallOption) (*GetEntitiesAtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntitiesAtResponse)
	err := c.cc.Invoke(ctx, SpatialService_GetEntitiesAt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) GetEntitiesInRange(ctx context.Context, in *GetEntitiesInRangeRequest, opts ...grpc.CallOption) (*GetEntitiesInRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntitiesInRangeResponse)
	err := c.cc.Invoke(ctx, SpatialService_GetEntitiesInRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) GetEntitiesInArea(ctx context.Context, in *GetEntitiesInAreaRequest, opts ...grpc.CallOption) (*GetEntitiesInAreaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntitiesInAreaResponse)
	err := c.cc.Invoke(ctx, SpatialService_GetEntitiesInArea_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) GetEntitiesInLine(ctx context.Context, in *GetEntitiesInLineRequest, opts ...grpc.CallOption) (*GetEntitiesInLineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntitiesInLineResponse)
	err := c.cc.Invoke(ctx, SpatialService_GetEntitiesInLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) FindPath(ctx context.Context, in *FindPathRequest, opts ...grpc.CallOption) (*FindPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPathResponse)
	err := c.cc.Invoke(ctx, SpatialService_FindPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) GetDistance(ctx context.Context, in *GetDistanceRequest, opts ...grpc.CallOption) (*GetDistanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDistanceResponse)
	err := c.cc.Invoke(ctx, SpatialService_GetDistance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) CheckLineOfSight(ctx context.Context, in *LineOfSightRequest, opts ...grpc.CallOption) (*LineOfSightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LineOfSightResponse)
	err := c.cc.Invoke(ctx, SpatialService_CheckLineOfSight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, SpatialService_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnectionsResponse)
	err := c.cc.Invoke(ctx, SpatialService_GetConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) MoveEntityBetweenRooms(ctx context.Context, in *MoveEntityBetweenRoomsRequest, opts ...grpc.CallOption) (*MoveEntityBetweenRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveEntityBetweenRoomsResponse)
	err := c.cc.Invoke(ctx, SpatialService_MoveEntityBetweenRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) GetValidPositions(ctx context.Context, in *GetValidPositionsRequest, opts ...grpc.CallOption) (*GetValidPositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetValidPositionsResponse)
	err := c.cc.Invoke(ctx, SpatialService_GetValidPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spatialServiceClient) IsValidPosition(ctx context.Context, in *IsValidPositionRequest, opts ...grpc.CallOption) (*IsValidPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsValidPositionResponse)
	err := c.cc.Invoke(ctx, SpatialService_IsValidPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpatialServiceServer is the server API for SpatialService service.
// All implementations must embed UnimplementedSpatialServiceServer
// for forward compatibility.
//
// Spatial positioning service - exposes all spatial toolkit functionality
type SpatialServiceServer interface {
	// Room management
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	// Entity placement and movement
	PlaceEntity(context.Context, *PlaceEntityRequest) (*PlaceEntityResponse, error)
	MoveEntity(context.Context, *MoveEntityRequest) (*MoveEntityResponse, error)
	RemoveEntity(context.Context, *RemoveEntityRequest) (*RemoveEntityResponse, error)
	GetEntityPosition(context.Context, *GetEntityPositionRequest) (*GetEntityPositionResponse, error)
	// Spatial queries
	GetEntitiesAt(context.Context, *GetEntitiesAtRequest) (*GetEntitiesAtResponse, error)
	GetEntitiesInRange(context.Context, *GetEntitiesInRangeRequest) (*GetEntitiesInRangeResponse, error)
	GetEntitiesInArea(context.Context, *GetEntitiesInAreaRequest) (*GetEntitiesInAreaResponse, error)
	GetEntitiesInLine(context.Context, *GetEntitiesInLineRequest) (*GetEntitiesInLineResponse, error)
	// Pathfinding and movement
	FindPath(context.Context, *FindPathRequest) (*FindPathResponse, error)
	GetDistance(context.Context, *GetDistanceRequest) (*GetDistanceResponse, error)
	CheckLineOfSight(context.Context, *LineOfSightRequest) (*LineOfSightResponse, error)
	// Multi-room orchestration
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsResponse, error)
	MoveEntityBetweenRooms(context.Context, *MoveEntityBetweenRoomsRequest) (*MoveEntityBetweenRoomsResponse, error)
	// Grid system queries
	GetValidPositions(context.Context, *GetValidPositionsRequest) (*GetValidPositionsResponse, error)
	IsValidPosition(context.Context, *IsValidPositionRequest) (*IsValidPositionResponse, error)
	mustEmbedUnimplementedSpatialServiceServer()
}

// UnimplementedSpatialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpatialServiceServer struct{}

func (UnimplementedSpatialServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedSpatialServiceServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedSpatialServiceServer) ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedSpatialServiceServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedSpatialServiceServer) PlaceEntity(context.Context, *PlaceEntityRequest) (*PlaceEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceEntity not implemented")
}
func (UnimplementedSpatialServiceServer) MoveEntity(context.Context, *MoveEntityRequest) (*MoveEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveEntity not implemented")
}
func (UnimplementedSpatialServiceServer) RemoveEntity(context.Context, *RemoveEntityRequest) (*RemoveEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntity not implemented")
}
func (UnimplementedSpatialServiceServer) GetEntityPosition(context.Context, *GetEntityPositionRequest) (*GetEntityPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityPosition not implemented")
}
func (UnimplementedSpatialServiceServer) GetEntitiesAt(context.Context, *GetEntitiesAtRequest) (*GetEntitiesAtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitiesAt not implemented")
}
func (UnimplementedSpatialServiceServer) GetEntitiesInRange(context.Context, *GetEntitiesInRangeRequest) (*GetEntitiesInRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitiesInRange not implemented")
}
func (UnimplementedSpatialServiceServer) GetEntitiesInArea(context.Context, *GetEntitiesInAreaRequest) (*GetEntitiesInAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitiesInArea not implemented")
}
func (UnimplementedSpatialServiceServer) GetEntitiesInLine(context.Context, *GetEntitiesInLineRequest) (*GetEntitiesInLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitiesInLine not implemented")
}
func (UnimplementedSpatialServiceServer) FindPath(context.Context, *FindPathRequest) (*FindPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPath not implemented")
}
func (UnimplementedSpatialServiceServer) GetDistance(context.Context, *GetDistanceRequest) (*GetDistanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistance not implemented")
}
func (UnimplementedSpatialServiceServer) CheckLineOfSight(context.Context, *LineOfSightRequest) (*LineOfSightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLineOfSight not implemented")
}
func (UnimplementedSpatialServiceServer) CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedSpatialServiceServer) GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedSpatialServiceServer) MoveEntityBetweenRooms(context.Context, *MoveEntityBetweenRoomsRequest) (*MoveEntityBetweenRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveEntityBetweenRooms not implemented")
}
func (UnimplementedSpatialServiceServer) GetValidPositions(context.Context, *GetValidPositionsRequest) (*GetValidPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPositions not implemented")
}
func (UnimplementedSpatialServiceServer) IsValidPosition(context.Context, *IsValidPositionRequest) (*IsValidPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidPosition not implemented")
}
func (UnimplementedSpatialServiceServer) mustEmbedUnimplementedSpatialServiceServer() {}
func (UnimplementedSpatialServiceServer) testEmbeddedByValue()                        {}

// UnsafeSpatialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpatialServiceServer will
// result in compilation errors.
type UnsafeSpatialServiceServer interface {
	mustEmbedUnimplementedSpatialServiceServer()
}

func RegisterSpatialServiceServer(s grpc.ServiceRegistrar, srv SpatialServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpatialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpatialService_ServiceDesc, srv)
}

func _SpatialService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_ListRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).ListRooms(ctx, req.(*ListRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_PlaceEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).PlaceEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_PlaceEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).PlaceEntity(ctx, req.(*PlaceEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_MoveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).MoveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_MoveEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).MoveEntity(ctx, req.(*MoveEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_RemoveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).RemoveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_RemoveEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).RemoveEntity(ctx, req.(*RemoveEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_GetEntityPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).GetEntityPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_GetEntityPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).GetEntityPosition(ctx, req.(*GetEntityPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_GetEntitiesAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).GetEntitiesAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_GetEntitiesAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).GetEntitiesAt(ctx, req.(*GetEntitiesAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_GetEntitiesInRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesInRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).GetEntitiesInRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_GetEntitiesInRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).GetEntitiesInRange(ctx, req.(*GetEntitiesInRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_GetEntitiesInArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesInAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).GetEntitiesInArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_GetEntitiesInArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).GetEntitiesInArea(ctx, req.(*GetEntitiesInAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_GetEntitiesInLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesInLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).GetEntitiesInLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_GetEntitiesInLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).GetEntitiesInLine(ctx, req.(*GetEntitiesInLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_FindPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).FindPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_FindPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).FindPath(ctx, req.(*FindPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_GetDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).GetDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_GetDistance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).GetDistance(ctx, req.(*GetDistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_CheckLineOfSight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineOfSightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).CheckLineOfSight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_CheckLineOfSight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).CheckLineOfSight(ctx, req.(*LineOfSightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_GetConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).GetConnections(ctx, req.(*GetConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_MoveEntityBetweenRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveEntityBetweenRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).MoveEntityBetweenRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_MoveEntityBetweenRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).MoveEntityBetweenRooms(ctx, req.(*MoveEntityBetweenRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_GetValidPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).GetValidPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_GetValidPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).GetValidPositions(ctx, req.(*GetValidPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpatialService_IsValidPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsValidPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpatialServiceServer).IsValidPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpatialService_IsValidPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpatialServiceServer).IsValidPosition(ctx, req.(*IsValidPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpatialService_ServiceDesc is the grpc.ServiceDesc for SpatialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpatialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seshat.SpatialService",
	HandlerType: (*SpatialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _SpatialService_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _SpatialService_GetRoom_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _SpatialService_ListRooms_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _SpatialService_DeleteRoom_Handler,
		},
		{
			MethodName: "PlaceEntity",
			Handler:    _SpatialService_PlaceEntity_Handler,
		},
		{
			MethodName: "MoveEntity",
			Handler:    _SpatialService_MoveEntity_Handler,
		},
		{
			MethodName: "RemoveEntity",
			Handler:    _SpatialService_RemoveEntity_Handler,
		},
		{
			MethodName: "GetEntityPosition",
			Handler:    _SpatialService_GetEntityPosition_Handler,
		},
		{
			MethodName: "GetEntitiesAt",
			Handler:    _SpatialService_GetEntitiesAt_Handler,
		},
		{
			MethodName: "GetEntitiesInRange",
			Handler:    _SpatialService_GetEntitiesInRange_Handler,
		},
		{
			MethodName: "GetEntitiesInArea",
			Handler:    _SpatialService_GetEntitiesInArea_Handler,
		},
		{
			MethodName: "GetEntitiesInLine",
			Handler:    _SpatialService_GetEntitiesInLine_Handler,
		},
		{
			MethodName: "FindPath",
			Handler:    _SpatialService_FindPath_Handler,
		},
		{
			MethodName: "GetDistance",
			Handler:    _SpatialService_GetDistance_Handler,
		},
		{
			MethodName: "CheckLineOfSight",
			Handler:    _SpatialService_CheckLineOfSight_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _SpatialService_CreateConnection_Handler,
		},
		{
			MethodName: "GetConnections",
			Handler:    _SpatialService_GetConnections_Handler,
		},
		{
			MethodName: "MoveEntityBetweenRooms",
			Handler:    _SpatialService_MoveEntityBetweenRooms_Handler,
		},
		{
			MethodName: "GetValidPositions",
			Handler:    _SpatialService_GetValidPositions_Handler,
		},
		{
			MethodName: "IsValidPosition",
			Handler:    _SpatialService_IsValidPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seshat/spatial.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: seshat/dice.proto

package seshat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Basic roll request
type RollRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sides         int32                  `protobuf:"varint,1,opt,name=sides,proto3" json:"sides,omitempty"`                      // Die type (4, 6, 8, 10, 12, 20, 100)
	Context       string                 `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`                   // Context for logging ("attack", "damage", etc.)
	EntityId      string                 `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"` // Who is rolling
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollRequest) Reset() {
	*x = RollRequest{}
	mi := &file_seshat_dice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollRequest) ProtoMessage() {}

func (x *RollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollRequest.ProtoReflect.Descriptor instead.
func (*RollRequest) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{0}
}

func (x *RollRequest) GetSides() int32 {
	if x != nil {
		return x.Sides
	}
	return 0
}

func (x *RollRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RollRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type RollResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        int32                  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Context       string                 `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	EntityId      string                 `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status        *Result                `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollResponse) Reset() {
	*x = RollResponse{}
	mi := &file_seshat_dice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollResponse) ProtoMessage() {}

func (x *RollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollResponse.ProtoReflect.Descriptor instead.
func (*RollResponse) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{1}
}

func (x *RollResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *RollResponse) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RollResponse) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RollResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RollResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Multiple dice of same type
type RollMultipleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Sides         int32                  `protobuf:"varint,2,opt,name=sides,proto3" json:"sides,omitempty"`
	Context       string                 `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	EntityId      string                 `protobuf:"bytes,4,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	DropLowest    bool                   `protobuf:"varint,5,opt,name=drop_lowest,json=dropLowest,proto3" json:"drop_lowest,omitempty"` // For ability score generation
	DropHighest   bool                   `protobuf:"varint,6,opt,name=drop_highest,json=dropHighest,proto3" json:"drop_highest,omitempty"`
	KeepCount     int32                  `protobuf:"varint,7,opt,name=keep_count,json=keepCount,proto3" json:"keep_count,omitempty"` // Keep N highest/lowest
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollMultipleRequest) Reset() {
	*x = RollMultipleRequest{}
	mi := &file_seshat_dice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollMultipleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollMultipleRequest) ProtoMessage() {}

func (x *RollMultipleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollMultipleRequest.ProtoReflect.Descriptor instead.
func (*RollMultipleRequest) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{2}
}

func (x *RollMultipleRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RollMultipleRequest) GetSides() int32 {
	if x != nil {
		return x.Sides
	}
	return 0
}

func (x *RollMultipleRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RollMultipleRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RollMultipleRequest) GetDropLowest() bool {
	if x != nil {
		return x.DropLowest
	}
	return false
}

func (x *RollMultipleRequest) GetDropHighest() bool {
	if x != nil {
		return x.DropHighest
	}
	return false
}

func (x *RollMultipleRequest) GetKeepCount() int32 {
	if x != nil {
		return x.KeepCount
	}
	return 0
}

type RollMultipleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rolls         []int32                `protobuf:"varint,1,rep,packed,name=rolls,proto3" json:"rolls,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	KeptRolls     []int32                `protobuf:"varint,3,rep,packed,name=kept_rolls,json=keptRolls,proto3" json:"kept_rolls,omitempty"` // After dropping dice
	DroppedRolls  []int32                `protobuf:"varint,4,rep,packed,name=dropped_rolls,json=droppedRolls,proto3" json:"dropped_rolls,omitempty"`
	Context       string                 `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	EntityId      string                 `protobuf:"bytes,6,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status        *Result                `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollMultipleResponse) Reset() {
	*x = RollMultipleResponse{}
	mi := &file_seshat_dice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollMultipleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollMultipleResponse) ProtoMessage() {}

func (x *RollMultipleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollMultipleResponse.ProtoReflect.Descriptor instead.
func (*RollMultipleResponse) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{3}
}

func (x *RollMultipleResponse) GetRolls() []int32 {
	if x != nil {
		return x.Rolls
	}
	return nil
}

func (x *RollMultipleResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RollMultipleResponse) GetKeptRolls() []int32 {
	if x != nil {
		return x.KeptRolls
	}
	return nil
}

func (x *RollMultipleResponse) GetDroppedRolls() []int32 {
	if x != nil {
		return x.DroppedRolls
	}
	return nil
}

func (x *RollMultipleResponse) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RollMultipleResponse) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RollMultipleResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RollMultipleResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Formula-based rolling
type RollFormulaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Formula       string                 `protobuf:"bytes,1,opt,name=formula,proto3" json:"formula,omitempty"` // "2d6+3", "1d20+5", "4d6kh3" (keep highest 3)
	Context       string                 `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	EntityId      string                 `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollFormulaRequest) Reset() {
	*x = RollFormulaRequest{}
	mi := &file_seshat_dice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollFormulaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollFormulaRequest) ProtoMessage() {}

func (x *RollFormulaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollFormulaRequest.ProtoReflect.Descriptor instead.
func (*RollFormulaRequest) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{4}
}

func (x *RollFormulaRequest) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *RollFormulaRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RollFormulaRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type RollFormulaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Formula       string                 `protobuf:"bytes,1,opt,name=formula,proto3" json:"formula,omitempty"`
	Groups        []*DiceGroup           `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"` // Individual parts of formula
	Total         int32                  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Modifier      int32                  `protobuf:"varint,4,opt,name=modifier,proto3" json:"modifier,omitempty"`
	Context       string                 `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	EntityId      string                 `protobuf:"bytes,6,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status        *Result                `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollFormulaResponse) Reset() {
	*x = RollFormulaResponse{}
	mi := &file_seshat_dice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollFormulaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollFormulaResponse) ProtoMessage() {}

func (x *RollFormulaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollFormulaResponse.ProtoReflect.Descriptor instead.
func (*RollFormulaResponse) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{5}
}

func (x *RollFormulaResponse) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *RollFormulaResponse) GetGroups() []*DiceGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RollFormulaResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RollFormulaResponse) GetModifier() int32 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

func (x *RollFormulaResponse) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RollFormulaResponse) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RollFormulaResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RollFormulaResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type DiceGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Sides         int32                  `protobuf:"varint,2,opt,name=sides,proto3" json:"sides,omitempty"`
	Rolls         []int32                `protobuf:"varint,3,rep,packed,name=rolls,proto3" json:"rolls,omitempty"`
	Subtotal      int32                  `protobuf:"varint,4,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Operation     string                 `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"` // "keep_highest", "keep_lowest", "drop", etc.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiceGroup) Reset() {
	*x = DiceGroup{}
	mi := &file_seshat_dice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiceGroup) ProtoMessage() {}

func (x *DiceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiceGroup.ProtoReflect.Descriptor instead.
func (*DiceGroup) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{6}
}

func (x *DiceGroup) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DiceGroup) GetSides() int32 {
	if x != nil {
		return x.Sides
	}
	return 0
}

func (x *DiceGroup) GetRolls() []int32 {
	if x != nil {
		return x.Rolls
	}
	return nil
}

func (x *DiceGroup) GetSubtotal() int32 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *DiceGroup) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

// Roll history tracking
type RollHistoryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EntityId       string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Context        string                 `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`                                      // Filter by context
	Limit          int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                                         // Max results
	SinceTimestamp int64                  `protobuf:"varint,4,opt,name=since_timestamp,json=sinceTimestamp,proto3" json:"since_timestamp,omitempty"` // Only rolls after this time
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RollHistoryRequest) Reset() {
	*x = RollHistoryRequest{}
	mi := &file_seshat_dice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollHistoryRequest) ProtoMessage() {}

func (x *RollHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollHistoryRequest.ProtoReflect.Descriptor instead.
func (*RollHistoryRequest) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{7}
}

func (x *RollHistoryRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RollHistoryRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RollHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RollHistoryRequest) GetSinceTimestamp() int64 {
	if x != nil {
		return x.SinceTimestamp
	}
	return 0
}

type RollHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rolls         []*RollRecord          `protobuf:"bytes,1,rep,name=rolls,proto3" json:"rolls,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Status        *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollHistoryResponse) Reset() {
	*x = RollHistoryResponse{}
	mi := &file_seshat_dice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollHistoryResponse) ProtoMessage() {}

func (x *RollHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollHistoryResponse.ProtoReflect.Descriptor instead.
func (*RollHistoryResponse) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{8}
}

func (x *RollHistoryResponse) GetRolls() []*RollRecord {
	if x != nil {
		return x.Rolls
	}
	return nil
}

func (x *RollHistoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *RollHistoryResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type RollRecord struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Formula         string                 `protobuf:"bytes,1,opt,name=formula,proto3" json:"formula,omitempty"`
	Result          int32                  `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Context         string                 `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	EntityId        string                 `protobuf:"bytes,4,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Timestamp       int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IndividualRolls []int32                `protobuf:"varint,6,rep,packed,name=individual_rolls,json=individualRolls,proto3" json:"individual_rolls,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RollRecord) Reset() {
	*x = RollRecord{}
	mi := &file_seshat_dice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollRecord) ProtoMessage() {}

func (x *RollRecord) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollRecord.ProtoReflect.Descriptor instead.
func (*RollRecord) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{9}
}

func (x *RollRecord) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *RollRecord) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *RollRecord) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RollRecord) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RollRecord) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RollRecord) GetIndividualRolls() []int32 {
	if x != nil {
		return x.IndividualRolls
	}
	return nil
}

// Fairness testing
type FairnessTestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sides         int32                  `protobuf:"varint,1,opt,name=sides,proto3" json:"sides,omitempty"`
	SampleSize    int32                  `protobuf:"varint,2,opt,name=sample_size,json=sampleSize,proto3" json:"sample_size,omitempty"` // Number of rolls to test
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FairnessTestRequest) Reset() {
	*x = FairnessTestRequest{}
	mi := &file_seshat_dice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FairnessTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FairnessTestRequest) ProtoMessage() {}

func (x *FairnessTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FairnessTestRequest.ProtoReflect.Descriptor instead.
func (*FairnessTestRequest) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{10}
}

func (x *FairnessTestRequest) GetSides() int32 {
	if x != nil {
		return x.Sides
	}
	return 0
}

func (x *FairnessTestRequest) GetSampleSize() int32 {
	if x != nil {
		return x.SampleSize
	}
	return 0
}

type FairnessTestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Distribution  []int32                `protobuf:"varint,1,rep,packed,name=distribution,proto3" json:"distribution,omitempty"` // Count of each face
	ChiSquared    float64                `protobuf:"fixed64,2,opt,name=chi_squared,json=chiSquared,proto3" json:"chi_squared,omitempty"`
	PValue        float64                `protobuf:"fixed64,3,opt,name=p_value,json=pValue,proto3" json:"p_value,omitempty"`
	IsFair        bool                   `protobuf:"varint,4,opt,name=is_fair,json=isFair,proto3" json:"is_fair,omitempty"` // Statistical fairness assessment
	SampleSize    int32                  `protobuf:"varint,5,opt,name=sample_size,json=sampleSize,proto3" json:"sample_size,omitempty"`
	Status        *Result                `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FairnessTestResponse) Reset() {
	*x = FairnessTestResponse{}
	mi := &file_seshat_dice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FairnessTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FairnessTestResponse) ProtoMessage() {}

func (x *FairnessTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_dice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FairnessTestResponse.ProtoReflect.Descriptor instead.
func (*FairnessTestResponse) Descriptor() ([]byte, []int) {
	return file_seshat_dice_proto_rawDescGZIP(), []int{11}
}

func (x *FairnessTestResponse) GetDistribution() []int32 {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *FairnessTestResponse) GetChiSquared() float64 {
	if x != nil {
		return x.ChiSquared
	}
	return 0
}

func (x *FairnessTestResponse) GetPValue() float64 {
	if x != nil {
		return x.PValue
	}
	return 0
}

func (x *FairnessTestResponse) GetIsFair() bool {
	if x != nil {
		return x.IsFair
	}
	return false
}

func (x *FairnessTestResponse) GetSampleSize() int32 {
	if x != nil {
		return x.SampleSize
	}
	return 0
}

func (x *FairnessTestResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_seshat_dice_proto protoreflect.FileDescriptor

const file_seshat_dice_proto_rawDesc = "" +
	"\n" +
	"\x11seshat/dice.proto\x12\x06seshat\x1a\x13seshat/common.proto\"Z\n" +
	"\vRollRequest\x12\x14\n" +
	"\x05sides\x18\x01 \x01(\x05R\x05sides\x12\x18\n" +
	"\acontext\x18\x02 \x01(\tR\acontext\x12\x1b\n" +
	"\tentity_id\x18\x03 \x01(\tR\bentityId\"\xa3\x01\n" +
	"\fRollResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\x05R\x06result\x12\x18\n" +
	"\acontext\x18\x02 \x01(\tR\acontext\x12\x1b\n" +
	"\tentity_id\x18\x03 \x01(\tR\bentityId\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12&\n" +
	"\x06status\x18\x05 \x01(\v2\x0e.seshat.ResultR\x06status\"\xdb\x01\n" +
	"\x13RollMultipleRequest\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count\x12\x14\n" +
	"\x05sides\x18\x02 \x01(\x05R\x05sides\x12\x18\n" +
	"\acontext\x18\x03 \x01(\tR\acontext\x12\x1b\n" +
	"\tentity_id\x18\x04 \x01(\tR\bentityId\x12\x1f\n" +
	"\vdrop_lowest\x18\x05 \x01(\bR\n" +
	"dropLowest\x12!\n" +
	"\fdrop_highest\x18\x06 \x01(\bR\vdropHighest\x12\x1d\n" +
	"\n" +
	"keep_count\x18\a \x01(\x05R\tkeepCount\"\x83\x02\n" +
	"\x14RollMultipleResponse\x12\x14\n" +
	"\x05rolls\x18\x01 \x03(\x05R\x05rolls\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x05R\x05total\x12\x1d\n" +
	"\n" +
	"kept_rolls\x18\x03 \x03(\x05R\tkeptRolls\x12#\n" +
	"\rdropped_rolls\x18\x04 \x03(\x05R\fdroppedRolls\x12\x18\n" +
	"\acontext\x18\x05 \x01(\tR\acontext\x12\x1b\n" +
	"\tentity_id\x18\x06 \x01(\tR\bentityId\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\x03R\ttimestamp\x12&\n" +
	"\x06status\x18\b \x01(\v2\x0e.seshat.ResultR\x06status\"e\n" +
	"\x12RollFormulaRequest\x12\x18\n" +
	"\aformula\x18\x01 \x01(\tR\aformula\x12\x18\n" +
	"\acontext\x18\x02 \x01(\tR\acontext\x12\x1b\n" +
	"\tentity_id\x18\x03 \x01(\tR\bentityId\"\x89\x02\n" +
	"\x13RollFormulaResponse\x12\x18\n" +
	"\aformula\x18\x01 \x01(\tR\aformula\x12)\n" +
	"\x06groups\x18\x02 \x03(\v2\x11.seshat.DiceGroupR\x06groups\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x05R\x05total\x12\x1a\n" +
	"\bmodifier\x18\x04 \x01(\x05R\bmodifier\x12\x18\n" +
	"\acontext\x18\x05 \x01(\tR\acontext\x12\x1b\n" +
	"\tentity_id\x18\x06 \x01(\tR\bentityId\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\x03R\ttimestamp\x12&\n" +
	"\x06status\x18\b \x01(\v2\x0e.seshat.ResultR\x06status\"\x87\x01\n" +
	"\tDiceGroup\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count\x12\x14\n" +
	"\x05sides\x18\x02 \x01(\x05R\x05sides\x12\x14\n" +
	"\x05rolls\x18\x03 \x03(\x05R\x05rolls\x12\x1a\n" +
	"\bsubtotal\x18\x04 \x01(\x05R\bsubtotal\x12\x1c\n" +
	"\toperation\x18\x05 \x01(\tR\toperation\"\x8a\x01\n" +
	"\x12RollHistoryRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x18\n" +
	"\acontext\x18\x02 \x01(\tR\acontext\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12'\n" +
	"\x0fsince_timestamp\x18\x04 \x01(\x03R\x0esinceTimestamp\"\x88\x01\n" +
	"\x13RollHistoryResponse\x12(\n" +
	"\x05rolls\x18\x01 \x03(\v2\x12.seshat.RollRecordR\x05rolls\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"\xbe\x01\n" +
	"\n" +
	"RollRecord\x12\x18\n" +
	"\aformula\x18\x01 \x01(\tR\aformula\x12\x16\n" +
	"\x06result\x18\x02 \x01(\x05R\x06result\x12\x18\n" +
	"\acontext\x18\x03 \x01(\tR\acontext\x12\x1b\n" +
	"\tentity_id\x18\x04 \x01(\tR\bentityId\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\x12)\n" +
	"\x10individual_rolls\x18\x06 \x03(\x05R\x0findividualRolls\"L\n" +
	"\x13FairnessTestRequest\x12\x14\n" +
	"\x05sides\x18\x01 \x01(\x05R\x05sides\x12\x1f\n" +
	"\vsample_size\x18\x02 \x01(\x05R\n" +
	"sampleSize\"\xd6\x01\n" +
	"\x14FairnessTestResponse\x12\"\n" +
	"\fdistribution\x18\x01 \x03(\x05R\fdistribution\x12\x1f\n" +
	"\vchi_squared\x18\x02 \x01(\x01R\n" +
	"chiSquared\x12\x17\n" +
	"\ap_value\x18\x03 \x01(\x01R\x06pValue\x12\x17\n" +
	"\ais_fair\x18\x04 \x01(\bR\x06isFair\x12\x1f\n" +
	"\vsample_size\x18\x05 \x01(\x05R\n" +
	"sampleSize\x12&\n" +
	"\x06status\x18\x06 \x01(\v2\x0e.seshat.ResultR\x06status2\xa7\x03\n" +
	"\vDiceService\x121\n" +
	"\x04Roll\x12\x13.seshat.RollRequest\x1a\x14.seshat.RollResponse\x12I\n" +
	"\fRollMultiple\x12\x1b.seshat.RollMultipleRequest\x1a\x1c.seshat.RollMultipleResponse\x12F\n" +
	"\vRollFormula\x12\x1a.seshat.RollFormulaRequest\x1a\x1b.seshat.RollFormulaResponse\x12<\n" +
	"\vStreamRolls\x12\x13.seshat.RollRequest\x1a\x14.seshat.RollResponse(\x010\x01\x12I\n" +
	"\x0eGetRollHistory\x12\x1a.seshat.RollHistoryRequest\x1a\x1b.seshat.RollHistoryResponse\x12I\n" +
	"\fTestFairness\x12\x1b.seshat.FairnessTestRequest\x1a\x1c.seshat.FairnessTestResponseB!Z\x1fgithub.com/seshat/protos/seshatb\x06proto3"

var (
	file_seshat_dice_proto_rawDescOnce sync.Once
	file_seshat_dice_proto_rawDescData []byte
)

func file_seshat_dice_proto_rawDescGZIP() []byte {
	file_seshat_dice_proto_rawDescOnce.Do(func() {
		file_seshat_dice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_seshat_dice_proto_rawDesc), len(file_seshat_dice_proto_rawDesc)))
	})
	return file_seshat_dice_proto_rawDescData
}

var file_seshat_dice_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_seshat_dice_proto_goTypes = []any{
	(*RollRequest)(nil),          // 0: seshat.RollRequest
	(*RollResponse)(nil),         // 1: seshat.RollResponse
	(*RollMultipleRequest)(nil),  // 2: seshat.RollMultipleRequest
	(*RollMultipleResponse)(nil), // 3: seshat.RollMultipleResponse
	(*RollFormulaRequest)(nil),   // 4: seshat.RollFormulaRequest
	(*RollFormulaResponse)(nil),  // 5: seshat.RollFormulaResponse
	(*DiceGroup)(nil),            // 6: seshat.DiceGroup
	(*RollHistoryRequest)(nil),   // 7: seshat.RollHistoryRequest
	(*RollHistoryResponse)(nil),  // 8: seshat.RollHistoryResponse
	(*RollRecord)(nil),           // 9: seshat.RollRecord
	(*FairnessTestRequest)(nil),  // 10: seshat.FairnessTestRequest
	(*FairnessTestResponse)(nil), // 11: seshat.FairnessTestResponse
	(*Result)(nil),               // 12: seshat.Result
}
var file_seshat_dice_proto_depIdxs = []int32{
	12, // 0: seshat.RollResponse.status:type_name -> seshat.Result
	12, // 1: seshat.RollMultipleResponse.status:type_name -> seshat.Result
	6,  // 2: seshat.RollFormulaResponse.groups:type_name -> seshat.DiceGroup
	12, // 3: seshat.RollFormulaResponse.status:type_name -> seshat.Result
	9,  // 4: seshat.RollHistoryResponse.rolls:type_name -> seshat.RollRecord
	12, // 5: seshat.RollHistoryResponse.status:type_name -> seshat.Result
	12, // 6: seshat.FairnessTestResponse.status:type_name -> seshat.Result
	0,  // 7: seshat.DiceService.Roll:input_type -> seshat.RollRequest
	2,  // 8: seshat.DiceService.RollMultiple:input_type -> seshat.RollMultipleRequest
	4,  // 9: seshat.DiceService.RollFormula:input_type -> seshat.RollFormulaRequest
	0,  // 10: seshat.DiceService.StreamRolls:input_type -> seshat.RollRequest
	7,  // 11: seshat.DiceService.GetRollHistory:input_type -> seshat.RollHistoryRequest
	10, // 12: seshat.DiceService.TestFairness:input_type -> seshat.FairnessTestRequest
	1,  // 13: seshat.DiceService.Roll:output_type -> seshat.RollResponse
	3,  // 14: seshat.DiceService.RollMultiple:output_type -> seshat.RollMultipleResponse
	5,  // 15: seshat.DiceService.RollFormula:output_type -> seshat.RollFormulaResponse
	1,  // 16: seshat.DiceService.StreamRolls:output_type -> seshat.RollResponse
	8,  // 17: seshat.DiceService.GetRollHistory:output_type -> seshat.RollHistoryResponse
	11, // 18: seshat.DiceService.TestFairness:output_type -> seshat.FairnessTestResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_seshat_dice_proto_init() }
func file_seshat_dice_proto_init() {
	if File_seshat_dice_proto != nil {
		return
	}
	file_seshat_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_seshat_dice_proto_rawDesc), len(file_seshat_dice_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_seshat_dice_proto_goTypes,
		DependencyIndexes: file_seshat_dice_proto_depIdxs,
		MessageInfos:      file_seshat_dice_proto_msgTypes,
	}.Build()
	File_seshat_dice_proto = out.File
	file_seshat_dice_proto_goTypes = nil
	file_seshat_dice_proto_depIdxs = nil
}

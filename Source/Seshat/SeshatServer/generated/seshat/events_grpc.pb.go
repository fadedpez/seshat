// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: seshat/events.proto

package seshat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventService_PublishEvent_FullMethodName         = "/seshat.EventService/PublishEvent"
	EventService_SubscribeToEvents_FullMethodName    = "/seshat.EventService/SubscribeToEvents"
	EventService_SubscribeToAllEvents_FullMethodName = "/seshat.EventService/SubscribeToAllEvents"
	EventService_GetEventHistory_FullMethodName      = "/seshat.EventService/GetEventHistory"
	EventService_ClearEventHistory_FullMethodName    = "/seshat.EventService/ClearEventHistory"
	EventService_GetSubscriptions_FullMethodName     = "/seshat.EventService/GetSubscriptions"
	EventService_Unsubscribe_FullMethodName          = "/seshat.EventService/Unsubscribe"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Event system service - exposes all events toolkit functionality
type EventServiceClient interface {
	// Publish an event to the bus
	PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error)
	// Subscribe to specific event types (streaming)
	SubscribeToEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameEvent], error)
	// Subscribe to all events (streaming)
	SubscribeToAllEvents(ctx context.Context, in *SubscribeAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameEvent], error)
	// Get event history
	GetEventHistory(ctx context.Context, in *EventHistoryRequest, opts ...grpc.CallOption) (*EventHistoryResponse, error)
	// Clear event history
	ClearEventHistory(ctx context.Context, in *ClearEventHistoryRequest, opts ...grpc.CallOption) (*ClearEventHistoryResponse, error)
	// Get active subscriptions
	GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error)
	// Unsubscribe from events
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishEventResponse)
	err := c.cc.Invoke(ctx, EventService_PublishEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) SubscribeToEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], EventService_SubscribeToEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, GameEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventService_SubscribeToEventsClient = grpc.ServerStreamingClient[GameEvent]

func (c *eventServiceClient) SubscribeToAllEvents(ctx context.Context, in *SubscribeAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[1], EventService_SubscribeToAllEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeAllRequest, GameEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventService_SubscribeToAllEventsClient = grpc.ServerStreamingClient[GameEvent]

func (c *eventServiceClient) GetEventHistory(ctx context.Context, in *EventHistoryRequest, opts ...grpc.CallOption) (*EventHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventHistoryResponse)
	err := c.cc.Invoke(ctx, EventService_GetEventHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ClearEventHistory(ctx context.Context, in *ClearEventHistoryRequest, opts ...grpc.CallOption) (*ClearEventHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearEventHistoryResponse)
	err := c.cc.Invoke(ctx, EventService_ClearEventHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscriptionsResponse)
	err := c.cc.Invoke(ctx, EventService_GetSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, EventService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility.
//
// Event system service - exposes all events toolkit functionality
type EventServiceServer interface {
	// Publish an event to the bus
	PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error)
	// Subscribe to specific event types (streaming)
	SubscribeToEvents(*SubscribeRequest, grpc.ServerStreamingServer[GameEvent]) error
	// Subscribe to all events (streaming)
	SubscribeToAllEvents(*SubscribeAllRequest, grpc.ServerStreamingServer[GameEvent]) error
	// Get event history
	GetEventHistory(context.Context, *EventHistoryRequest) (*EventHistoryResponse, error)
	// Clear event history
	ClearEventHistory(context.Context, *ClearEventHistoryRequest) (*ClearEventHistoryResponse, error)
	// Get active subscriptions
	GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error)
	// Unsubscribe from events
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventServiceServer struct{}

func (UnimplementedEventServiceServer) PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEvent not implemented")
}
func (UnimplementedEventServiceServer) SubscribeToEvents(*SubscribeRequest, grpc.ServerStreamingServer[GameEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}
func (UnimplementedEventServiceServer) SubscribeToAllEvents(*SubscribeAllRequest, grpc.ServerStreamingServer[GameEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToAllEvents not implemented")
}
func (UnimplementedEventServiceServer) GetEventHistory(context.Context, *EventHistoryRequest) (*EventHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventHistory not implemented")
}
func (UnimplementedEventServiceServer) ClearEventHistory(context.Context, *ClearEventHistoryRequest) (*ClearEventHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearEventHistory not implemented")
}
func (UnimplementedEventServiceServer) GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedEventServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}
func (UnimplementedEventServiceServer) testEmbeddedByValue()                      {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_PublishEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).PublishEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_PublishEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).PublishEvent(ctx, req.(*PublishEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).SubscribeToEvents(m, &grpc.GenericServerStream[SubscribeRequest, GameEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventService_SubscribeToEventsServer = grpc.ServerStreamingServer[GameEvent]

func _EventService_SubscribeToAllEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).SubscribeToAllEvents(m, &grpc.GenericServerStream[SubscribeAllRequest, GameEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventService_SubscribeToAllEventsServer = grpc.ServerStreamingServer[GameEvent]

func _EventService_GetEventHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEventHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventHistory(ctx, req.(*EventHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ClearEventHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearEventHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ClearEventHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_ClearEventHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ClearEventHistory(ctx, req.(*ClearEventHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetSubscriptions(ctx, req.(*GetSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seshat.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishEvent",
			Handler:    _EventService_PublishEvent_Handler,
		},
		{
			MethodName: "GetEventHistory",
			Handler:    _EventService_GetEventHistory_Handler,
		},
		{
			MethodName: "ClearEventHistory",
			Handler:    _EventService_ClearEventHistory_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _EventService_GetSubscriptions_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _EventService_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _EventService_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToAllEvents",
			Handler:       _EventService_SubscribeToAllEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "seshat/events.proto",
}

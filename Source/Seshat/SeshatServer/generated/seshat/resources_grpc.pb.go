// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: seshat/resources.proto

package seshat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourceService_CreateResourcePool_FullMethodName       = "/seshat.ResourceService/CreateResourcePool"
	ResourceService_GetResourcePool_FullMethodName          = "/seshat.ResourceService/GetResourcePool"
	ResourceService_UpdateResourcePool_FullMethodName       = "/seshat.ResourceService/UpdateResourcePool"
	ResourceService_DeleteResourcePool_FullMethodName       = "/seshat.ResourceService/DeleteResourcePool"
	ResourceService_ConsumeResource_FullMethodName          = "/seshat.ResourceService/ConsumeResource"
	ResourceService_RestoreResource_FullMethodName          = "/seshat.ResourceService/RestoreResource"
	ResourceService_GetResourceStatus_FullMethodName        = "/seshat.ResourceService/GetResourceStatus"
	ResourceService_ConsumeMultipleResources_FullMethodName = "/seshat.ResourceService/ConsumeMultipleResources"
	ResourceService_RestoreAllResources_FullMethodName      = "/seshat.ResourceService/RestoreAllResources"
	ResourceService_TriggerRestoration_FullMethodName       = "/seshat.ResourceService/TriggerRestoration"
	ResourceService_GetRestorationTriggers_FullMethodName   = "/seshat.ResourceService/GetRestorationTriggers"
	ResourceService_GetResourceHistory_FullMethodName       = "/seshat.ResourceService/GetResourceHistory"
	ResourceService_GetLowResourceAlerts_FullMethodName     = "/seshat.ResourceService/GetLowResourceAlerts"
	ResourceService_GetResourceTemplates_FullMethodName     = "/seshat.ResourceService/GetResourceTemplates"
	ResourceService_CreateResourceTemplate_FullMethodName   = "/seshat.ResourceService/CreateResourceTemplate"
)

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Resource management service - exposes all resources toolkit functionality
type ResourceServiceClient interface {
	// Resource pool management
	CreateResourcePool(ctx context.Context, in *CreateResourcePoolRequest, opts ...grpc.CallOption) (*CreateResourcePoolResponse, error)
	GetResourcePool(ctx context.Context, in *GetResourcePoolRequest, opts ...grpc.CallOption) (*GetResourcePoolResponse, error)
	UpdateResourcePool(ctx context.Context, in *UpdateResourcePoolRequest, opts ...grpc.CallOption) (*UpdateResourcePoolResponse, error)
	DeleteResourcePool(ctx context.Context, in *DeleteResourcePoolRequest, opts ...grpc.CallOption) (*DeleteResourcePoolResponse, error)
	// Resource operations
	ConsumeResource(ctx context.Context, in *ConsumeResourceRequest, opts ...grpc.CallOption) (*ConsumeResourceResponse, error)
	RestoreResource(ctx context.Context, in *RestoreResourceRequest, opts ...grpc.CallOption) (*RestoreResourceResponse, error)
	GetResourceStatus(ctx context.Context, in *GetResourceStatusRequest, opts ...grpc.CallOption) (*GetResourceStatusResponse, error)
	// Batch operations
	ConsumeMultipleResources(ctx context.Context, in *ConsumeMultipleResourcesRequest, opts ...grpc.CallOption) (*ConsumeMultipleResourcesResponse, error)
	RestoreAllResources(ctx context.Context, in *RestoreAllResourcesRequest, opts ...grpc.CallOption) (*RestoreAllResourcesResponse, error)
	// Resource restoration triggers
	TriggerRestoration(ctx context.Context, in *TriggerRestorationRequest, opts ...grpc.CallOption) (*TriggerRestorationResponse, error)
	GetRestorationTriggers(ctx context.Context, in *GetRestorationTriggersRequest, opts ...grpc.CallOption) (*GetRestorationTriggersResponse, error)
	// Resource monitoring
	GetResourceHistory(ctx context.Context, in *GetResourceHistoryRequest, opts ...grpc.CallOption) (*GetResourceHistoryResponse, error)
	GetLowResourceAlerts(ctx context.Context, in *GetLowResourceAlertsRequest, opts ...grpc.CallOption) (*GetLowResourceAlertsResponse, error)
	// Templates and presets
	GetResourceTemplates(ctx context.Context, in *GetResourceTemplatesRequest, opts ...grpc.CallOption) (*GetResourceTemplatesResponse, error)
	CreateResourceTemplate(ctx context.Context, in *CreateResourceTemplateRequest, opts ...grpc.CallOption) (*CreateResourceTemplateResponse, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) CreateResourcePool(ctx context.Context, in *CreateResourcePoolRequest, opts ...grpc.CallOption) (*CreateResourcePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResourcePoolResponse)
	err := c.cc.Invoke(ctx, ResourceService_CreateResourcePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourcePool(ctx context.Context, in *GetResourcePoolRequest, opts ...grpc.CallOption) (*GetResourcePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourcePoolResponse)
	err := c.cc.Invoke(ctx, ResourceService_GetResourcePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateResourcePool(ctx context.Context, in *UpdateResourcePoolRequest, opts ...grpc.CallOption) (*UpdateResourcePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResourcePoolResponse)
	err := c.cc.Invoke(ctx, ResourceService_UpdateResourcePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteResourcePool(ctx context.Context, in *DeleteResourcePoolRequest, opts ...grpc.CallOption) (*DeleteResourcePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResourcePoolResponse)
	err := c.cc.Invoke(ctx, ResourceService_DeleteResourcePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ConsumeResource(ctx context.Context, in *ConsumeResourceRequest, opts ...grpc.CallOption) (*ConsumeResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeResourceResponse)
	err := c.cc.Invoke(ctx, ResourceService_ConsumeResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RestoreResource(ctx context.Context, in *RestoreResourceRequest, opts ...grpc.CallOption) (*RestoreResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreResourceResponse)
	err := c.cc.Invoke(ctx, ResourceService_RestoreResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourceStatus(ctx context.Context, in *GetResourceStatusRequest, opts ...grpc.CallOption) (*GetResourceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceStatusResponse)
	err := c.cc.Invoke(ctx, ResourceService_GetResourceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ConsumeMultipleResources(ctx context.Context, in *ConsumeMultipleResourcesRequest, opts ...grpc.CallOption) (*ConsumeMultipleResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeMultipleResourcesResponse)
	err := c.cc.Invoke(ctx, ResourceService_ConsumeMultipleResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RestoreAllResources(ctx context.Context, in *RestoreAllResourcesRequest, opts ...grpc.CallOption) (*RestoreAllResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreAllResourcesResponse)
	err := c.cc.Invoke(ctx, ResourceService_RestoreAllResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) TriggerRestoration(ctx context.Context, in *TriggerRestorationRequest, opts ...grpc.CallOption) (*TriggerRestorationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerRestorationResponse)
	err := c.cc.Invoke(ctx, ResourceService_TriggerRestoration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetRestorationTriggers(ctx context.Context, in *GetRestorationTriggersRequest, opts ...grpc.CallOption) (*GetRestorationTriggersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRestorationTriggersResponse)
	err := c.cc.Invoke(ctx, ResourceService_GetRestorationTriggers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourceHistory(ctx context.Context, in *GetResourceHistoryRequest, opts ...grpc.CallOption) (*GetResourceHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceHistoryResponse)
	err := c.cc.Invoke(ctx, ResourceService_GetResourceHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetLowResourceAlerts(ctx context.Context, in *GetLowResourceAlertsRequest, opts ...grpc.CallOption) (*GetLowResourceAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLowResourceAlertsResponse)
	err := c.cc.Invoke(ctx, ResourceService_GetLowResourceAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourceTemplates(ctx context.Context, in *GetResourceTemplatesRequest, opts ...grpc.CallOption) (*GetResourceTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceTemplatesResponse)
	err := c.cc.Invoke(ctx, ResourceService_GetResourceTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateResourceTemplate(ctx context.Context, in *CreateResourceTemplateRequest, opts ...grpc.CallOption) (*CreateResourceTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResourceTemplateResponse)
	err := c.cc.Invoke(ctx, ResourceService_CreateResourceTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations must embed UnimplementedResourceServiceServer
// for forward compatibility.
//
// Resource management service - exposes all resources toolkit functionality
type ResourceServiceServer interface {
	// Resource pool management
	CreateResourcePool(context.Context, *CreateResourcePoolRequest) (*CreateResourcePoolResponse, error)
	GetResourcePool(context.Context, *GetResourcePoolRequest) (*GetResourcePoolResponse, error)
	UpdateResourcePool(context.Context, *UpdateResourcePoolRequest) (*UpdateResourcePoolResponse, error)
	DeleteResourcePool(context.Context, *DeleteResourcePoolRequest) (*DeleteResourcePoolResponse, error)
	// Resource operations
	ConsumeResource(context.Context, *ConsumeResourceRequest) (*ConsumeResourceResponse, error)
	RestoreResource(context.Context, *RestoreResourceRequest) (*RestoreResourceResponse, error)
	GetResourceStatus(context.Context, *GetResourceStatusRequest) (*GetResourceStatusResponse, error)
	// Batch operations
	ConsumeMultipleResources(context.Context, *ConsumeMultipleResourcesRequest) (*ConsumeMultipleResourcesResponse, error)
	RestoreAllResources(context.Context, *RestoreAllResourcesRequest) (*RestoreAllResourcesResponse, error)
	// Resource restoration triggers
	TriggerRestoration(context.Context, *TriggerRestorationRequest) (*TriggerRestorationResponse, error)
	GetRestorationTriggers(context.Context, *GetRestorationTriggersRequest) (*GetRestorationTriggersResponse, error)
	// Resource monitoring
	GetResourceHistory(context.Context, *GetResourceHistoryRequest) (*GetResourceHistoryResponse, error)
	GetLowResourceAlerts(context.Context, *GetLowResourceAlertsRequest) (*GetLowResourceAlertsResponse, error)
	// Templates and presets
	GetResourceTemplates(context.Context, *GetResourceTemplatesRequest) (*GetResourceTemplatesResponse, error)
	CreateResourceTemplate(context.Context, *CreateResourceTemplateRequest) (*CreateResourceTemplateResponse, error)
	mustEmbedUnimplementedResourceServiceServer()
}

// UnimplementedResourceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceServiceServer struct{}

func (UnimplementedResourceServiceServer) CreateResourcePool(context.Context, *CreateResourcePoolRequest) (*CreateResourcePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourcePool not implemented")
}
func (UnimplementedResourceServiceServer) GetResourcePool(context.Context, *GetResourcePoolRequest) (*GetResourcePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcePool not implemented")
}
func (UnimplementedResourceServiceServer) UpdateResourcePool(context.Context, *UpdateResourcePoolRequest) (*UpdateResourcePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourcePool not implemented")
}
func (UnimplementedResourceServiceServer) DeleteResourcePool(context.Context, *DeleteResourcePoolRequest) (*DeleteResourcePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourcePool not implemented")
}
func (UnimplementedResourceServiceServer) ConsumeResource(context.Context, *ConsumeResourceRequest) (*ConsumeResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeResource not implemented")
}
func (UnimplementedResourceServiceServer) RestoreResource(context.Context, *RestoreResourceRequest) (*RestoreResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreResource not implemented")
}
func (UnimplementedResourceServiceServer) GetResourceStatus(context.Context, *GetResourceStatusRequest) (*GetResourceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceStatus not implemented")
}
func (UnimplementedResourceServiceServer) ConsumeMultipleResources(context.Context, *ConsumeMultipleResourcesRequest) (*ConsumeMultipleResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeMultipleResources not implemented")
}
func (UnimplementedResourceServiceServer) RestoreAllResources(context.Context, *RestoreAllResourcesRequest) (*RestoreAllResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllResources not implemented")
}
func (UnimplementedResourceServiceServer) TriggerRestoration(context.Context, *TriggerRestorationRequest) (*TriggerRestorationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRestoration not implemented")
}
func (UnimplementedResourceServiceServer) GetRestorationTriggers(context.Context, *GetRestorationTriggersRequest) (*GetRestorationTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestorationTriggers not implemented")
}
func (UnimplementedResourceServiceServer) GetResourceHistory(context.Context, *GetResourceHistoryRequest) (*GetResourceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceHistory not implemented")
}
func (UnimplementedResourceServiceServer) GetLowResourceAlerts(context.Context, *GetLowResourceAlertsRequest) (*GetLowResourceAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLowResourceAlerts not implemented")
}
func (UnimplementedResourceServiceServer) GetResourceTemplates(context.Context, *GetResourceTemplatesRequest) (*GetResourceTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceTemplates not implemented")
}
func (UnimplementedResourceServiceServer) CreateResourceTemplate(context.Context, *CreateResourceTemplateRequest) (*CreateResourceTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceTemplate not implemented")
}
func (UnimplementedResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {}
func (UnimplementedResourceServiceServer) testEmbeddedByValue()                         {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_CreateResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourcePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateResourcePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateResourcePool(ctx, req.(*CreateResourcePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetResourcePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourcePool(ctx, req.(*GetResourcePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourcePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateResourcePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateResourcePool(ctx, req.(*UpdateResourcePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourcePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteResourcePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteResourcePool(ctx, req.(*DeleteResourcePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ConsumeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ConsumeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ConsumeResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ConsumeResource(ctx, req.(*ConsumeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RestoreResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RestoreResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RestoreResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RestoreResource(ctx, req.(*RestoreResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetResourceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourceStatus(ctx, req.(*GetResourceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ConsumeMultipleResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeMultipleResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ConsumeMultipleResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ConsumeMultipleResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ConsumeMultipleResources(ctx, req.(*ConsumeMultipleResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RestoreAllResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreAllResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RestoreAllResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RestoreAllResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RestoreAllResources(ctx, req.(*RestoreAllResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_TriggerRestoration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRestorationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).TriggerRestoration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_TriggerRestoration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).TriggerRestoration(ctx, req.(*TriggerRestorationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetRestorationTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestorationTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetRestorationTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetRestorationTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetRestorationTriggers(ctx, req.(*GetRestorationTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetResourceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourceHistory(ctx, req.(*GetResourceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetLowResourceAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLowResourceAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetLowResourceAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetLowResourceAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetLowResourceAlerts(ctx, req.(*GetLowResourceAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourceTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourceTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetResourceTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourceTemplates(ctx, req.(*GetResourceTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateResourceTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateResourceTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateResourceTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateResourceTemplate(ctx, req.(*CreateResourceTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seshat.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResourcePool",
			Handler:    _ResourceService_CreateResourcePool_Handler,
		},
		{
			MethodName: "GetResourcePool",
			Handler:    _ResourceService_GetResourcePool_Handler,
		},
		{
			MethodName: "UpdateResourcePool",
			Handler:    _ResourceService_UpdateResourcePool_Handler,
		},
		{
			MethodName: "DeleteResourcePool",
			Handler:    _ResourceService_DeleteResourcePool_Handler,
		},
		{
			MethodName: "ConsumeResource",
			Handler:    _ResourceService_ConsumeResource_Handler,
		},
		{
			MethodName: "RestoreResource",
			Handler:    _ResourceService_RestoreResource_Handler,
		},
		{
			MethodName: "GetResourceStatus",
			Handler:    _ResourceService_GetResourceStatus_Handler,
		},
		{
			MethodName: "ConsumeMultipleResources",
			Handler:    _ResourceService_ConsumeMultipleResources_Handler,
		},
		{
			MethodName: "RestoreAllResources",
			Handler:    _ResourceService_RestoreAllResources_Handler,
		},
		{
			MethodName: "TriggerRestoration",
			Handler:    _ResourceService_TriggerRestoration_Handler,
		},
		{
			MethodName: "GetRestorationTriggers",
			Handler:    _ResourceService_GetRestorationTriggers_Handler,
		},
		{
			MethodName: "GetResourceHistory",
			Handler:    _ResourceService_GetResourceHistory_Handler,
		},
		{
			MethodName: "GetLowResourceAlerts",
			Handler:    _ResourceService_GetLowResourceAlerts_Handler,
		},
		{
			MethodName: "GetResourceTemplates",
			Handler:    _ResourceService_GetResourceTemplates_Handler,
		},
		{
			MethodName: "CreateResourceTemplate",
			Handler:    _ResourceService_CreateResourceTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seshat/resources.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: seshat/environments.proto

package seshat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnvironmentService_GenerateRoom_FullMethodName             = "/seshat.EnvironmentService/GenerateRoom"
	EnvironmentService_GenerateRoomWithTemplate_FullMethodName = "/seshat.EnvironmentService/GenerateRoomWithTemplate"
	EnvironmentService_GenerateWalls_FullMethodName            = "/seshat.EnvironmentService/GenerateWalls"
	EnvironmentService_DestroyWall_FullMethodName              = "/seshat.EnvironmentService/DestroyWall"
	EnvironmentService_GetWallInfo_FullMethodName              = "/seshat.EnvironmentService/GetWallInfo"
	EnvironmentService_GetThemes_FullMethodName                = "/seshat.EnvironmentService/GetThemes"
	EnvironmentService_ApplyTheme_FullMethodName               = "/seshat.EnvironmentService/ApplyTheme"
	EnvironmentService_GetShapeTemplates_FullMethodName        = "/seshat.EnvironmentService/GetShapeTemplates"
	EnvironmentService_CreateCustomShape_FullMethodName        = "/seshat.EnvironmentService/CreateCustomShape"
	EnvironmentService_AnalyzeCapacity_FullMethodName          = "/seshat.EnvironmentService/AnalyzeCapacity"
	EnvironmentService_GetOptimalSize_FullMethodName           = "/seshat.EnvironmentService/GetOptimalSize"
)

// EnvironmentServiceClient is the client API for EnvironmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Environment generation service - exposes all environments toolkit functionality
type EnvironmentServiceClient interface {
	// Room generation
	GenerateRoom(ctx context.Context, in *GenerateRoomRequest, opts ...grpc.CallOption) (*GenerateRoomResponse, error)
	GenerateRoomWithTemplate(ctx context.Context, in *GenerateRoomTemplateRequest, opts ...grpc.CallOption) (*GenerateRoomTemplateResponse, error)
	// Wall system
	GenerateWalls(ctx context.Context, in *GenerateWallsRequest, opts ...grpc.CallOption) (*GenerateWallsResponse, error)
	DestroyWall(ctx context.Context, in *DestroyWallRequest, opts ...grpc.CallOption) (*DestroyWallResponse, error)
	GetWallInfo(ctx context.Context, in *GetWallInfoRequest, opts ...grpc.CallOption) (*GetWallInfoResponse, error)
	// Environment themes and materials
	GetThemes(ctx context.Context, in *GetThemesRequest, opts ...grpc.CallOption) (*GetThemesResponse, error)
	ApplyTheme(ctx context.Context, in *ApplyThemeRequest, opts ...grpc.CallOption) (*ApplyThemeResponse, error)
	// Shape templates
	GetShapeTemplates(ctx context.Context, in *GetShapeTemplatesRequest, opts ...grpc.CallOption) (*GetShapeTemplatesResponse, error)
	CreateCustomShape(ctx context.Context, in *CreateCustomShapeRequest, opts ...grpc.CallOption) (*CreateCustomShapeResponse, error)
	// Capacity analysis
	AnalyzeCapacity(ctx context.Context, in *AnalyzeCapacityRequest, opts ...grpc.CallOption) (*AnalyzeCapacityResponse, error)
	GetOptimalSize(ctx context.Context, in *GetOptimalSizeRequest, opts ...grpc.CallOption) (*GetOptimalSizeResponse, error)
}

type environmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentServiceClient(cc grpc.ClientConnInterface) EnvironmentServiceClient {
	return &environmentServiceClient{cc}
}

func (c *environmentServiceClient) GenerateRoom(ctx context.Context, in *GenerateRoomRequest, opts ...grpc.CallOption) (*GenerateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateRoomResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GenerateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GenerateRoomWithTemplate(ctx context.Context, in *GenerateRoomTemplateRequest, opts ...grpc.CallOption) (*GenerateRoomTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateRoomTemplateResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GenerateRoomWithTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GenerateWalls(ctx context.Context, in *GenerateWallsRequest, opts ...grpc.CallOption) (*GenerateWallsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateWallsResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GenerateWalls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) DestroyWall(ctx context.Context, in *DestroyWallRequest, opts ...grpc.CallOption) (*DestroyWallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyWallResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_DestroyWall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GetWallInfo(ctx context.Context, in *GetWallInfoRequest, opts ...grpc.CallOption) (*GetWallInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWallInfoResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetWallInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GetThemes(ctx context.Context, in *GetThemesRequest, opts ...grpc.CallOption) (*GetThemesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThemesResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetThemes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) ApplyTheme(ctx context.Context, in *ApplyThemeRequest, opts ...grpc.CallOption) (*ApplyThemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyThemeResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_ApplyTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GetShapeTemplates(ctx context.Context, in *GetShapeTemplatesRequest, opts ...grpc.CallOption) (*GetShapeTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShapeTemplatesResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetShapeTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) CreateCustomShape(ctx context.Context, in *CreateCustomShapeRequest, opts ...grpc.CallOption) (*CreateCustomShapeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomShapeResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_CreateCustomShape_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) AnalyzeCapacity(ctx context.Context, in *AnalyzeCapacityRequest, opts ...grpc.CallOption) (*AnalyzeCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeCapacityResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_AnalyzeCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GetOptimalSize(ctx context.Context, in *GetOptimalSizeRequest, opts ...grpc.CallOption) (*GetOptimalSizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOptimalSizeResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetOptimalSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentServiceServer is the server API for EnvironmentService service.
// All implementations must embed UnimplementedEnvironmentServiceServer
// for forward compatibility.
//
// Environment generation service - exposes all environments toolkit functionality
type EnvironmentServiceServer interface {
	// Room generation
	GenerateRoom(context.Context, *GenerateRoomRequest) (*GenerateRoomResponse, error)
	GenerateRoomWithTemplate(context.Context, *GenerateRoomTemplateRequest) (*GenerateRoomTemplateResponse, error)
	// Wall system
	GenerateWalls(context.Context, *GenerateWallsRequest) (*GenerateWallsResponse, error)
	DestroyWall(context.Context, *DestroyWallRequest) (*DestroyWallResponse, error)
	GetWallInfo(context.Context, *GetWallInfoRequest) (*GetWallInfoResponse, error)
	// Environment themes and materials
	GetThemes(context.Context, *GetThemesRequest) (*GetThemesResponse, error)
	ApplyTheme(context.Context, *ApplyThemeRequest) (*ApplyThemeResponse, error)
	// Shape templates
	GetShapeTemplates(context.Context, *GetShapeTemplatesRequest) (*GetShapeTemplatesResponse, error)
	CreateCustomShape(context.Context, *CreateCustomShapeRequest) (*CreateCustomShapeResponse, error)
	// Capacity analysis
	AnalyzeCapacity(context.Context, *AnalyzeCapacityRequest) (*AnalyzeCapacityResponse, error)
	GetOptimalSize(context.Context, *GetOptimalSizeRequest) (*GetOptimalSizeResponse, error)
	mustEmbedUnimplementedEnvironmentServiceServer()
}

// UnimplementedEnvironmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvironmentServiceServer struct{}

func (UnimplementedEnvironmentServiceServer) GenerateRoom(context.Context, *GenerateRoomRequest) (*GenerateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRoom not implemented")
}
func (UnimplementedEnvironmentServiceServer) GenerateRoomWithTemplate(context.Context, *GenerateRoomTemplateRequest) (*GenerateRoomTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRoomWithTemplate not implemented")
}
func (UnimplementedEnvironmentServiceServer) GenerateWalls(context.Context, *GenerateWallsRequest) (*GenerateWallsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWalls not implemented")
}
func (UnimplementedEnvironmentServiceServer) DestroyWall(context.Context, *DestroyWallRequest) (*DestroyWallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyWall not implemented")
}
func (UnimplementedEnvironmentServiceServer) GetWallInfo(context.Context, *GetWallInfoRequest) (*GetWallInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallInfo not implemented")
}
func (UnimplementedEnvironmentServiceServer) GetThemes(context.Context, *GetThemesRequest) (*GetThemesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThemes not implemented")
}
func (UnimplementedEnvironmentServiceServer) ApplyTheme(context.Context, *ApplyThemeRequest) (*ApplyThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyTheme not implemented")
}
func (UnimplementedEnvironmentServiceServer) GetShapeTemplates(context.Context, *GetShapeTemplatesRequest) (*GetShapeTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShapeTemplates not implemented")
}
func (UnimplementedEnvironmentServiceServer) CreateCustomShape(context.Context, *CreateCustomShapeRequest) (*CreateCustomShapeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomShape not implemented")
}
func (UnimplementedEnvironmentServiceServer) AnalyzeCapacity(context.Context, *AnalyzeCapacityRequest) (*AnalyzeCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeCapacity not implemented")
}
func (UnimplementedEnvironmentServiceServer) GetOptimalSize(context.Context, *GetOptimalSizeRequest) (*GetOptimalSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptimalSize not implemented")
}
func (UnimplementedEnvironmentServiceServer) mustEmbedUnimplementedEnvironmentServiceServer() {}
func (UnimplementedEnvironmentServiceServer) testEmbeddedByValue()                            {}

// UnsafeEnvironmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentServiceServer will
// result in compilation errors.
type UnsafeEnvironmentServiceServer interface {
	mustEmbedUnimplementedEnvironmentServiceServer()
}

func RegisterEnvironmentServiceServer(s grpc.ServiceRegistrar, srv EnvironmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnvironmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnvironmentService_ServiceDesc, srv)
}

func _EnvironmentService_GenerateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GenerateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GenerateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GenerateRoom(ctx, req.(*GenerateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GenerateRoomWithTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRoomTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GenerateRoomWithTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GenerateRoomWithTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GenerateRoomWithTemplate(ctx, req.(*GenerateRoomTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GenerateWalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateWallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GenerateWalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GenerateWalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GenerateWalls(ctx, req.(*GenerateWallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_DestroyWall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyWallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).DestroyWall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_DestroyWall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).DestroyWall(ctx, req.(*DestroyWallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GetWallInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWallInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetWallInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetWallInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetWallInfo(ctx, req.(*GetWallInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GetThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThemesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetThemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetThemes(ctx, req.(*GetThemesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_ApplyTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).ApplyTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_ApplyTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).ApplyTheme(ctx, req.(*ApplyThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GetShapeTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShapeTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetShapeTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetShapeTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetShapeTemplates(ctx, req.(*GetShapeTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_CreateCustomShape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomShapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).CreateCustomShape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_CreateCustomShape_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).CreateCustomShape(ctx, req.(*CreateCustomShapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_AnalyzeCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).AnalyzeCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_AnalyzeCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).AnalyzeCapacity(ctx, req.(*AnalyzeCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GetOptimalSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOptimalSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetOptimalSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetOptimalSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetOptimalSize(ctx, req.(*GetOptimalSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentService_ServiceDesc is the grpc.ServiceDesc for EnvironmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seshat.EnvironmentService",
	HandlerType: (*EnvironmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRoom",
			Handler:    _EnvironmentService_GenerateRoom_Handler,
		},
		{
			MethodName: "GenerateRoomWithTemplate",
			Handler:    _EnvironmentService_GenerateRoomWithTemplate_Handler,
		},
		{
			MethodName: "GenerateWalls",
			Handler:    _EnvironmentService_GenerateWalls_Handler,
		},
		{
			MethodName: "DestroyWall",
			Handler:    _EnvironmentService_DestroyWall_Handler,
		},
		{
			MethodName: "GetWallInfo",
			Handler:    _EnvironmentService_GetWallInfo_Handler,
		},
		{
			MethodName: "GetThemes",
			Handler:    _EnvironmentService_GetThemes_Handler,
		},
		{
			MethodName: "ApplyTheme",
			Handler:    _EnvironmentService_ApplyTheme_Handler,
		},
		{
			MethodName: "GetShapeTemplates",
			Handler:    _EnvironmentService_GetShapeTemplates_Handler,
		},
		{
			MethodName: "CreateCustomShape",
			Handler:    _EnvironmentService_CreateCustomShape_Handler,
		},
		{
			MethodName: "AnalyzeCapacity",
			Handler:    _EnvironmentService_AnalyzeCapacity_Handler,
		},
		{
			MethodName: "GetOptimalSize",
			Handler:    _EnvironmentService_GetOptimalSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seshat/environments.proto",
}

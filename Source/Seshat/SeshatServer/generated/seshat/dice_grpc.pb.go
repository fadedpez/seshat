// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: seshat/dice.proto

package seshat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiceService_Roll_FullMethodName           = "/seshat.DiceService/Roll"
	DiceService_RollMultiple_FullMethodName   = "/seshat.DiceService/RollMultiple"
	DiceService_RollFormula_FullMethodName    = "/seshat.DiceService/RollFormula"
	DiceService_StreamRolls_FullMethodName    = "/seshat.DiceService/StreamRolls"
	DiceService_GetRollHistory_FullMethodName = "/seshat.DiceService/GetRollHistory"
	DiceService_TestFairness_FullMethodName   = "/seshat.DiceService/TestFairness"
)

// DiceServiceClient is the client API for DiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Dice rolling service - exposes all dice toolkit functionality
type DiceServiceClient interface {
	// Basic single die roll
	Roll(ctx context.Context, in *RollRequest, opts ...grpc.CallOption) (*RollResponse, error)
	// Roll multiple dice of same type
	RollMultiple(ctx context.Context, in *RollMultipleRequest, opts ...grpc.CallOption) (*RollMultipleResponse, error)
	// Roll with formula (e.g., "2d6+3", "1d20+5")
	RollFormula(ctx context.Context, in *RollFormulaRequest, opts ...grpc.CallOption) (*RollFormulaResponse, error)
	// Stream multiple rolls (for rapid rolling)
	StreamRolls(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RollRequest, RollResponse], error)
	// Get roll statistics/history
	GetRollHistory(ctx context.Context, in *RollHistoryRequest, opts ...grpc.CallOption) (*RollHistoryResponse, error)
	// Test dice roller fairness
	TestFairness(ctx context.Context, in *FairnessTestRequest, opts ...grpc.CallOption) (*FairnessTestResponse, error)
}

type diceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiceServiceClient(cc grpc.ClientConnInterface) DiceServiceClient {
	return &diceServiceClient{cc}
}

func (c *diceServiceClient) Roll(ctx context.Context, in *RollRequest, opts ...grpc.CallOption) (*RollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollResponse)
	err := c.cc.Invoke(ctx, DiceService_Roll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diceServiceClient) RollMultiple(ctx context.Context, in *RollMultipleRequest, opts ...grpc.CallOption) (*RollMultipleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollMultipleResponse)
	err := c.cc.Invoke(ctx, DiceService_RollMultiple_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diceServiceClient) RollFormula(ctx context.Context, in *RollFormulaRequest, opts ...grpc.CallOption) (*RollFormulaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollFormulaResponse)
	err := c.cc.Invoke(ctx, DiceService_RollFormula_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diceServiceClient) StreamRolls(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RollRequest, RollResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DiceService_ServiceDesc.Streams[0], DiceService_StreamRolls_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RollRequest, RollResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DiceService_StreamRollsClient = grpc.BidiStreamingClient[RollRequest, RollResponse]

func (c *diceServiceClient) GetRollHistory(ctx context.Context, in *RollHistoryRequest, opts ...grpc.CallOption) (*RollHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollHistoryResponse)
	err := c.cc.Invoke(ctx, DiceService_GetRollHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diceServiceClient) TestFairness(ctx context.Context, in *FairnessTestRequest, opts ...grpc.CallOption) (*FairnessTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FairnessTestResponse)
	err := c.cc.Invoke(ctx, DiceService_TestFairness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiceServiceServer is the server API for DiceService service.
// All implementations must embed UnimplementedDiceServiceServer
// for forward compatibility.
//
// Dice rolling service - exposes all dice toolkit functionality
type DiceServiceServer interface {
	// Basic single die roll
	Roll(context.Context, *RollRequest) (*RollResponse, error)
	// Roll multiple dice of same type
	RollMultiple(context.Context, *RollMultipleRequest) (*RollMultipleResponse, error)
	// Roll with formula (e.g., "2d6+3", "1d20+5")
	RollFormula(context.Context, *RollFormulaRequest) (*RollFormulaResponse, error)
	// Stream multiple rolls (for rapid rolling)
	StreamRolls(grpc.BidiStreamingServer[RollRequest, RollResponse]) error
	// Get roll statistics/history
	GetRollHistory(context.Context, *RollHistoryRequest) (*RollHistoryResponse, error)
	// Test dice roller fairness
	TestFairness(context.Context, *FairnessTestRequest) (*FairnessTestResponse, error)
	mustEmbedUnimplementedDiceServiceServer()
}

// UnimplementedDiceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiceServiceServer struct{}

func (UnimplementedDiceServiceServer) Roll(context.Context, *RollRequest) (*RollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Roll not implemented")
}
func (UnimplementedDiceServiceServer) RollMultiple(context.Context, *RollMultipleRequest) (*RollMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollMultiple not implemented")
}
func (UnimplementedDiceServiceServer) RollFormula(context.Context, *RollFormulaRequest) (*RollFormulaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollFormula not implemented")
}
func (UnimplementedDiceServiceServer) StreamRolls(grpc.BidiStreamingServer[RollRequest, RollResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRolls not implemented")
}
func (UnimplementedDiceServiceServer) GetRollHistory(context.Context, *RollHistoryRequest) (*RollHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollHistory not implemented")
}
func (UnimplementedDiceServiceServer) TestFairness(context.Context, *FairnessTestRequest) (*FairnessTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestFairness not implemented")
}
func (UnimplementedDiceServiceServer) mustEmbedUnimplementedDiceServiceServer() {}
func (UnimplementedDiceServiceServer) testEmbeddedByValue()                     {}

// UnsafeDiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiceServiceServer will
// result in compilation errors.
type UnsafeDiceServiceServer interface {
	mustEmbedUnimplementedDiceServiceServer()
}

func RegisterDiceServiceServer(s grpc.ServiceRegistrar, srv DiceServiceServer) {
	// If the following call pancis, it indicates UnimplementedDiceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiceService_ServiceDesc, srv)
}

func _DiceService_Roll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiceServiceServer).Roll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiceService_Roll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiceServiceServer).Roll(ctx, req.(*RollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiceService_RollMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiceServiceServer).RollMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiceService_RollMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiceServiceServer).RollMultiple(ctx, req.(*RollMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiceService_RollFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiceServiceServer).RollFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiceService_RollFormula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiceServiceServer).RollFormula(ctx, req.(*RollFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiceService_StreamRolls_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiceServiceServer).StreamRolls(&grpc.GenericServerStream[RollRequest, RollResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DiceService_StreamRollsServer = grpc.BidiStreamingServer[RollRequest, RollResponse]

func _DiceService_GetRollHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiceServiceServer).GetRollHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiceService_GetRollHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiceServiceServer).GetRollHistory(ctx, req.(*RollHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiceService_TestFairness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FairnessTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiceServiceServer).TestFairness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiceService_TestFairness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiceServiceServer).TestFairness(ctx, req.(*FairnessTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiceService_ServiceDesc is the grpc.ServiceDesc for DiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seshat.DiceService",
	HandlerType: (*DiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Roll",
			Handler:    _DiceService_Roll_Handler,
		},
		{
			MethodName: "RollMultiple",
			Handler:    _DiceService_RollMultiple_Handler,
		},
		{
			MethodName: "RollFormula",
			Handler:    _DiceService_RollFormula_Handler,
		},
		{
			MethodName: "GetRollHistory",
			Handler:    _DiceService_GetRollHistory_Handler,
		},
		{
			MethodName: "TestFairness",
			Handler:    _DiceService_TestFairness_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRolls",
			Handler:       _DiceService_StreamRolls_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "seshat/dice.proto",
}

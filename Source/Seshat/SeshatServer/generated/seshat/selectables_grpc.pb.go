// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: seshat/selectables.proto

package seshat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SelectablesService_CreateTable_FullMethodName       = "/seshat.SelectablesService/CreateTable"
	SelectablesService_AddItem_FullMethodName           = "/seshat.SelectablesService/AddItem"
	SelectablesService_RemoveItem_FullMethodName        = "/seshat.SelectablesService/RemoveItem"
	SelectablesService_UpdateWeight_FullMethodName      = "/seshat.SelectablesService/UpdateWeight"
	SelectablesService_Select_FullMethodName            = "/seshat.SelectablesService/Select"
	SelectablesService_SelectMultiple_FullMethodName    = "/seshat.SelectablesService/SelectMultiple"
	SelectablesService_SelectWithContext_FullMethodName = "/seshat.SelectablesService/SelectWithContext"
	SelectablesService_GetTable_FullMethodName          = "/seshat.SelectablesService/GetTable"
	SelectablesService_ListTables_FullMethodName        = "/seshat.SelectablesService/ListTables"
	SelectablesService_DeleteTable_FullMethodName       = "/seshat.SelectablesService/DeleteTable"
	SelectablesService_CloneTable_FullMethodName        = "/seshat.SelectablesService/CloneTable"
	SelectablesService_GetProbabilities_FullMethodName  = "/seshat.SelectablesService/GetProbabilities"
	SelectablesService_TestDistribution_FullMethodName  = "/seshat.SelectablesService/TestDistribution"
	SelectablesService_MergeTables_FullMethodName       = "/seshat.SelectablesService/MergeTables"
)

// SelectablesServiceClient is the client API for SelectablesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Weighted selection service - exposes all selectables toolkit functionality
type SelectablesServiceClient interface {
	// Basic table operations
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error)
	RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*RemoveItemResponse, error)
	UpdateWeight(ctx context.Context, in *UpdateWeightRequest, opts ...grpc.CallOption) (*UpdateWeightResponse, error)
	// Selection operations
	Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error)
	SelectMultiple(ctx context.Context, in *SelectMultipleRequest, opts ...grpc.CallOption) (*SelectMultipleResponse, error)
	SelectWithContext(ctx context.Context, in *SelectWithContextRequest, opts ...grpc.CallOption) (*SelectWithContextResponse, error)
	// Table management
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error)
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error)
	CloneTable(ctx context.Context, in *CloneTableRequest, opts ...grpc.CallOption) (*CloneTableResponse, error)
	// Advanced operations
	GetProbabilities(ctx context.Context, in *GetProbabilitiesRequest, opts ...grpc.CallOption) (*GetProbabilitiesResponse, error)
	TestDistribution(ctx context.Context, in *TestDistributionRequest, opts ...grpc.CallOption) (*TestDistributionResponse, error)
	MergeTables(ctx context.Context, in *MergeTablesRequest, opts ...grpc.CallOption) (*MergeTablesResponse, error)
}

type selectablesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSelectablesServiceClient(cc grpc.ClientConnInterface) SelectablesServiceClient {
	return &selectablesServiceClient{cc}
}

func (c *selectablesServiceClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, SelectablesService_CreateTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, SelectablesService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*RemoveItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveItemResponse)
	err := c.cc.Invoke(ctx, SelectablesService_RemoveItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) UpdateWeight(ctx context.Context, in *UpdateWeightRequest, opts ...grpc.CallOption) (*UpdateWeightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWeightResponse)
	err := c.cc.Invoke(ctx, SelectablesService_UpdateWeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectResponse)
	err := c.cc.Invoke(ctx, SelectablesService_Select_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) SelectMultiple(ctx context.Context, in *SelectMultipleRequest, opts ...grpc.CallOption) (*SelectMultipleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectMultipleResponse)
	err := c.cc.Invoke(ctx, SelectablesService_SelectMultiple_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) SelectWithContext(ctx context.Context, in *SelectWithContextRequest, opts ...grpc.CallOption) (*SelectWithContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectWithContextResponse)
	err := c.cc.Invoke(ctx, SelectablesService_SelectWithContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, SelectablesService_GetTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTablesResponse)
	err := c.cc.Invoke(ctx, SelectablesService_ListTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTableResponse)
	err := c.cc.Invoke(ctx, SelectablesService_DeleteTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) CloneTable(ctx context.Context, in *CloneTableRequest, opts ...grpc.CallOption) (*CloneTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloneTableResponse)
	err := c.cc.Invoke(ctx, SelectablesService_CloneTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) GetProbabilities(ctx context.Context, in *GetProbabilitiesRequest, opts ...grpc.CallOption) (*GetProbabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProbabilitiesResponse)
	err := c.cc.Invoke(ctx, SelectablesService_GetProbabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) TestDistribution(ctx context.Context, in *TestDistributionRequest, opts ...grpc.CallOption) (*TestDistributionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestDistributionResponse)
	err := c.cc.Invoke(ctx, SelectablesService_TestDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectablesServiceClient) MergeTables(ctx context.Context, in *MergeTablesRequest, opts ...grpc.CallOption) (*MergeTablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeTablesResponse)
	err := c.cc.Invoke(ctx, SelectablesService_MergeTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelectablesServiceServer is the server API for SelectablesService service.
// All implementations must embed UnimplementedSelectablesServiceServer
// for forward compatibility.
//
// Weighted selection service - exposes all selectables toolkit functionality
type SelectablesServiceServer interface {
	// Basic table operations
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error)
	RemoveItem(context.Context, *RemoveItemRequest) (*RemoveItemResponse, error)
	UpdateWeight(context.Context, *UpdateWeightRequest) (*UpdateWeightResponse, error)
	// Selection operations
	Select(context.Context, *SelectRequest) (*SelectResponse, error)
	SelectMultiple(context.Context, *SelectMultipleRequest) (*SelectMultipleResponse, error)
	SelectWithContext(context.Context, *SelectWithContextRequest) (*SelectWithContextResponse, error)
	// Table management
	GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error)
	ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error)
	DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error)
	CloneTable(context.Context, *CloneTableRequest) (*CloneTableResponse, error)
	// Advanced operations
	GetProbabilities(context.Context, *GetProbabilitiesRequest) (*GetProbabilitiesResponse, error)
	TestDistribution(context.Context, *TestDistributionRequest) (*TestDistributionResponse, error)
	MergeTables(context.Context, *MergeTablesRequest) (*MergeTablesResponse, error)
	mustEmbedUnimplementedSelectablesServiceServer()
}

// UnimplementedSelectablesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSelectablesServiceServer struct{}

func (UnimplementedSelectablesServiceServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedSelectablesServiceServer) AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedSelectablesServiceServer) RemoveItem(context.Context, *RemoveItemRequest) (*RemoveItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedSelectablesServiceServer) UpdateWeight(context.Context, *UpdateWeightRequest) (*UpdateWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWeight not implemented")
}
func (UnimplementedSelectablesServiceServer) Select(context.Context, *SelectRequest) (*SelectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (UnimplementedSelectablesServiceServer) SelectMultiple(context.Context, *SelectMultipleRequest) (*SelectMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectMultiple not implemented")
}
func (UnimplementedSelectablesServiceServer) SelectWithContext(context.Context, *SelectWithContextRequest) (*SelectWithContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectWithContext not implemented")
}
func (UnimplementedSelectablesServiceServer) GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedSelectablesServiceServer) ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedSelectablesServiceServer) DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedSelectablesServiceServer) CloneTable(context.Context, *CloneTableRequest) (*CloneTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneTable not implemented")
}
func (UnimplementedSelectablesServiceServer) GetProbabilities(context.Context, *GetProbabilitiesRequest) (*GetProbabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProbabilities not implemented")
}
func (UnimplementedSelectablesServiceServer) TestDistribution(context.Context, *TestDistributionRequest) (*TestDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDistribution not implemented")
}
func (UnimplementedSelectablesServiceServer) MergeTables(context.Context, *MergeTablesRequest) (*MergeTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeTables not implemented")
}
func (UnimplementedSelectablesServiceServer) mustEmbedUnimplementedSelectablesServiceServer() {}
func (UnimplementedSelectablesServiceServer) testEmbeddedByValue()                            {}

// UnsafeSelectablesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelectablesServiceServer will
// result in compilation errors.
type UnsafeSelectablesServiceServer interface {
	mustEmbedUnimplementedSelectablesServiceServer()
}

func RegisterSelectablesServiceServer(s grpc.ServiceRegistrar, srv SelectablesServiceServer) {
	// If the following call pancis, it indicates UnimplementedSelectablesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SelectablesService_ServiceDesc, srv)
}

func _SelectablesService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_CreateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_RemoveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).RemoveItem(ctx, req.(*RemoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_UpdateWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).UpdateWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_UpdateWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).UpdateWeight(ctx, req.(*UpdateWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_Select_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).Select(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_SelectMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).SelectMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_SelectMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).SelectMultiple(ctx, req.(*SelectMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_SelectWithContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectWithContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).SelectWithContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_SelectWithContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).SelectWithContext(ctx, req.(*SelectWithContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_GetTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_ListTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).ListTables(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_DeleteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_CloneTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).CloneTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_CloneTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).CloneTable(ctx, req.(*CloneTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_GetProbabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProbabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).GetProbabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_GetProbabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).GetProbabilities(ctx, req.(*GetProbabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_TestDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).TestDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_TestDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).TestDistribution(ctx, req.(*TestDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectablesService_MergeTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectablesServiceServer).MergeTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SelectablesService_MergeTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectablesServiceServer).MergeTables(ctx, req.(*MergeTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SelectablesService_ServiceDesc is the grpc.ServiceDesc for SelectablesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SelectablesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seshat.SelectablesService",
	HandlerType: (*SelectablesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _SelectablesService_CreateTable_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _SelectablesService_AddItem_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _SelectablesService_RemoveItem_Handler,
		},
		{
			MethodName: "UpdateWeight",
			Handler:    _SelectablesService_UpdateWeight_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _SelectablesService_Select_Handler,
		},
		{
			MethodName: "SelectMultiple",
			Handler:    _SelectablesService_SelectMultiple_Handler,
		},
		{
			MethodName: "SelectWithContext",
			Handler:    _SelectablesService_SelectWithContext_Handler,
		},
		{
			MethodName: "GetTable",
			Handler:    _SelectablesService_GetTable_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _SelectablesService_ListTables_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _SelectablesService_DeleteTable_Handler,
		},
		{
			MethodName: "CloneTable",
			Handler:    _SelectablesService_CloneTable_Handler,
		},
		{
			MethodName: "GetProbabilities",
			Handler:    _SelectablesService_GetProbabilities_Handler,
		},
		{
			MethodName: "TestDistribution",
			Handler:    _SelectablesService_TestDistribution_Handler,
		},
		{
			MethodName: "MergeTables",
			Handler:    _SelectablesService_MergeTables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seshat/selectables.proto",
}

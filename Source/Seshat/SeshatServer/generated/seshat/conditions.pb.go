// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: seshat/conditions.proto

package seshat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConditionSeverity int32

const (
	ConditionSeverity_CONDITION_SEVERITY_UNSPECIFIED ConditionSeverity = 0
	ConditionSeverity_CONDITION_SEVERITY_MINOR       ConditionSeverity = 1 // Light effects
	ConditionSeverity_CONDITION_SEVERITY_MODERATE    ConditionSeverity = 2 // Standard effects
	ConditionSeverity_CONDITION_SEVERITY_MAJOR       ConditionSeverity = 3 // Severe effects
	ConditionSeverity_CONDITION_SEVERITY_CRITICAL    ConditionSeverity = 4 // Life-threatening effects
)

// Enum value maps for ConditionSeverity.
var (
	ConditionSeverity_name = map[int32]string{
		0: "CONDITION_SEVERITY_UNSPECIFIED",
		1: "CONDITION_SEVERITY_MINOR",
		2: "CONDITION_SEVERITY_MODERATE",
		3: "CONDITION_SEVERITY_MAJOR",
		4: "CONDITION_SEVERITY_CRITICAL",
	}
	ConditionSeverity_value = map[string]int32{
		"CONDITION_SEVERITY_UNSPECIFIED": 0,
		"CONDITION_SEVERITY_MINOR":       1,
		"CONDITION_SEVERITY_MODERATE":    2,
		"CONDITION_SEVERITY_MAJOR":       3,
		"CONDITION_SEVERITY_CRITICAL":    4,
	}
)

func (x ConditionSeverity) Enum() *ConditionSeverity {
	p := new(ConditionSeverity)
	*p = x
	return p
}

func (x ConditionSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_conditions_proto_enumTypes[0].Descriptor()
}

func (ConditionSeverity) Type() protoreflect.EnumType {
	return &file_seshat_conditions_proto_enumTypes[0]
}

func (x ConditionSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionSeverity.Descriptor instead.
func (ConditionSeverity) EnumDescriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{0}
}

type DurationType int32

const (
	DurationType_DURATION_TYPE_UNSPECIFIED   DurationType = 0
	DurationType_DURATION_TYPE_ROUNDS        DurationType = 1 // Combat rounds
	DurationType_DURATION_TYPE_MINUTES       DurationType = 2
	DurationType_DURATION_TYPE_HOURS         DurationType = 3
	DurationType_DURATION_TYPE_DAYS          DurationType = 4
	DurationType_DURATION_TYPE_UNTIL_TRIGGER DurationType = 5 // Until specific event
	DurationType_DURATION_TYPE_CONCENTRATION DurationType = 6 // Requires concentration
	DurationType_DURATION_TYPE_PERMANENT     DurationType = 7
)

// Enum value maps for DurationType.
var (
	DurationType_name = map[int32]string{
		0: "DURATION_TYPE_UNSPECIFIED",
		1: "DURATION_TYPE_ROUNDS",
		2: "DURATION_TYPE_MINUTES",
		3: "DURATION_TYPE_HOURS",
		4: "DURATION_TYPE_DAYS",
		5: "DURATION_TYPE_UNTIL_TRIGGER",
		6: "DURATION_TYPE_CONCENTRATION",
		7: "DURATION_TYPE_PERMANENT",
	}
	DurationType_value = map[string]int32{
		"DURATION_TYPE_UNSPECIFIED":   0,
		"DURATION_TYPE_ROUNDS":        1,
		"DURATION_TYPE_MINUTES":       2,
		"DURATION_TYPE_HOURS":         3,
		"DURATION_TYPE_DAYS":          4,
		"DURATION_TYPE_UNTIL_TRIGGER": 5,
		"DURATION_TYPE_CONCENTRATION": 6,
		"DURATION_TYPE_PERMANENT":     7,
	}
)

func (x DurationType) Enum() *DurationType {
	p := new(DurationType)
	*p = x
	return p
}

func (x DurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_conditions_proto_enumTypes[1].Descriptor()
}

func (DurationType) Type() protoreflect.EnumType {
	return &file_seshat_conditions_proto_enumTypes[1]
}

func (x DurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurationType.Descriptor instead.
func (DurationType) EnumDescriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{1}
}

type StackingBehavior int32

const (
	StackingBehavior_STACKING_BEHAVIOR_UNSPECIFIED StackingBehavior = 0
	StackingBehavior_STACKING_BEHAVIOR_NONE        StackingBehavior = 1 // Cannot stack
	StackingBehavior_STACKING_BEHAVIOR_DURATION    StackingBehavior = 2 // Extends duration
	StackingBehavior_STACKING_BEHAVIOR_INTENSITY   StackingBehavior = 3 // Increases effect strength
	StackingBehavior_STACKING_BEHAVIOR_COUNT       StackingBehavior = 4 // Adds additional stacks
	StackingBehavior_STACKING_BEHAVIOR_REPLACE     StackingBehavior = 5 // New application replaces old
)

// Enum value maps for StackingBehavior.
var (
	StackingBehavior_name = map[int32]string{
		0: "STACKING_BEHAVIOR_UNSPECIFIED",
		1: "STACKING_BEHAVIOR_NONE",
		2: "STACKING_BEHAVIOR_DURATION",
		3: "STACKING_BEHAVIOR_INTENSITY",
		4: "STACKING_BEHAVIOR_COUNT",
		5: "STACKING_BEHAVIOR_REPLACE",
	}
	StackingBehavior_value = map[string]int32{
		"STACKING_BEHAVIOR_UNSPECIFIED": 0,
		"STACKING_BEHAVIOR_NONE":        1,
		"STACKING_BEHAVIOR_DURATION":    2,
		"STACKING_BEHAVIOR_INTENSITY":   3,
		"STACKING_BEHAVIOR_COUNT":       4,
		"STACKING_BEHAVIOR_REPLACE":     5,
	}
)

func (x StackingBehavior) Enum() *StackingBehavior {
	p := new(StackingBehavior)
	*p = x
	return p
}

func (x StackingBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StackingBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_conditions_proto_enumTypes[2].Descriptor()
}

func (StackingBehavior) Type() protoreflect.EnumType {
	return &file_seshat_conditions_proto_enumTypes[2]
}

func (x StackingBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StackingBehavior.Descriptor instead.
func (StackingBehavior) EnumDescriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{2}
}

type EffectOperation int32

const (
	EffectOperation_EFFECT_OPERATION_UNSPECIFIED EffectOperation = 0
	EffectOperation_EFFECT_OPERATION_ADD         EffectOperation = 1 // Add value
	EffectOperation_EFFECT_OPERATION_SUBTRACT    EffectOperation = 2 // Subtract value
	EffectOperation_EFFECT_OPERATION_MULTIPLY    EffectOperation = 3 // Multiply by value
	EffectOperation_EFFECT_OPERATION_DIVIDE      EffectOperation = 4 // Divide by value
	EffectOperation_EFFECT_OPERATION_SET         EffectOperation = 5 // Set to specific value
	EffectOperation_EFFECT_OPERATION_DISABLE     EffectOperation = 6 // Disable feature/ability
	EffectOperation_EFFECT_OPERATION_ENABLE      EffectOperation = 7 // Enable feature/ability
)

// Enum value maps for EffectOperation.
var (
	EffectOperation_name = map[int32]string{
		0: "EFFECT_OPERATION_UNSPECIFIED",
		1: "EFFECT_OPERATION_ADD",
		2: "EFFECT_OPERATION_SUBTRACT",
		3: "EFFECT_OPERATION_MULTIPLY",
		4: "EFFECT_OPERATION_DIVIDE",
		5: "EFFECT_OPERATION_SET",
		6: "EFFECT_OPERATION_DISABLE",
		7: "EFFECT_OPERATION_ENABLE",
	}
	EffectOperation_value = map[string]int32{
		"EFFECT_OPERATION_UNSPECIFIED": 0,
		"EFFECT_OPERATION_ADD":         1,
		"EFFECT_OPERATION_SUBTRACT":    2,
		"EFFECT_OPERATION_MULTIPLY":    3,
		"EFFECT_OPERATION_DIVIDE":      4,
		"EFFECT_OPERATION_SET":         5,
		"EFFECT_OPERATION_DISABLE":     6,
		"EFFECT_OPERATION_ENABLE":      7,
	}
)

func (x EffectOperation) Enum() *EffectOperation {
	p := new(EffectOperation)
	*p = x
	return p
}

func (x EffectOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EffectOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_conditions_proto_enumTypes[3].Descriptor()
}

func (EffectOperation) Type() protoreflect.EnumType {
	return &file_seshat_conditions_proto_enumTypes[3]
}

func (x EffectOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EffectOperation.Descriptor instead.
func (EffectOperation) EnumDescriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{3}
}

type RemovalReason int32

const (
	RemovalReason_REMOVAL_REASON_UNSPECIFIED RemovalReason = 0
	RemovalReason_REMOVAL_REASON_EXPIRED     RemovalReason = 1 // Duration ended
	RemovalReason_REMOVAL_REASON_DISPELLED   RemovalReason = 2 // Magically removed
	RemovalReason_REMOVAL_REASON_CURED       RemovalReason = 3 // Healed/treated
	RemovalReason_REMOVAL_REASON_OVERRIDDEN  RemovalReason = 4 // Replaced by stronger effect
	RemovalReason_REMOVAL_REASON_DEATH       RemovalReason = 5 // Entity died
	RemovalReason_REMOVAL_REASON_MANUAL      RemovalReason = 6 // Manually removed
)

// Enum value maps for RemovalReason.
var (
	RemovalReason_name = map[int32]string{
		0: "REMOVAL_REASON_UNSPECIFIED",
		1: "REMOVAL_REASON_EXPIRED",
		2: "REMOVAL_REASON_DISPELLED",
		3: "REMOVAL_REASON_CURED",
		4: "REMOVAL_REASON_OVERRIDDEN",
		5: "REMOVAL_REASON_DEATH",
		6: "REMOVAL_REASON_MANUAL",
	}
	RemovalReason_value = map[string]int32{
		"REMOVAL_REASON_UNSPECIFIED": 0,
		"REMOVAL_REASON_EXPIRED":     1,
		"REMOVAL_REASON_DISPELLED":   2,
		"REMOVAL_REASON_CURED":       3,
		"REMOVAL_REASON_OVERRIDDEN":  4,
		"REMOVAL_REASON_DEATH":       5,
		"REMOVAL_REASON_MANUAL":      6,
	}
)

func (x RemovalReason) Enum() *RemovalReason {
	p := new(RemovalReason)
	*p = x
	return p
}

func (x RemovalReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemovalReason) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_conditions_proto_enumTypes[4].Descriptor()
}

func (RemovalReason) Type() protoreflect.EnumType {
	return &file_seshat_conditions_proto_enumTypes[4]
}

func (x RemovalReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemovalReason.Descriptor instead.
func (RemovalReason) EnumDescriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{4}
}

// Core condition structure
type Condition struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type             string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // "poisoned", "stunned", "blessed", etc.
	Name             string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TargetEntityId   string                 `protobuf:"bytes,5,opt,name=target_entity_id,json=targetEntityId,proto3" json:"target_entity_id,omitempty"`
	SourceEntityId   string                 `protobuf:"bytes,6,opt,name=source_entity_id,json=sourceEntityId,proto3" json:"source_entity_id,omitempty"` // What applied this condition
	Severity         ConditionSeverity      `protobuf:"varint,7,opt,name=severity,proto3,enum=seshat.ConditionSeverity" json:"severity,omitempty"`
	Duration         *ConditionDuration     `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Effects          []*ConditionEffect     `protobuf:"bytes,9,rep,name=effects,proto3" json:"effects,omitempty"`
	Properties       map[string]string      `protobuf:"bytes,10,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AppliedTimestamp int64                  `protobuf:"varint,11,opt,name=applied_timestamp,json=appliedTimestamp,proto3" json:"applied_timestamp,omitempty"`
	ExpiresTimestamp int64                  `protobuf:"varint,12,opt,name=expires_timestamp,json=expiresTimestamp,proto3" json:"expires_timestamp,omitempty"`
	IsActive         bool                   `protobuf:"varint,13,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Stacking information
	StackCount       int32            `protobuf:"varint,14,opt,name=stack_count,json=stackCount,proto3" json:"stack_count,omitempty"`
	MaxStacks        int32            `protobuf:"varint,15,opt,name=max_stacks,json=maxStacks,proto3" json:"max_stacks,omitempty"`
	StackingBehavior StackingBehavior `protobuf:"varint,16,opt,name=stacking_behavior,json=stackingBehavior,proto3,enum=seshat.StackingBehavior" json:"stacking_behavior,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_seshat_conditions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{0}
}

func (x *Condition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Condition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Condition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Condition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Condition) GetTargetEntityId() string {
	if x != nil {
		return x.TargetEntityId
	}
	return ""
}

func (x *Condition) GetSourceEntityId() string {
	if x != nil {
		return x.SourceEntityId
	}
	return ""
}

func (x *Condition) GetSeverity() ConditionSeverity {
	if x != nil {
		return x.Severity
	}
	return ConditionSeverity_CONDITION_SEVERITY_UNSPECIFIED
}

func (x *Condition) GetDuration() *ConditionDuration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Condition) GetEffects() []*ConditionEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *Condition) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Condition) GetAppliedTimestamp() int64 {
	if x != nil {
		return x.AppliedTimestamp
	}
	return 0
}

func (x *Condition) GetExpiresTimestamp() int64 {
	if x != nil {
		return x.ExpiresTimestamp
	}
	return 0
}

func (x *Condition) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Condition) GetStackCount() int32 {
	if x != nil {
		return x.StackCount
	}
	return 0
}

func (x *Condition) GetMaxStacks() int32 {
	if x != nil {
		return x.MaxStacks
	}
	return 0
}

func (x *Condition) GetStackingBehavior() StackingBehavior {
	if x != nil {
		return x.StackingBehavior
	}
	return StackingBehavior_STACKING_BEHAVIOR_UNSPECIFIED
}

type ConditionDuration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          DurationType           `protobuf:"varint,1,opt,name=type,proto3,enum=seshat.DurationType" json:"type,omitempty"`
	Value         int32                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`    // Rounds, minutes, etc.
	Trigger       string                 `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger,omitempty"` // "end_of_turn", "short_rest", etc.
	Permanent     bool                   `protobuf:"varint,4,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConditionDuration) Reset() {
	*x = ConditionDuration{}
	mi := &file_seshat_conditions_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionDuration) ProtoMessage() {}

func (x *ConditionDuration) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionDuration.ProtoReflect.Descriptor instead.
func (*ConditionDuration) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{1}
}

func (x *ConditionDuration) GetType() DurationType {
	if x != nil {
		return x.Type
	}
	return DurationType_DURATION_TYPE_UNSPECIFIED
}

func (x *ConditionDuration) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ConditionDuration) GetTrigger() string {
	if x != nil {
		return x.Trigger
	}
	return ""
}

func (x *ConditionDuration) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type ConditionEffect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`     // "stat_modifier", "movement_restriction", etc.
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"` // What this affects
	Operation     EffectOperation        `protobuf:"varint,3,opt,name=operation,proto3,enum=seshat.EffectOperation" json:"operation,omitempty"`
	Value         int32                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Parameters    map[string]string      `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConditionEffect) Reset() {
	*x = ConditionEffect{}
	mi := &file_seshat_conditions_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionEffect) ProtoMessage() {}

func (x *ConditionEffect) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionEffect.ProtoReflect.Descriptor instead.
func (*ConditionEffect) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{2}
}

func (x *ConditionEffect) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConditionEffect) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ConditionEffect) GetOperation() EffectOperation {
	if x != nil {
		return x.Operation
	}
	return EffectOperation_EFFECT_OPERATION_UNSPECIFIED
}

func (x *ConditionEffect) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ConditionEffect) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConditionEffect) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Condition application
type ApplyConditionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TargetEntityId string                 `protobuf:"bytes,1,opt,name=target_entity_id,json=targetEntityId,proto3" json:"target_entity_id,omitempty"`
	ConditionType  string                 `protobuf:"bytes,2,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"`
	Parameters     *ConditionParameters   `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
	SourceEntityId string                 `protobuf:"bytes,4,opt,name=source_entity_id,json=sourceEntityId,proto3" json:"source_entity_id,omitempty"`
	ForceApply     bool                   `protobuf:"varint,5,opt,name=force_apply,json=forceApply,proto3" json:"force_apply,omitempty"` // Override immunities/conflicts
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ApplyConditionRequest) Reset() {
	*x = ApplyConditionRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyConditionRequest) ProtoMessage() {}

func (x *ApplyConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyConditionRequest.ProtoReflect.Descriptor instead.
func (*ApplyConditionRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{3}
}

func (x *ApplyConditionRequest) GetTargetEntityId() string {
	if x != nil {
		return x.TargetEntityId
	}
	return ""
}

func (x *ApplyConditionRequest) GetConditionType() string {
	if x != nil {
		return x.ConditionType
	}
	return ""
}

func (x *ApplyConditionRequest) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ApplyConditionRequest) GetSourceEntityId() string {
	if x != nil {
		return x.SourceEntityId
	}
	return ""
}

func (x *ApplyConditionRequest) GetForceApply() bool {
	if x != nil {
		return x.ForceApply
	}
	return false
}

type ApplyConditionResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AppliedCondition      *Condition             `protobuf:"bytes,1,opt,name=applied_condition,json=appliedCondition,proto3" json:"applied_condition,omitempty"`
	Warnings              []string               `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"` // Immunity warnings, etc.
	ConflictingConditions []*Condition           `protobuf:"bytes,3,rep,name=conflicting_conditions,json=conflictingConditions,proto3" json:"conflicting_conditions,omitempty"`
	Status                *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ApplyConditionResponse) Reset() {
	*x = ApplyConditionResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyConditionResponse) ProtoMessage() {}

func (x *ApplyConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyConditionResponse.ProtoReflect.Descriptor instead.
func (*ApplyConditionResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{4}
}

func (x *ApplyConditionResponse) GetAppliedCondition() *Condition {
	if x != nil {
		return x.AppliedCondition
	}
	return nil
}

func (x *ApplyConditionResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ApplyConditionResponse) GetConflictingConditions() []*Condition {
	if x != nil {
		return x.ConflictingConditions
	}
	return nil
}

func (x *ApplyConditionResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type ConditionParameters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Severity      ConditionSeverity      `protobuf:"varint,1,opt,name=severity,proto3,enum=seshat.ConditionSeverity" json:"severity,omitempty"`
	Duration      *ConditionDuration     `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	CustomEffects []*ConditionEffect     `protobuf:"bytes,3,rep,name=custom_effects,json=customEffects,proto3" json:"custom_effects,omitempty"`
	Properties    map[string]string      `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StackCount    int32                  `protobuf:"varint,5,opt,name=stack_count,json=stackCount,proto3" json:"stack_count,omitempty"` // How many stacks to apply
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConditionParameters) Reset() {
	*x = ConditionParameters{}
	mi := &file_seshat_conditions_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionParameters) ProtoMessage() {}

func (x *ConditionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionParameters.ProtoReflect.Descriptor instead.
func (*ConditionParameters) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{5}
}

func (x *ConditionParameters) GetSeverity() ConditionSeverity {
	if x != nil {
		return x.Severity
	}
	return ConditionSeverity_CONDITION_SEVERITY_UNSPECIFIED
}

func (x *ConditionParameters) GetDuration() *ConditionDuration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ConditionParameters) GetCustomEffects() []*ConditionEffect {
	if x != nil {
		return x.CustomEffects
	}
	return nil
}

func (x *ConditionParameters) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ConditionParameters) GetStackCount() int32 {
	if x != nil {
		return x.StackCount
	}
	return 0
}

type RemoveConditionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConditionId    string                 `protobuf:"bytes,1,opt,name=condition_id,json=conditionId,proto3" json:"condition_id,omitempty"`
	TargetEntityId string                 `protobuf:"bytes,2,opt,name=target_entity_id,json=targetEntityId,proto3" json:"target_entity_id,omitempty"` // Alternative: remove by entity + type
	ConditionType  string                 `protobuf:"bytes,3,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"`
	Reason         RemovalReason          `protobuf:"varint,4,opt,name=reason,proto3,enum=seshat.RemovalReason" json:"reason,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RemoveConditionRequest) Reset() {
	*x = RemoveConditionRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConditionRequest) ProtoMessage() {}

func (x *RemoveConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConditionRequest.ProtoReflect.Descriptor instead.
func (*RemoveConditionRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveConditionRequest) GetConditionId() string {
	if x != nil {
		return x.ConditionId
	}
	return ""
}

func (x *RemoveConditionRequest) GetTargetEntityId() string {
	if x != nil {
		return x.TargetEntityId
	}
	return ""
}

func (x *RemoveConditionRequest) GetConditionType() string {
	if x != nil {
		return x.ConditionType
	}
	return ""
}

func (x *RemoveConditionRequest) GetReason() RemovalReason {
	if x != nil {
		return x.Reason
	}
	return RemovalReason_REMOVAL_REASON_UNSPECIFIED
}

type RemoveConditionResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RemovedCondition *Condition             `protobuf:"bytes,1,opt,name=removed_condition,json=removedCondition,proto3" json:"removed_condition,omitempty"`
	Status           *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RemoveConditionResponse) Reset() {
	*x = RemoveConditionResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConditionResponse) ProtoMessage() {}

func (x *RemoveConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConditionResponse.ProtoReflect.Descriptor instead.
func (*RemoveConditionResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveConditionResponse) GetRemovedCondition() *Condition {
	if x != nil {
		return x.RemovedCondition
	}
	return nil
}

func (x *RemoveConditionResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateConditionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConditionId   string                 `protobuf:"bytes,1,opt,name=condition_id,json=conditionId,proto3" json:"condition_id,omitempty"`
	Updates       *ConditionParameters   `protobuf:"bytes,2,opt,name=updates,proto3" json:"updates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConditionRequest) Reset() {
	*x = UpdateConditionRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConditionRequest) ProtoMessage() {}

func (x *UpdateConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConditionRequest.ProtoReflect.Descriptor instead.
func (*UpdateConditionRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateConditionRequest) GetConditionId() string {
	if x != nil {
		return x.ConditionId
	}
	return ""
}

func (x *UpdateConditionRequest) GetUpdates() *ConditionParameters {
	if x != nil {
		return x.Updates
	}
	return nil
}

type UpdateConditionResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UpdatedCondition *Condition             `protobuf:"bytes,1,opt,name=updated_condition,json=updatedCondition,proto3" json:"updated_condition,omitempty"`
	Status           *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateConditionResponse) Reset() {
	*x = UpdateConditionResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConditionResponse) ProtoMessage() {}

func (x *UpdateConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConditionResponse.ProtoReflect.Descriptor instead.
func (*UpdateConditionResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateConditionResponse) GetUpdatedCondition() *Condition {
	if x != nil {
		return x.UpdatedCondition
	}
	return nil
}

func (x *UpdateConditionResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Condition queries
type GetConditionsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EntityId       string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	ActiveOnly     bool                   `protobuf:"varint,2,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	ConditionTypes []string               `protobuf:"bytes,3,rep,name=condition_types,json=conditionTypes,proto3" json:"condition_types,omitempty"` // Filter by types
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetConditionsRequest) Reset() {
	*x = GetConditionsRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionsRequest) ProtoMessage() {}

func (x *GetConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionsRequest.ProtoReflect.Descriptor instead.
func (*GetConditionsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{10}
}

func (x *GetConditionsRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *GetConditionsRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

func (x *GetConditionsRequest) GetConditionTypes() []string {
	if x != nil {
		return x.ConditionTypes
	}
	return nil
}

type GetConditionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conditions    []*Condition           `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Status        *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConditionsResponse) Reset() {
	*x = GetConditionsResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionsResponse) ProtoMessage() {}

func (x *GetConditionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionsResponse.ProtoReflect.Descriptor instead.
func (*GetConditionsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{11}
}

func (x *GetConditionsResponse) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *GetConditionsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetConditionsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type HasConditionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	ConditionType string                 `protobuf:"bytes,2,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"`
	ActiveOnly    bool                   `protobuf:"varint,3,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasConditionRequest) Reset() {
	*x = HasConditionRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasConditionRequest) ProtoMessage() {}

func (x *HasConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasConditionRequest.ProtoReflect.Descriptor instead.
func (*HasConditionRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{12}
}

func (x *HasConditionRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *HasConditionRequest) GetConditionType() string {
	if x != nil {
		return x.ConditionType
	}
	return ""
}

func (x *HasConditionRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

type HasConditionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HasCondition  bool                   `protobuf:"varint,1,opt,name=has_condition,json=hasCondition,proto3" json:"has_condition,omitempty"`
	Condition     *Condition             `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"` // The condition if it exists
	Status        *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasConditionResponse) Reset() {
	*x = HasConditionResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasConditionResponse) ProtoMessage() {}

func (x *HasConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasConditionResponse.ProtoReflect.Descriptor instead.
func (*HasConditionResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{13}
}

func (x *HasConditionResponse) GetHasCondition() bool {
	if x != nil {
		return x.HasCondition
	}
	return false
}

func (x *HasConditionResponse) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *HasConditionResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetConditionsByTypeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConditionType string                 `protobuf:"bytes,1,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"`
	ActiveOnly    bool                   `protobuf:"varint,2,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConditionsByTypeRequest) Reset() {
	*x = GetConditionsByTypeRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConditionsByTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionsByTypeRequest) ProtoMessage() {}

func (x *GetConditionsByTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionsByTypeRequest.ProtoReflect.Descriptor instead.
func (*GetConditionsByTypeRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{14}
}

func (x *GetConditionsByTypeRequest) GetConditionType() string {
	if x != nil {
		return x.ConditionType
	}
	return ""
}

func (x *GetConditionsByTypeRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

func (x *GetConditionsByTypeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetConditionsByTypeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conditions    []*Condition           `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Status        *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConditionsByTypeResponse) Reset() {
	*x = GetConditionsByTypeResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConditionsByTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionsByTypeResponse) ProtoMessage() {}

func (x *GetConditionsByTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionsByTypeResponse.ProtoReflect.Descriptor instead.
func (*GetConditionsByTypeResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{15}
}

func (x *GetConditionsByTypeResponse) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *GetConditionsByTypeResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetConditionsByTypeResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetActiveConditionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityIds     []string               `protobuf:"bytes,1,rep,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"`                // Get for multiple entities
	AsOfTimestamp int64                  `protobuf:"varint,2,opt,name=as_of_timestamp,json=asOfTimestamp,proto3" json:"as_of_timestamp,omitempty"` // Check active as of specific time
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveConditionsRequest) Reset() {
	*x = GetActiveConditionsRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveConditionsRequest) ProtoMessage() {}

func (x *GetActiveConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveConditionsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveConditionsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{16}
}

func (x *GetActiveConditionsRequest) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

func (x *GetActiveConditionsRequest) GetAsOfTimestamp() int64 {
	if x != nil {
		return x.AsOfTimestamp
	}
	return 0
}

type GetActiveConditionsResponse struct {
	state            protoimpl.MessageState       `protogen:"open.v1"`
	EntityConditions map[string]*EntityConditions `protobuf:"bytes,1,rep,name=entity_conditions,json=entityConditions,proto3" json:"entity_conditions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // entity_id -> conditions
	Status           *Result                      `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetActiveConditionsResponse) Reset() {
	*x = GetActiveConditionsResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveConditionsResponse) ProtoMessage() {}

func (x *GetActiveConditionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveConditionsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveConditionsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{17}
}

func (x *GetActiveConditionsResponse) GetEntityConditions() map[string]*EntityConditions {
	if x != nil {
		return x.EntityConditions
	}
	return nil
}

func (x *GetActiveConditionsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type EntityConditions struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EntityId        string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Conditions      []*Condition           `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	TotalConditions int32                  `protobuf:"varint,3,opt,name=total_conditions,json=totalConditions,proto3" json:"total_conditions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EntityConditions) Reset() {
	*x = EntityConditions{}
	mi := &file_seshat_conditions_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityConditions) ProtoMessage() {}

func (x *EntityConditions) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityConditions.ProtoReflect.Descriptor instead.
func (*EntityConditions) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{18}
}

func (x *EntityConditions) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EntityConditions) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EntityConditions) GetTotalConditions() int32 {
	if x != nil {
		return x.TotalConditions
	}
	return 0
}

// Condition relationships and conflicts
type CheckImmunityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	ConditionType string                 `protobuf:"bytes,2,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckImmunityRequest) Reset() {
	*x = CheckImmunityRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckImmunityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckImmunityRequest) ProtoMessage() {}

func (x *CheckImmunityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckImmunityRequest.ProtoReflect.Descriptor instead.
func (*CheckImmunityRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{19}
}

func (x *CheckImmunityRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *CheckImmunityRequest) GetConditionType() string {
	if x != nil {
		return x.ConditionType
	}
	return ""
}

type CheckImmunityResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	IsImmune        bool                   `protobuf:"varint,1,opt,name=is_immune,json=isImmune,proto3" json:"is_immune,omitempty"`
	ImmunitySources []string               `protobuf:"bytes,2,rep,name=immunity_sources,json=immunitySources,proto3" json:"immunity_sources,omitempty"` // What grants the immunity
	Status          *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CheckImmunityResponse) Reset() {
	*x = CheckImmunityResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckImmunityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckImmunityResponse) ProtoMessage() {}

func (x *CheckImmunityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckImmunityResponse.ProtoReflect.Descriptor instead.
func (*CheckImmunityResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{20}
}

func (x *CheckImmunityResponse) GetIsImmune() bool {
	if x != nil {
		return x.IsImmune
	}
	return false
}

func (x *CheckImmunityResponse) GetImmunitySources() []string {
	if x != nil {
		return x.ImmunitySources
	}
	return nil
}

func (x *CheckImmunityResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetConflictingConditionsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	EntityId         string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	NewConditionType string                 `protobuf:"bytes,2,opt,name=new_condition_type,json=newConditionType,proto3" json:"new_condition_type,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetConflictingConditionsRequest) Reset() {
	*x = GetConflictingConditionsRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConflictingConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConflictingConditionsRequest) ProtoMessage() {}

func (x *GetConflictingConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConflictingConditionsRequest.ProtoReflect.Descriptor instead.
func (*GetConflictingConditionsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{21}
}

func (x *GetConflictingConditionsRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *GetConflictingConditionsRequest) GetNewConditionType() string {
	if x != nil {
		return x.NewConditionType
	}
	return ""
}

type GetConflictingConditionsResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ConflictingConditions []*Condition           `protobuf:"bytes,1,rep,name=conflicting_conditions,json=conflictingConditions,proto3" json:"conflicting_conditions,omitempty"`
	SuggestedResolutions  []*ConflictResolution  `protobuf:"bytes,2,rep,name=suggested_resolutions,json=suggestedResolutions,proto3" json:"suggested_resolutions,omitempty"`
	Status                *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetConflictingConditionsResponse) Reset() {
	*x = GetConflictingConditionsResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConflictingConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConflictingConditionsResponse) ProtoMessage() {}

func (x *GetConflictingConditionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConflictingConditionsResponse.ProtoReflect.Descriptor instead.
func (*GetConflictingConditionsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{22}
}

func (x *GetConflictingConditionsResponse) GetConflictingConditions() []*Condition {
	if x != nil {
		return x.ConflictingConditions
	}
	return nil
}

func (x *GetConflictingConditionsResponse) GetSuggestedResolutions() []*ConflictResolution {
	if x != nil {
		return x.SuggestedResolutions
	}
	return nil
}

func (x *GetConflictingConditionsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type ConflictResolution struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ConflictType         string                 `protobuf:"bytes,1,opt,name=conflict_type,json=conflictType,proto3" json:"conflict_type,omitempty"` // "mutually_exclusive", "supersedes", etc.
	Action               string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`                                 // "remove_old", "prevent_new", "stack", etc.
	AffectedConditionIds []string               `protobuf:"bytes,3,rep,name=affected_condition_ids,json=affectedConditionIds,proto3" json:"affected_condition_ids,omitempty"`
	Reason               string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ConflictResolution) Reset() {
	*x = ConflictResolution{}
	mi := &file_seshat_conditions_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConflictResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictResolution) ProtoMessage() {}

func (x *ConflictResolution) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictResolution.ProtoReflect.Descriptor instead.
func (*ConflictResolution) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{23}
}

func (x *ConflictResolution) GetConflictType() string {
	if x != nil {
		return x.ConflictType
	}
	return ""
}

func (x *ConflictResolution) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ConflictResolution) GetAffectedConditionIds() []string {
	if x != nil {
		return x.AffectedConditionIds
	}
	return nil
}

func (x *ConflictResolution) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ResolveConflictsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Resolutions   []*ConflictResolution  `protobuf:"bytes,2,rep,name=resolutions,proto3" json:"resolutions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveConflictsRequest) Reset() {
	*x = ResolveConflictsRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveConflictsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveConflictsRequest) ProtoMessage() {}

func (x *ResolveConflictsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveConflictsRequest.ProtoReflect.Descriptor instead.
func (*ResolveConflictsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{24}
}

func (x *ResolveConflictsRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ResolveConflictsRequest) GetResolutions() []*ConflictResolution {
	if x != nil {
		return x.Resolutions
	}
	return nil
}

type ResolveConflictsResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RemovedConditions  []*Condition           `protobuf:"bytes,1,rep,name=removed_conditions,json=removedConditions,proto3" json:"removed_conditions,omitempty"`
	ModifiedConditions []*Condition           `protobuf:"bytes,2,rep,name=modified_conditions,json=modifiedConditions,proto3" json:"modified_conditions,omitempty"`
	Status             *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ResolveConflictsResponse) Reset() {
	*x = ResolveConflictsResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveConflictsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveConflictsResponse) ProtoMessage() {}

func (x *ResolveConflictsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveConflictsResponse.ProtoReflect.Descriptor instead.
func (*ResolveConflictsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{25}
}

func (x *ResolveConflictsResponse) GetRemovedConditions() []*Condition {
	if x != nil {
		return x.RemovedConditions
	}
	return nil
}

func (x *ResolveConflictsResponse) GetModifiedConditions() []*Condition {
	if x != nil {
		return x.ModifiedConditions
	}
	return nil
}

func (x *ResolveConflictsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Condition templates
type GetConditionTemplatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      string                 `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"` // "debuff", "buff", "status", etc.
	System        string                 `protobuf:"bytes,2,opt,name=system,proto3" json:"system,omitempty"`     // "dnd5e", "pathfinder", etc.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConditionTemplatesRequest) Reset() {
	*x = GetConditionTemplatesRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConditionTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionTemplatesRequest) ProtoMessage() {}

func (x *GetConditionTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionTemplatesRequest.ProtoReflect.Descriptor instead.
func (*GetConditionTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{26}
}

func (x *GetConditionTemplatesRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GetConditionTemplatesRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

type GetConditionTemplatesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Templates     []*ConditionTemplate   `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConditionTemplatesResponse) Reset() {
	*x = GetConditionTemplatesResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConditionTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionTemplatesResponse) ProtoMessage() {}

func (x *GetConditionTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionTemplatesResponse.ProtoReflect.Descriptor instead.
func (*GetConditionTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{27}
}

func (x *GetConditionTemplatesResponse) GetTemplates() []*ConditionTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *GetConditionTemplatesResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type ConditionTemplate struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Type             string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Category         string                 `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	DefaultSeverity  ConditionSeverity      `protobuf:"varint,5,opt,name=default_severity,json=defaultSeverity,proto3,enum=seshat.ConditionSeverity" json:"default_severity,omitempty"`
	DefaultDuration  *ConditionDuration     `protobuf:"bytes,6,opt,name=default_duration,json=defaultDuration,proto3" json:"default_duration,omitempty"`
	DefaultEffects   []*ConditionEffect     `protobuf:"bytes,7,rep,name=default_effects,json=defaultEffects,proto3" json:"default_effects,omitempty"`
	StackingBehavior StackingBehavior       `protobuf:"varint,8,opt,name=stacking_behavior,json=stackingBehavior,proto3,enum=seshat.StackingBehavior" json:"stacking_behavior,omitempty"`
	ConflictsWith    []string               `protobuf:"bytes,9,rep,name=conflicts_with,json=conflictsWith,proto3" json:"conflicts_with,omitempty"` // Condition types this conflicts with
	Immunities       []string               `protobuf:"bytes,10,rep,name=immunities,proto3" json:"immunities,omitempty"`                           // What grants immunity to this
	Properties       map[string]string      `protobuf:"bytes,11,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConditionTemplate) Reset() {
	*x = ConditionTemplate{}
	mi := &file_seshat_conditions_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionTemplate) ProtoMessage() {}

func (x *ConditionTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionTemplate.ProtoReflect.Descriptor instead.
func (*ConditionTemplate) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{28}
}

func (x *ConditionTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConditionTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConditionTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConditionTemplate) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ConditionTemplate) GetDefaultSeverity() ConditionSeverity {
	if x != nil {
		return x.DefaultSeverity
	}
	return ConditionSeverity_CONDITION_SEVERITY_UNSPECIFIED
}

func (x *ConditionTemplate) GetDefaultDuration() *ConditionDuration {
	if x != nil {
		return x.DefaultDuration
	}
	return nil
}

func (x *ConditionTemplate) GetDefaultEffects() []*ConditionEffect {
	if x != nil {
		return x.DefaultEffects
	}
	return nil
}

func (x *ConditionTemplate) GetStackingBehavior() StackingBehavior {
	if x != nil {
		return x.StackingBehavior
	}
	return StackingBehavior_STACKING_BEHAVIOR_UNSPECIFIED
}

func (x *ConditionTemplate) GetConflictsWith() []string {
	if x != nil {
		return x.ConflictsWith
	}
	return nil
}

func (x *ConditionTemplate) GetImmunities() []string {
	if x != nil {
		return x.Immunities
	}
	return nil
}

func (x *ConditionTemplate) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CreateConditionTemplateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Template      *ConditionTemplate     `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConditionTemplateRequest) Reset() {
	*x = CreateConditionTemplateRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConditionTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConditionTemplateRequest) ProtoMessage() {}

func (x *CreateConditionTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConditionTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateConditionTemplateRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{29}
}

func (x *CreateConditionTemplateRequest) GetTemplate() *ConditionTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

type CreateConditionTemplateResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CreatedTemplate *ConditionTemplate     `protobuf:"bytes,1,opt,name=created_template,json=createdTemplate,proto3" json:"created_template,omitempty"`
	Status          *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateConditionTemplateResponse) Reset() {
	*x = CreateConditionTemplateResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConditionTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConditionTemplateResponse) ProtoMessage() {}

func (x *CreateConditionTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConditionTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateConditionTemplateResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{30}
}

func (x *CreateConditionTemplateResponse) GetCreatedTemplate() *ConditionTemplate {
	if x != nil {
		return x.CreatedTemplate
	}
	return nil
}

func (x *CreateConditionTemplateResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Advanced operations
type ProcessConditionTickRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	EntityId         string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"` // Process conditions for specific entity
	Trigger          string                 `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger,omitempty"`                   // "start_of_turn", "end_of_turn", etc.
	CurrentTimestamp int64                  `protobuf:"varint,3,opt,name=current_timestamp,json=currentTimestamp,proto3" json:"current_timestamp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProcessConditionTickRequest) Reset() {
	*x = ProcessConditionTickRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessConditionTickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConditionTickRequest) ProtoMessage() {}

func (x *ProcessConditionTickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConditionTickRequest.ProtoReflect.Descriptor instead.
func (*ProcessConditionTickRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{31}
}

func (x *ProcessConditionTickRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ProcessConditionTickRequest) GetTrigger() string {
	if x != nil {
		return x.Trigger
	}
	return ""
}

func (x *ProcessConditionTickRequest) GetCurrentTimestamp() int64 {
	if x != nil {
		return x.CurrentTimestamp
	}
	return 0
}

type ProcessConditionTickResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ExpiredConditions   []*Condition           `protobuf:"bytes,1,rep,name=expired_conditions,json=expiredConditions,proto3" json:"expired_conditions,omitempty"`
	TriggeredConditions []*Condition           `protobuf:"bytes,2,rep,name=triggered_conditions,json=triggeredConditions,proto3" json:"triggered_conditions,omitempty"`
	AppliedEffects      []*ConditionEffect     `protobuf:"bytes,3,rep,name=applied_effects,json=appliedEffects,proto3" json:"applied_effects,omitempty"`
	Status              *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProcessConditionTickResponse) Reset() {
	*x = ProcessConditionTickResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessConditionTickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConditionTickResponse) ProtoMessage() {}

func (x *ProcessConditionTickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConditionTickResponse.ProtoReflect.Descriptor instead.
func (*ProcessConditionTickResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{32}
}

func (x *ProcessConditionTickResponse) GetExpiredConditions() []*Condition {
	if x != nil {
		return x.ExpiredConditions
	}
	return nil
}

func (x *ProcessConditionTickResponse) GetTriggeredConditions() []*Condition {
	if x != nil {
		return x.TriggeredConditions
	}
	return nil
}

func (x *ProcessConditionTickResponse) GetAppliedEffects() []*ConditionEffect {
	if x != nil {
		return x.AppliedEffects
	}
	return nil
}

func (x *ProcessConditionTickResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetConditionHistoryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EntityId       string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Limit          int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	SinceTimestamp int64                  `protobuf:"varint,3,opt,name=since_timestamp,json=sinceTimestamp,proto3" json:"since_timestamp,omitempty"`
	ConditionTypes []string               `protobuf:"bytes,4,rep,name=condition_types,json=conditionTypes,proto3" json:"condition_types,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetConditionHistoryRequest) Reset() {
	*x = GetConditionHistoryRequest{}
	mi := &file_seshat_conditions_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConditionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionHistoryRequest) ProtoMessage() {}

func (x *GetConditionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetConditionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{33}
}

func (x *GetConditionHistoryRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *GetConditionHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetConditionHistoryRequest) GetSinceTimestamp() int64 {
	if x != nil {
		return x.SinceTimestamp
	}
	return 0
}

func (x *GetConditionHistoryRequest) GetConditionTypes() []string {
	if x != nil {
		return x.ConditionTypes
	}
	return nil
}

type GetConditionHistoryResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	History       []*ConditionHistoryEntry `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
	TotalCount    int32                    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Status        *Result                  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConditionHistoryResponse) Reset() {
	*x = GetConditionHistoryResponse{}
	mi := &file_seshat_conditions_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConditionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionHistoryResponse) ProtoMessage() {}

func (x *GetConditionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetConditionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{34}
}

func (x *GetConditionHistoryResponse) GetHistory() []*ConditionHistoryEntry {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *GetConditionHistoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetConditionHistoryResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type ConditionHistoryEntry struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Condition      *Condition             `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Action         string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"` // "applied", "removed", "modified"
	Timestamp      int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Reason         string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	SourceEntityId string                 `protobuf:"bytes,5,opt,name=source_entity_id,json=sourceEntityId,proto3" json:"source_entity_id,omitempty"`
	Details        map[string]string      `protobuf:"bytes,6,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConditionHistoryEntry) Reset() {
	*x = ConditionHistoryEntry{}
	mi := &file_seshat_conditions_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionHistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionHistoryEntry) ProtoMessage() {}

func (x *ConditionHistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_conditions_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionHistoryEntry.ProtoReflect.Descriptor instead.
func (*ConditionHistoryEntry) Descriptor() ([]byte, []int) {
	return file_seshat_conditions_proto_rawDescGZIP(), []int{35}
}

func (x *ConditionHistoryEntry) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ConditionHistoryEntry) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ConditionHistoryEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ConditionHistoryEntry) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ConditionHistoryEntry) GetSourceEntityId() string {
	if x != nil {
		return x.SourceEntityId
	}
	return ""
}

func (x *ConditionHistoryEntry) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_seshat_conditions_proto protoreflect.FileDescriptor

const file_seshat_conditions_proto_rawDesc = "" +
	"\n" +
	"\x17seshat/conditions.proto\x12\x06seshat\x1a\x13seshat/common.proto\"\xda\x05\n" +
	"\tCondition\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12(\n" +
	"\x10target_entity_id\x18\x05 \x01(\tR\x0etargetEntityId\x12(\n" +
	"\x10source_entity_id\x18\x06 \x01(\tR\x0esourceEntityId\x125\n" +
	"\bseverity\x18\a \x01(\x0e2\x19.seshat.ConditionSeverityR\bseverity\x125\n" +
	"\bduration\x18\b \x01(\v2\x19.seshat.ConditionDurationR\bduration\x121\n" +
	"\aeffects\x18\t \x03(\v2\x17.seshat.ConditionEffectR\aeffects\x12A\n" +
	"\n" +
	"properties\x18\n" +
	" \x03(\v2!.seshat.Condition.PropertiesEntryR\n" +
	"properties\x12+\n" +
	"\x11applied_timestamp\x18\v \x01(\x03R\x10appliedTimestamp\x12+\n" +
	"\x11expires_timestamp\x18\f \x01(\x03R\x10expiresTimestamp\x12\x1b\n" +
	"\tis_active\x18\r \x01(\bR\bisActive\x12\x1f\n" +
	"\vstack_count\x18\x0e \x01(\x05R\n" +
	"stackCount\x12\x1d\n" +
	"\n" +
	"max_stacks\x18\x0f \x01(\x05R\tmaxStacks\x12E\n" +
	"\x11stacking_behavior\x18\x10 \x01(\x0e2\x18.seshat.StackingBehaviorR\x10stackingBehavior\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8b\x01\n" +
	"\x11ConditionDuration\x12(\n" +
	"\x04type\x18\x01 \x01(\x0e2\x14.seshat.DurationTypeR\x04type\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value\x12\x18\n" +
	"\atrigger\x18\x03 \x01(\tR\atrigger\x12\x1c\n" +
	"\tpermanent\x18\x04 \x01(\bR\tpermanent\"\xb4\x02\n" +
	"\x0fConditionEffect\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x16\n" +
	"\x06target\x18\x02 \x01(\tR\x06target\x125\n" +
	"\toperation\x18\x03 \x01(\x0e2\x17.seshat.EffectOperationR\toperation\x12\x14\n" +
	"\x05value\x18\x04 \x01(\x05R\x05value\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12G\n" +
	"\n" +
	"parameters\x18\x06 \x03(\v2'.seshat.ConditionEffect.ParametersEntryR\n" +
	"parameters\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf0\x01\n" +
	"\x15ApplyConditionRequest\x12(\n" +
	"\x10target_entity_id\x18\x01 \x01(\tR\x0etargetEntityId\x12%\n" +
	"\x0econdition_type\x18\x02 \x01(\tR\rconditionType\x12;\n" +
	"\n" +
	"parameters\x18\x03 \x01(\v2\x1b.seshat.ConditionParametersR\n" +
	"parameters\x12(\n" +
	"\x10source_entity_id\x18\x04 \x01(\tR\x0esourceEntityId\x12\x1f\n" +
	"\vforce_apply\x18\x05 \x01(\bR\n" +
	"forceApply\"\xe6\x01\n" +
	"\x16ApplyConditionResponse\x12>\n" +
	"\x11applied_condition\x18\x01 \x01(\v2\x11.seshat.ConditionR\x10appliedCondition\x12\x1a\n" +
	"\bwarnings\x18\x02 \x03(\tR\bwarnings\x12H\n" +
	"\x16conflicting_conditions\x18\x03 \x03(\v2\x11.seshat.ConditionR\x15conflictingConditions\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"\xf0\x02\n" +
	"\x13ConditionParameters\x125\n" +
	"\bseverity\x18\x01 \x01(\x0e2\x19.seshat.ConditionSeverityR\bseverity\x125\n" +
	"\bduration\x18\x02 \x01(\v2\x19.seshat.ConditionDurationR\bduration\x12>\n" +
	"\x0ecustom_effects\x18\x03 \x03(\v2\x17.seshat.ConditionEffectR\rcustomEffects\x12K\n" +
	"\n" +
	"properties\x18\x04 \x03(\v2+.seshat.ConditionParameters.PropertiesEntryR\n" +
	"properties\x12\x1f\n" +
	"\vstack_count\x18\x05 \x01(\x05R\n" +
	"stackCount\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xbb\x01\n" +
	"\x16RemoveConditionRequest\x12!\n" +
	"\fcondition_id\x18\x01 \x01(\tR\vconditionId\x12(\n" +
	"\x10target_entity_id\x18\x02 \x01(\tR\x0etargetEntityId\x12%\n" +
	"\x0econdition_type\x18\x03 \x01(\tR\rconditionType\x12-\n" +
	"\x06reason\x18\x04 \x01(\x0e2\x15.seshat.RemovalReasonR\x06reason\"\x81\x01\n" +
	"\x17RemoveConditionResponse\x12>\n" +
	"\x11removed_condition\x18\x01 \x01(\v2\x11.seshat.ConditionR\x10removedCondition\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"r\n" +
	"\x16UpdateConditionRequest\x12!\n" +
	"\fcondition_id\x18\x01 \x01(\tR\vconditionId\x125\n" +
	"\aupdates\x18\x02 \x01(\v2\x1b.seshat.ConditionParametersR\aupdates\"\x81\x01\n" +
	"\x17UpdateConditionResponse\x12>\n" +
	"\x11updated_condition\x18\x01 \x01(\v2\x11.seshat.ConditionR\x10updatedCondition\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"}\n" +
	"\x14GetConditionsRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x1f\n" +
	"\vactive_only\x18\x02 \x01(\bR\n" +
	"activeOnly\x12'\n" +
	"\x0fcondition_types\x18\x03 \x03(\tR\x0econditionTypes\"\x93\x01\n" +
	"\x15GetConditionsResponse\x121\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2\x11.seshat.ConditionR\n" +
	"conditions\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"z\n" +
	"\x13HasConditionRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12%\n" +
	"\x0econdition_type\x18\x02 \x01(\tR\rconditionType\x12\x1f\n" +
	"\vactive_only\x18\x03 \x01(\bR\n" +
	"activeOnly\"\x94\x01\n" +
	"\x14HasConditionResponse\x12#\n" +
	"\rhas_condition\x18\x01 \x01(\bR\fhasCondition\x12/\n" +
	"\tcondition\x18\x02 \x01(\v2\x11.seshat.ConditionR\tcondition\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"z\n" +
	"\x1aGetConditionsByTypeRequest\x12%\n" +
	"\x0econdition_type\x18\x01 \x01(\tR\rconditionType\x12\x1f\n" +
	"\vactive_only\x18\x02 \x01(\bR\n" +
	"activeOnly\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\"\x99\x01\n" +
	"\x1bGetConditionsByTypeResponse\x121\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2\x11.seshat.ConditionR\n" +
	"conditions\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"c\n" +
	"\x1aGetActiveConditionsRequest\x12\x1d\n" +
	"\n" +
	"entity_ids\x18\x01 \x03(\tR\tentityIds\x12&\n" +
	"\x0fas_of_timestamp\x18\x02 \x01(\x03R\rasOfTimestamp\"\x8c\x02\n" +
	"\x1bGetActiveConditionsResponse\x12f\n" +
	"\x11entity_conditions\x18\x01 \x03(\v29.seshat.GetActiveConditionsResponse.EntityConditionsEntryR\x10entityConditions\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\x1a]\n" +
	"\x15EntityConditionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.seshat.EntityConditionsR\x05value:\x028\x01\"\x8d\x01\n" +
	"\x10EntityConditions\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x121\n" +
	"\n" +
	"conditions\x18\x02 \x03(\v2\x11.seshat.ConditionR\n" +
	"conditions\x12)\n" +
	"\x10total_conditions\x18\x03 \x01(\x05R\x0ftotalConditions\"Z\n" +
	"\x14CheckImmunityRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12%\n" +
	"\x0econdition_type\x18\x02 \x01(\tR\rconditionType\"\x87\x01\n" +
	"\x15CheckImmunityResponse\x12\x1b\n" +
	"\tis_immune\x18\x01 \x01(\bR\bisImmune\x12)\n" +
	"\x10immunity_sources\x18\x02 \x03(\tR\x0fimmunitySources\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"l\n" +
	"\x1fGetConflictingConditionsRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12,\n" +
	"\x12new_condition_type\x18\x02 \x01(\tR\x10newConditionType\"\xe5\x01\n" +
	" GetConflictingConditionsResponse\x12H\n" +
	"\x16conflicting_conditions\x18\x01 \x03(\v2\x11.seshat.ConditionR\x15conflictingConditions\x12O\n" +
	"\x15suggested_resolutions\x18\x02 \x03(\v2\x1a.seshat.ConflictResolutionR\x14suggestedResolutions\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"\x9f\x01\n" +
	"\x12ConflictResolution\x12#\n" +
	"\rconflict_type\x18\x01 \x01(\tR\fconflictType\x12\x16\n" +
	"\x06action\x18\x02 \x01(\tR\x06action\x124\n" +
	"\x16affected_condition_ids\x18\x03 \x03(\tR\x14affectedConditionIds\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\"t\n" +
	"\x17ResolveConflictsRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12<\n" +
	"\vresolutions\x18\x02 \x03(\v2\x1a.seshat.ConflictResolutionR\vresolutions\"\xc8\x01\n" +
	"\x18ResolveConflictsResponse\x12@\n" +
	"\x12removed_conditions\x18\x01 \x03(\v2\x11.seshat.ConditionR\x11removedConditions\x12B\n" +
	"\x13modified_conditions\x18\x02 \x03(\v2\x11.seshat.ConditionR\x12modifiedConditions\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"R\n" +
	"\x1cGetConditionTemplatesRequest\x12\x1a\n" +
	"\bcategory\x18\x01 \x01(\tR\bcategory\x12\x16\n" +
	"\x06system\x18\x02 \x01(\tR\x06system\"\x80\x01\n" +
	"\x1dGetConditionTemplatesResponse\x127\n" +
	"\ttemplates\x18\x01 \x03(\v2\x19.seshat.ConditionTemplateR\ttemplates\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\xdf\x04\n" +
	"\x11ConditionTemplate\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\bcategory\x18\x04 \x01(\tR\bcategory\x12D\n" +
	"\x10default_severity\x18\x05 \x01(\x0e2\x19.seshat.ConditionSeverityR\x0fdefaultSeverity\x12D\n" +
	"\x10default_duration\x18\x06 \x01(\v2\x19.seshat.ConditionDurationR\x0fdefaultDuration\x12@\n" +
	"\x0fdefault_effects\x18\a \x03(\v2\x17.seshat.ConditionEffectR\x0edefaultEffects\x12E\n" +
	"\x11stacking_behavior\x18\b \x01(\x0e2\x18.seshat.StackingBehaviorR\x10stackingBehavior\x12%\n" +
	"\x0econflicts_with\x18\t \x03(\tR\rconflictsWith\x12\x1e\n" +
	"\n" +
	"immunities\x18\n" +
	" \x03(\tR\n" +
	"immunities\x12I\n" +
	"\n" +
	"properties\x18\v \x03(\v2).seshat.ConditionTemplate.PropertiesEntryR\n" +
	"properties\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"W\n" +
	"\x1eCreateConditionTemplateRequest\x125\n" +
	"\btemplate\x18\x01 \x01(\v2\x19.seshat.ConditionTemplateR\btemplate\"\x8f\x01\n" +
	"\x1fCreateConditionTemplateResponse\x12D\n" +
	"\x10created_template\x18\x01 \x01(\v2\x19.seshat.ConditionTemplateR\x0fcreatedTemplate\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\x81\x01\n" +
	"\x1bProcessConditionTickRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x18\n" +
	"\atrigger\x18\x02 \x01(\tR\atrigger\x12+\n" +
	"\x11current_timestamp\x18\x03 \x01(\x03R\x10currentTimestamp\"\x90\x02\n" +
	"\x1cProcessConditionTickResponse\x12@\n" +
	"\x12expired_conditions\x18\x01 \x03(\v2\x11.seshat.ConditionR\x11expiredConditions\x12D\n" +
	"\x14triggered_conditions\x18\x02 \x03(\v2\x11.seshat.ConditionR\x13triggeredConditions\x12@\n" +
	"\x0fapplied_effects\x18\x03 \x03(\v2\x17.seshat.ConditionEffectR\x0eappliedEffects\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"\xa1\x01\n" +
	"\x1aGetConditionHistoryRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x12'\n" +
	"\x0fsince_timestamp\x18\x03 \x01(\x03R\x0esinceTimestamp\x12'\n" +
	"\x0fcondition_types\x18\x04 \x03(\tR\x0econditionTypes\"\x9f\x01\n" +
	"\x1bGetConditionHistoryResponse\x127\n" +
	"\ahistory\x18\x01 \x03(\v2\x1d.seshat.ConditionHistoryEntryR\ahistory\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"\xc2\x02\n" +
	"\x15ConditionHistoryEntry\x12/\n" +
	"\tcondition\x18\x01 \x01(\v2\x11.seshat.ConditionR\tcondition\x12\x16\n" +
	"\x06action\x18\x02 \x01(\tR\x06action\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\x12(\n" +
	"\x10source_entity_id\x18\x05 \x01(\tR\x0esourceEntityId\x12D\n" +
	"\adetails\x18\x06 \x03(\v2*.seshat.ConditionHistoryEntry.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*\xb5\x01\n" +
	"\x11ConditionSeverity\x12\"\n" +
	"\x1eCONDITION_SEVERITY_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18CONDITION_SEVERITY_MINOR\x10\x01\x12\x1f\n" +
	"\x1bCONDITION_SEVERITY_MODERATE\x10\x02\x12\x1c\n" +
	"\x18CONDITION_SEVERITY_MAJOR\x10\x03\x12\x1f\n" +
	"\x1bCONDITION_SEVERITY_CRITICAL\x10\x04*\xf2\x01\n" +
	"\fDurationType\x12\x1d\n" +
	"\x19DURATION_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14DURATION_TYPE_ROUNDS\x10\x01\x12\x19\n" +
	"\x15DURATION_TYPE_MINUTES\x10\x02\x12\x17\n" +
	"\x13DURATION_TYPE_HOURS\x10\x03\x12\x16\n" +
	"\x12DURATION_TYPE_DAYS\x10\x04\x12\x1f\n" +
	"\x1bDURATION_TYPE_UNTIL_TRIGGER\x10\x05\x12\x1f\n" +
	"\x1bDURATION_TYPE_CONCENTRATION\x10\x06\x12\x1b\n" +
	"\x17DURATION_TYPE_PERMANENT\x10\a*\xce\x01\n" +
	"\x10StackingBehavior\x12!\n" +
	"\x1dSTACKING_BEHAVIOR_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16STACKING_BEHAVIOR_NONE\x10\x01\x12\x1e\n" +
	"\x1aSTACKING_BEHAVIOR_DURATION\x10\x02\x12\x1f\n" +
	"\x1bSTACKING_BEHAVIOR_INTENSITY\x10\x03\x12\x1b\n" +
	"\x17STACKING_BEHAVIOR_COUNT\x10\x04\x12\x1d\n" +
	"\x19STACKING_BEHAVIOR_REPLACE\x10\x05*\xfd\x01\n" +
	"\x0fEffectOperation\x12 \n" +
	"\x1cEFFECT_OPERATION_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14EFFECT_OPERATION_ADD\x10\x01\x12\x1d\n" +
	"\x19EFFECT_OPERATION_SUBTRACT\x10\x02\x12\x1d\n" +
	"\x19EFFECT_OPERATION_MULTIPLY\x10\x03\x12\x1b\n" +
	"\x17EFFECT_OPERATION_DIVIDE\x10\x04\x12\x18\n" +
	"\x14EFFECT_OPERATION_SET\x10\x05\x12\x1c\n" +
	"\x18EFFECT_OPERATION_DISABLE\x10\x06\x12\x1b\n" +
	"\x17EFFECT_OPERATION_ENABLE\x10\a*\xd7\x01\n" +
	"\rRemovalReason\x12\x1e\n" +
	"\x1aREMOVAL_REASON_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16REMOVAL_REASON_EXPIRED\x10\x01\x12\x1c\n" +
	"\x18REMOVAL_REASON_DISPELLED\x10\x02\x12\x18\n" +
	"\x14REMOVAL_REASON_CURED\x10\x03\x12\x1d\n" +
	"\x19REMOVAL_REASON_OVERRIDDEN\x10\x04\x12\x18\n" +
	"\x14REMOVAL_REASON_DEATH\x10\x05\x12\x19\n" +
	"\x15REMOVAL_REASON_MANUAL\x10\x062\x8e\n" +
	"\n" +
	"\x11ConditionsService\x12O\n" +
	"\x0eApplyCondition\x12\x1d.seshat.ApplyConditionRequest\x1a\x1e.seshat.ApplyConditionResponse\x12R\n" +
	"\x0fRemoveCondition\x12\x1e.seshat.RemoveConditionRequest\x1a\x1f.seshat.RemoveConditionResponse\x12L\n" +
	"\rGetConditions\x12\x1c.seshat.GetConditionsRequest\x1a\x1d.seshat.GetConditionsResponse\x12R\n" +
	"\x0fUpdateCondition\x12\x1e.seshat.UpdateConditionRequest\x1a\x1f.seshat.UpdateConditionResponse\x12I\n" +
	"\fHasCondition\x12\x1b.seshat.HasConditionRequest\x1a\x1c.seshat.HasConditionResponse\x12^\n" +
	"\x13GetConditionsByType\x12\".seshat.GetConditionsByTypeRequest\x1a#.seshat.GetConditionsByTypeResponse\x12^\n" +
	"\x13GetActiveConditions\x12\".seshat.GetActiveConditionsRequest\x1a#.seshat.GetActiveConditionsResponse\x12L\n" +
	"\rCheckImmunity\x12\x1c.seshat.CheckImmunityRequest\x1a\x1d.seshat.CheckImmunityResponse\x12m\n" +
	"\x18GetConflictingConditions\x12'.seshat.GetConflictingConditionsRequest\x1a(.seshat.GetConflictingConditionsResponse\x12U\n" +
	"\x10ResolveConflicts\x12\x1f.seshat.ResolveConflictsRequest\x1a .seshat.ResolveConflictsResponse\x12d\n" +
	"\x15GetConditionTemplates\x12$.seshat.GetConditionTemplatesRequest\x1a%.seshat.GetConditionTemplatesResponse\x12j\n" +
	"\x17CreateConditionTemplate\x12&.seshat.CreateConditionTemplateRequest\x1a'.seshat.CreateConditionTemplateResponse\x12a\n" +
	"\x14ProcessConditionTick\x12#.seshat.ProcessConditionTickRequest\x1a$.seshat.ProcessConditionTickResponse\x12^\n" +
	"\x13GetConditionHistory\x12\".seshat.GetConditionHistoryRequest\x1a#.seshat.GetConditionHistoryResponseB!Z\x1fgithub.com/seshat/protos/seshatb\x06proto3"

var (
	file_seshat_conditions_proto_rawDescOnce sync.Once
	file_seshat_conditions_proto_rawDescData []byte
)

func file_seshat_conditions_proto_rawDescGZIP() []byte {
	file_seshat_conditions_proto_rawDescOnce.Do(func() {
		file_seshat_conditions_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_seshat_conditions_proto_rawDesc), len(file_seshat_conditions_proto_rawDesc)))
	})
	return file_seshat_conditions_proto_rawDescData
}

var file_seshat_conditions_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_seshat_conditions_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_seshat_conditions_proto_goTypes = []any{
	(ConditionSeverity)(0),                   // 0: seshat.ConditionSeverity
	(DurationType)(0),                        // 1: seshat.DurationType
	(StackingBehavior)(0),                    // 2: seshat.StackingBehavior
	(EffectOperation)(0),                     // 3: seshat.EffectOperation
	(RemovalReason)(0),                       // 4: seshat.RemovalReason
	(*Condition)(nil),                        // 5: seshat.Condition
	(*ConditionDuration)(nil),                // 6: seshat.ConditionDuration
	(*ConditionEffect)(nil),                  // 7: seshat.ConditionEffect
	(*ApplyConditionRequest)(nil),            // 8: seshat.ApplyConditionRequest
	(*ApplyConditionResponse)(nil),           // 9: seshat.ApplyConditionResponse
	(*ConditionParameters)(nil),              // 10: seshat.ConditionParameters
	(*RemoveConditionRequest)(nil),           // 11: seshat.RemoveConditionRequest
	(*RemoveConditionResponse)(nil),          // 12: seshat.RemoveConditionResponse
	(*UpdateConditionRequest)(nil),           // 13: seshat.UpdateConditionRequest
	(*UpdateConditionResponse)(nil),          // 14: seshat.UpdateConditionResponse
	(*GetConditionsRequest)(nil),             // 15: seshat.GetConditionsRequest
	(*GetConditionsResponse)(nil),            // 16: seshat.GetConditionsResponse
	(*HasConditionRequest)(nil),              // 17: seshat.HasConditionRequest
	(*HasConditionResponse)(nil),             // 18: seshat.HasConditionResponse
	(*GetConditionsByTypeRequest)(nil),       // 19: seshat.GetConditionsByTypeRequest
	(*GetConditionsByTypeResponse)(nil),      // 20: seshat.GetConditionsByTypeResponse
	(*GetActiveConditionsRequest)(nil),       // 21: seshat.GetActiveConditionsRequest
	(*GetActiveConditionsResponse)(nil),      // 22: seshat.GetActiveConditionsResponse
	(*EntityConditions)(nil),                 // 23: seshat.EntityConditions
	(*CheckImmunityRequest)(nil),             // 24: seshat.CheckImmunityRequest
	(*CheckImmunityResponse)(nil),            // 25: seshat.CheckImmunityResponse
	(*GetConflictingConditionsRequest)(nil),  // 26: seshat.GetConflictingConditionsRequest
	(*GetConflictingConditionsResponse)(nil), // 27: seshat.GetConflictingConditionsResponse
	(*ConflictResolution)(nil),               // 28: seshat.ConflictResolution
	(*ResolveConflictsRequest)(nil),          // 29: seshat.ResolveConflictsRequest
	(*ResolveConflictsResponse)(nil),         // 30: seshat.ResolveConflictsResponse
	(*GetConditionTemplatesRequest)(nil),     // 31: seshat.GetConditionTemplatesRequest
	(*GetConditionTemplatesResponse)(nil),    // 32: seshat.GetConditionTemplatesResponse
	(*ConditionTemplate)(nil),                // 33: seshat.ConditionTemplate
	(*CreateConditionTemplateRequest)(nil),   // 34: seshat.CreateConditionTemplateRequest
	(*CreateConditionTemplateResponse)(nil),  // 35: seshat.CreateConditionTemplateResponse
	(*ProcessConditionTickRequest)(nil),      // 36: seshat.ProcessConditionTickRequest
	(*ProcessConditionTickResponse)(nil),     // 37: seshat.ProcessConditionTickResponse
	(*GetConditionHistoryRequest)(nil),       // 38: seshat.GetConditionHistoryRequest
	(*GetConditionHistoryResponse)(nil),      // 39: seshat.GetConditionHistoryResponse
	(*ConditionHistoryEntry)(nil),            // 40: seshat.ConditionHistoryEntry
	nil,                                      // 41: seshat.Condition.PropertiesEntry
	nil,                                      // 42: seshat.ConditionEffect.ParametersEntry
	nil,                                      // 43: seshat.ConditionParameters.PropertiesEntry
	nil,                                      // 44: seshat.GetActiveConditionsResponse.EntityConditionsEntry
	nil,                                      // 45: seshat.ConditionTemplate.PropertiesEntry
	nil,                                      // 46: seshat.ConditionHistoryEntry.DetailsEntry
	(*Result)(nil),                           // 47: seshat.Result
}
var file_seshat_conditions_proto_depIdxs = []int32{
	0,  // 0: seshat.Condition.severity:type_name -> seshat.ConditionSeverity
	6,  // 1: seshat.Condition.duration:type_name -> seshat.ConditionDuration
	7,  // 2: seshat.Condition.effects:type_name -> seshat.ConditionEffect
	41, // 3: seshat.Condition.properties:type_name -> seshat.Condition.PropertiesEntry
	2,  // 4: seshat.Condition.stacking_behavior:type_name -> seshat.StackingBehavior
	1,  // 5: seshat.ConditionDuration.type:type_name -> seshat.DurationType
	3,  // 6: seshat.ConditionEffect.operation:type_name -> seshat.EffectOperation
	42, // 7: seshat.ConditionEffect.parameters:type_name -> seshat.ConditionEffect.ParametersEntry
	10, // 8: seshat.ApplyConditionRequest.parameters:type_name -> seshat.ConditionParameters
	5,  // 9: seshat.ApplyConditionResponse.applied_condition:type_name -> seshat.Condition
	5,  // 10: seshat.ApplyConditionResponse.conflicting_conditions:type_name -> seshat.Condition
	47, // 11: seshat.ApplyConditionResponse.status:type_name -> seshat.Result
	0,  // 12: seshat.ConditionParameters.severity:type_name -> seshat.ConditionSeverity
	6,  // 13: seshat.ConditionParameters.duration:type_name -> seshat.ConditionDuration
	7,  // 14: seshat.ConditionParameters.custom_effects:type_name -> seshat.ConditionEffect
	43, // 15: seshat.ConditionParameters.properties:type_name -> seshat.ConditionParameters.PropertiesEntry
	4,  // 16: seshat.RemoveConditionRequest.reason:type_name -> seshat.RemovalReason
	5,  // 17: seshat.RemoveConditionResponse.removed_condition:type_name -> seshat.Condition
	47, // 18: seshat.RemoveConditionResponse.status:type_name -> seshat.Result
	10, // 19: seshat.UpdateConditionRequest.updates:type_name -> seshat.ConditionParameters
	5,  // 20: seshat.UpdateConditionResponse.updated_condition:type_name -> seshat.Condition
	47, // 21: seshat.UpdateConditionResponse.status:type_name -> seshat.Result
	5,  // 22: seshat.GetConditionsResponse.conditions:type_name -> seshat.Condition
	47, // 23: seshat.GetConditionsResponse.status:type_name -> seshat.Result
	5,  // 24: seshat.HasConditionResponse.condition:type_name -> seshat.Condition
	47, // 25: seshat.HasConditionResponse.status:type_name -> seshat.Result
	5,  // 26: seshat.GetConditionsByTypeResponse.conditions:type_name -> seshat.Condition
	47, // 27: seshat.GetConditionsByTypeResponse.status:type_name -> seshat.Result
	44, // 28: seshat.GetActiveConditionsResponse.entity_conditions:type_name -> seshat.GetActiveConditionsResponse.EntityConditionsEntry
	47, // 29: seshat.GetActiveConditionsResponse.status:type_name -> seshat.Result
	5,  // 30: seshat.EntityConditions.conditions:type_name -> seshat.Condition
	47, // 31: seshat.CheckImmunityResponse.status:type_name -> seshat.Result
	5,  // 32: seshat.GetConflictingConditionsResponse.conflicting_conditions:type_name -> seshat.Condition
	28, // 33: seshat.GetConflictingConditionsResponse.suggested_resolutions:type_name -> seshat.ConflictResolution
	47, // 34: seshat.GetConflictingConditionsResponse.status:type_name -> seshat.Result
	28, // 35: seshat.ResolveConflictsRequest.resolutions:type_name -> seshat.ConflictResolution
	5,  // 36: seshat.ResolveConflictsResponse.removed_conditions:type_name -> seshat.Condition
	5,  // 37: seshat.ResolveConflictsResponse.modified_conditions:type_name -> seshat.Condition
	47, // 38: seshat.ResolveConflictsResponse.status:type_name -> seshat.Result
	33, // 39: seshat.GetConditionTemplatesResponse.templates:type_name -> seshat.ConditionTemplate
	47, // 40: seshat.GetConditionTemplatesResponse.status:type_name -> seshat.Result
	0,  // 41: seshat.ConditionTemplate.default_severity:type_name -> seshat.ConditionSeverity
	6,  // 42: seshat.ConditionTemplate.default_duration:type_name -> seshat.ConditionDuration
	7,  // 43: seshat.ConditionTemplate.default_effects:type_name -> seshat.ConditionEffect
	2,  // 44: seshat.ConditionTemplate.stacking_behavior:type_name -> seshat.StackingBehavior
	45, // 45: seshat.ConditionTemplate.properties:type_name -> seshat.ConditionTemplate.PropertiesEntry
	33, // 46: seshat.CreateConditionTemplateRequest.template:type_name -> seshat.ConditionTemplate
	33, // 47: seshat.CreateConditionTemplateResponse.created_template:type_name -> seshat.ConditionTemplate
	47, // 48: seshat.CreateConditionTemplateResponse.status:type_name -> seshat.Result
	5,  // 49: seshat.ProcessConditionTickResponse.expired_conditions:type_name -> seshat.Condition
	5,  // 50: seshat.ProcessConditionTickResponse.triggered_conditions:type_name -> seshat.Condition
	7,  // 51: seshat.ProcessConditionTickResponse.applied_effects:type_name -> seshat.ConditionEffect
	47, // 52: seshat.ProcessConditionTickResponse.status:type_name -> seshat.Result
	40, // 53: seshat.GetConditionHistoryResponse.history:type_name -> seshat.ConditionHistoryEntry
	47, // 54: seshat.GetConditionHistoryResponse.status:type_name -> seshat.Result
	5,  // 55: seshat.ConditionHistoryEntry.condition:type_name -> seshat.Condition
	46, // 56: seshat.ConditionHistoryEntry.details:type_name -> seshat.ConditionHistoryEntry.DetailsEntry
	23, // 57: seshat.GetActiveConditionsResponse.EntityConditionsEntry.value:type_name -> seshat.EntityConditions
	8,  // 58: seshat.ConditionsService.ApplyCondition:input_type -> seshat.ApplyConditionRequest
	11, // 59: seshat.ConditionsService.RemoveCondition:input_type -> seshat.RemoveConditionRequest
	15, // 60: seshat.ConditionsService.GetConditions:input_type -> seshat.GetConditionsRequest
	13, // 61: seshat.ConditionsService.UpdateCondition:input_type -> seshat.UpdateConditionRequest
	17, // 62: seshat.ConditionsService.HasCondition:input_type -> seshat.HasConditionRequest
	19, // 63: seshat.ConditionsService.GetConditionsByType:input_type -> seshat.GetConditionsByTypeRequest
	21, // 64: seshat.ConditionsService.GetActiveConditions:input_type -> seshat.GetActiveConditionsRequest
	24, // 65: seshat.ConditionsService.CheckImmunity:input_type -> seshat.CheckImmunityRequest
	26, // 66: seshat.ConditionsService.GetConflictingConditions:input_type -> seshat.GetConflictingConditionsRequest
	29, // 67: seshat.ConditionsService.ResolveConflicts:input_type -> seshat.ResolveConflictsRequest
	31, // 68: seshat.ConditionsService.GetConditionTemplates:input_type -> seshat.GetConditionTemplatesRequest
	34, // 69: seshat.ConditionsService.CreateConditionTemplate:input_type -> seshat.CreateConditionTemplateRequest
	36, // 70: seshat.ConditionsService.ProcessConditionTick:input_type -> seshat.ProcessConditionTickRequest
	38, // 71: seshat.ConditionsService.GetConditionHistory:input_type -> seshat.GetConditionHistoryRequest
	9,  // 72: seshat.ConditionsService.ApplyCondition:output_type -> seshat.ApplyConditionResponse
	12, // 73: seshat.ConditionsService.RemoveCondition:output_type -> seshat.RemoveConditionResponse
	16, // 74: seshat.ConditionsService.GetConditions:output_type -> seshat.GetConditionsResponse
	14, // 75: seshat.ConditionsService.UpdateCondition:output_type -> seshat.UpdateConditionResponse
	18, // 76: seshat.ConditionsService.HasCondition:output_type -> seshat.HasConditionResponse
	20, // 77: seshat.ConditionsService.GetConditionsByType:output_type -> seshat.GetConditionsByTypeResponse
	22, // 78: seshat.ConditionsService.GetActiveConditions:output_type -> seshat.GetActiveConditionsResponse
	25, // 79: seshat.ConditionsService.CheckImmunity:output_type -> seshat.CheckImmunityResponse
	27, // 80: seshat.ConditionsService.GetConflictingConditions:output_type -> seshat.GetConflictingConditionsResponse
	30, // 81: seshat.ConditionsService.ResolveConflicts:output_type -> seshat.ResolveConflictsResponse
	32, // 82: seshat.ConditionsService.GetConditionTemplates:output_type -> seshat.GetConditionTemplatesResponse
	35, // 83: seshat.ConditionsService.CreateConditionTemplate:output_type -> seshat.CreateConditionTemplateResponse
	37, // 84: seshat.ConditionsService.ProcessConditionTick:output_type -> seshat.ProcessConditionTickResponse
	39, // 85: seshat.ConditionsService.GetConditionHistory:output_type -> seshat.GetConditionHistoryResponse
	72, // [72:86] is the sub-list for method output_type
	58, // [58:72] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_seshat_conditions_proto_init() }
func file_seshat_conditions_proto_init() {
	if File_seshat_conditions_proto != nil {
		return
	}
	file_seshat_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_seshat_conditions_proto_rawDesc), len(file_seshat_conditions_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_seshat_conditions_proto_goTypes,
		DependencyIndexes: file_seshat_conditions_proto_depIdxs,
		EnumInfos:         file_seshat_conditions_proto_enumTypes,
		MessageInfos:      file_seshat_conditions_proto_msgTypes,
	}.Build()
	File_seshat_conditions_proto = out.File
	file_seshat_conditions_proto_goTypes = nil
	file_seshat_conditions_proto_depIdxs = nil
}

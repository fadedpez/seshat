// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: seshat/events.proto

package seshat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event publishing
type PublishEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         *GameEvent             `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishEventRequest) Reset() {
	*x = PublishEventRequest{}
	mi := &file_seshat_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEventRequest) ProtoMessage() {}

func (x *PublishEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEventRequest.ProtoReflect.Descriptor instead.
func (*PublishEventRequest) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{0}
}

func (x *PublishEventRequest) GetEvent() *GameEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type PublishEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Result                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EventId       string                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishEventResponse) Reset() {
	*x = PublishEventResponse{}
	mi := &file_seshat_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEventResponse) ProtoMessage() {}

func (x *PublishEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEventResponse.ProtoReflect.Descriptor instead.
func (*PublishEventResponse) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{1}
}

func (x *PublishEventResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PublishEventResponse) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *PublishEventResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Event subscription
type SubscribeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EventTypes     []string               `protobuf:"bytes,1,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`              // Event types to subscribe to
	SubscriberId   string                 `protobuf:"bytes,2,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`        // Client identifier
	Priority       int32                  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`                                   // Handler priority
	IncludeHistory bool                   `protobuf:"varint,4,opt,name=include_history,json=includeHistory,proto3" json:"include_history,omitempty"` // Send historical events first
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_seshat_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *SubscribeRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *SubscribeRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SubscribeRequest) GetIncludeHistory() bool {
	if x != nil {
		return x.IncludeHistory
	}
	return false
}

type SubscribeAllRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriberId   string                 `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	Priority       int32                  `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	IncludeHistory bool                   `protobuf:"varint,3,opt,name=include_history,json=includeHistory,proto3" json:"include_history,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscribeAllRequest) Reset() {
	*x = SubscribeAllRequest{}
	mi := &file_seshat_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAllRequest) ProtoMessage() {}

func (x *SubscribeAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAllRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAllRequest) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeAllRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *SubscribeAllRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SubscribeAllRequest) GetIncludeHistory() bool {
	if x != nil {
		return x.IncludeHistory
	}
	return false
}

type UnsubscribeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UnsubscribeRequest) Reset() {
	*x = UnsubscribeRequest{}
	mi := &file_seshat_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRequest) ProtoMessage() {}

func (x *UnsubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeRequest) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{4}
}

func (x *UnsubscribeRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type UnsubscribeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Result                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeResponse) Reset() {
	*x = UnsubscribeResponse{}
	mi := &file_seshat_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeResponse) ProtoMessage() {}

func (x *UnsubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeResponse.ProtoReflect.Descriptor instead.
func (*UnsubscribeResponse) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{5}
}

func (x *UnsubscribeResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Core event structure
type GameEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // "dice.rolled", "entity.moved", etc.
	Context       *EventContext          `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Priority      int32                  `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Data          map[string]string      `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Event-specific data
	Source        string                 `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`                                                                       // Event source system
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameEvent) Reset() {
	*x = GameEvent{}
	mi := &file_seshat_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent) ProtoMessage() {}

func (x *GameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent.ProtoReflect.Descriptor instead.
func (*GameEvent) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{6}
}

func (x *GameEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GameEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GameEvent) GetContext() *EventContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GameEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GameEvent) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *GameEvent) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GameEvent) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// Event history
type EventHistoryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EventTypes     []string               `protobuf:"bytes,1,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"` // Filter by types
	EntityId       string                 `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`       // Filter by entity
	Limit          int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	SinceTimestamp int64                  `protobuf:"varint,4,opt,name=since_timestamp,json=sinceTimestamp,proto3" json:"since_timestamp,omitempty"`
	UntilTimestamp int64                  `protobuf:"varint,5,opt,name=until_timestamp,json=untilTimestamp,proto3" json:"until_timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventHistoryRequest) Reset() {
	*x = EventHistoryRequest{}
	mi := &file_seshat_events_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHistoryRequest) ProtoMessage() {}

func (x *EventHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHistoryRequest.ProtoReflect.Descriptor instead.
func (*EventHistoryRequest) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{7}
}

func (x *EventHistoryRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *EventHistoryRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EventHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *EventHistoryRequest) GetSinceTimestamp() int64 {
	if x != nil {
		return x.SinceTimestamp
	}
	return 0
}

func (x *EventHistoryRequest) GetUntilTimestamp() int64 {
	if x != nil {
		return x.UntilTimestamp
	}
	return 0
}

type EventHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*GameEvent           `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Status        *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventHistoryResponse) Reset() {
	*x = EventHistoryResponse{}
	mi := &file_seshat_events_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHistoryResponse) ProtoMessage() {}

func (x *EventHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHistoryResponse.ProtoReflect.Descriptor instead.
func (*EventHistoryResponse) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{8}
}

func (x *EventHistoryResponse) GetEvents() []*GameEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventHistoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *EventHistoryResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type ClearEventHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventTypes    []string               `protobuf:"bytes,1,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"` // Clear specific types, empty = all
	EntityId      string                 `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`       // Clear for specific entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearEventHistoryRequest) Reset() {
	*x = ClearEventHistoryRequest{}
	mi := &file_seshat_events_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearEventHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearEventHistoryRequest) ProtoMessage() {}

func (x *ClearEventHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearEventHistoryRequest.ProtoReflect.Descriptor instead.
func (*ClearEventHistoryRequest) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{9}
}

func (x *ClearEventHistoryRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *ClearEventHistoryRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type ClearEventHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClearedCount  int32                  `protobuf:"varint,1,opt,name=cleared_count,json=clearedCount,proto3" json:"cleared_count,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearEventHistoryResponse) Reset() {
	*x = ClearEventHistoryResponse{}
	mi := &file_seshat_events_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearEventHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearEventHistoryResponse) ProtoMessage() {}

func (x *ClearEventHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearEventHistoryResponse.ProtoReflect.Descriptor instead.
func (*ClearEventHistoryResponse) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{10}
}

func (x *ClearEventHistoryResponse) GetClearedCount() int32 {
	if x != nil {
		return x.ClearedCount
	}
	return 0
}

func (x *ClearEventHistoryResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Subscription management
type GetSubscriptionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubscriberId  string                 `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"` // Get subscriptions for specific client
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubscriptionsRequest) Reset() {
	*x = GetSubscriptionsRequest{}
	mi := &file_seshat_events_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionsRequest) ProtoMessage() {}

func (x *GetSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{11}
}

func (x *GetSubscriptionsRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

type GetSubscriptionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*Subscription        `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubscriptionsResponse) Reset() {
	*x = GetSubscriptionsResponse{}
	mi := &file_seshat_events_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionsResponse) ProtoMessage() {}

func (x *GetSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{12}
}

func (x *GetSubscriptionsResponse) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *GetSubscriptionsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type Subscription struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubscriberId     string                 `protobuf:"bytes,2,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	EventTypes       []string               `protobuf:"bytes,3,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
	Priority         int32                  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	CreatedTimestamp int64                  `protobuf:"varint,5,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	EventsReceived   int32                  `protobuf:"varint,6,opt,name=events_received,json=eventsReceived,proto3" json:"events_received,omitempty"` // Statistics
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_seshat_events_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_events_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_seshat_events_proto_rawDescGZIP(), []int{13}
}

func (x *Subscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subscription) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *Subscription) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *Subscription) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Subscription) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

func (x *Subscription) GetEventsReceived() int32 {
	if x != nil {
		return x.EventsReceived
	}
	return 0
}

var File_seshat_events_proto protoreflect.FileDescriptor

const file_seshat_events_proto_rawDesc = "" +
	"\n" +
	"\x13seshat/events.proto\x12\x06seshat\x1a\x13seshat/common.proto\">\n" +
	"\x13PublishEventRequest\x12'\n" +
	"\x05event\x18\x01 \x01(\v2\x11.seshat.GameEventR\x05event\"w\n" +
	"\x14PublishEventResponse\x12&\n" +
	"\x06status\x18\x01 \x01(\v2\x0e.seshat.ResultR\x06status\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\tR\aeventId\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"\x9d\x01\n" +
	"\x10SubscribeRequest\x12\x1f\n" +
	"\vevent_types\x18\x01 \x03(\tR\n" +
	"eventTypes\x12#\n" +
	"\rsubscriber_id\x18\x02 \x01(\tR\fsubscriberId\x12\x1a\n" +
	"\bpriority\x18\x03 \x01(\x05R\bpriority\x12'\n" +
	"\x0finclude_history\x18\x04 \x01(\bR\x0eincludeHistory\"\x7f\n" +
	"\x13SubscribeAllRequest\x12#\n" +
	"\rsubscriber_id\x18\x01 \x01(\tR\fsubscriberId\x12\x1a\n" +
	"\bpriority\x18\x02 \x01(\x05R\bpriority\x12'\n" +
	"\x0finclude_history\x18\x03 \x01(\bR\x0eincludeHistory\"=\n" +
	"\x12UnsubscribeRequest\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\tR\x0esubscriptionId\"=\n" +
	"\x13UnsubscribeResponse\x12&\n" +
	"\x06status\x18\x01 \x01(\v2\x0e.seshat.ResultR\x06status\"\x9b\x02\n" +
	"\tGameEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12.\n" +
	"\acontext\x18\x03 \x01(\v2\x14.seshat.EventContextR\acontext\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12\x1a\n" +
	"\bpriority\x18\x05 \x01(\x05R\bpriority\x12/\n" +
	"\x04data\x18\x06 \x03(\v2\x1b.seshat.GameEvent.DataEntryR\x04data\x12\x16\n" +
	"\x06source\x18\a \x01(\tR\x06source\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xbb\x01\n" +
	"\x13EventHistoryRequest\x12\x1f\n" +
	"\vevent_types\x18\x01 \x03(\tR\n" +
	"eventTypes\x12\x1b\n" +
	"\tentity_id\x18\x02 \x01(\tR\bentityId\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12'\n" +
	"\x0fsince_timestamp\x18\x04 \x01(\x03R\x0esinceTimestamp\x12'\n" +
	"\x0funtil_timestamp\x18\x05 \x01(\x03R\x0euntilTimestamp\"\x8a\x01\n" +
	"\x14EventHistoryResponse\x12)\n" +
	"\x06events\x18\x01 \x03(\v2\x11.seshat.GameEventR\x06events\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"X\n" +
	"\x18ClearEventHistoryRequest\x12\x1f\n" +
	"\vevent_types\x18\x01 \x03(\tR\n" +
	"eventTypes\x12\x1b\n" +
	"\tentity_id\x18\x02 \x01(\tR\bentityId\"h\n" +
	"\x19ClearEventHistoryResponse\x12#\n" +
	"\rcleared_count\x18\x01 \x01(\x05R\fclearedCount\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\">\n" +
	"\x17GetSubscriptionsRequest\x12#\n" +
	"\rsubscriber_id\x18\x01 \x01(\tR\fsubscriberId\"~\n" +
	"\x18GetSubscriptionsResponse\x12:\n" +
	"\rsubscriptions\x18\x01 \x03(\v2\x14.seshat.SubscriptionR\rsubscriptions\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\xd6\x01\n" +
	"\fSubscription\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12#\n" +
	"\rsubscriber_id\x18\x02 \x01(\tR\fsubscriberId\x12\x1f\n" +
	"\vevent_types\x18\x03 \x03(\tR\n" +
	"eventTypes\x12\x1a\n" +
	"\bpriority\x18\x04 \x01(\x05R\bpriority\x12+\n" +
	"\x11created_timestamp\x18\x05 \x01(\x03R\x10createdTimestamp\x12'\n" +
	"\x0fevents_received\x18\x06 \x01(\x05R\x0eeventsReceived2\xae\x04\n" +
	"\fEventService\x12I\n" +
	"\fPublishEvent\x12\x1b.seshat.PublishEventRequest\x1a\x1c.seshat.PublishEventResponse\x12B\n" +
	"\x11SubscribeToEvents\x12\x18.seshat.SubscribeRequest\x1a\x11.seshat.GameEvent0\x01\x12H\n" +
	"\x14SubscribeToAllEvents\x12\x1b.seshat.SubscribeAllRequest\x1a\x11.seshat.GameEvent0\x01\x12L\n" +
	"\x0fGetEventHistory\x12\x1b.seshat.EventHistoryRequest\x1a\x1c.seshat.EventHistoryResponse\x12X\n" +
	"\x11ClearEventHistory\x12 .seshat.ClearEventHistoryRequest\x1a!.seshat.ClearEventHistoryResponse\x12U\n" +
	"\x10GetSubscriptions\x12\x1f.seshat.GetSubscriptionsRequest\x1a .seshat.GetSubscriptionsResponse\x12F\n" +
	"\vUnsubscribe\x12\x1a.seshat.UnsubscribeRequest\x1a\x1b.seshat.UnsubscribeResponseB!Z\x1fgithub.com/seshat/protos/seshatb\x06proto3"

var (
	file_seshat_events_proto_rawDescOnce sync.Once
	file_seshat_events_proto_rawDescData []byte
)

func file_seshat_events_proto_rawDescGZIP() []byte {
	file_seshat_events_proto_rawDescOnce.Do(func() {
		file_seshat_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_seshat_events_proto_rawDesc), len(file_seshat_events_proto_rawDesc)))
	})
	return file_seshat_events_proto_rawDescData
}

var file_seshat_events_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_seshat_events_proto_goTypes = []any{
	(*PublishEventRequest)(nil),       // 0: seshat.PublishEventRequest
	(*PublishEventResponse)(nil),      // 1: seshat.PublishEventResponse
	(*SubscribeRequest)(nil),          // 2: seshat.SubscribeRequest
	(*SubscribeAllRequest)(nil),       // 3: seshat.SubscribeAllRequest
	(*UnsubscribeRequest)(nil),        // 4: seshat.UnsubscribeRequest
	(*UnsubscribeResponse)(nil),       // 5: seshat.UnsubscribeResponse
	(*GameEvent)(nil),                 // 6: seshat.GameEvent
	(*EventHistoryRequest)(nil),       // 7: seshat.EventHistoryRequest
	(*EventHistoryResponse)(nil),      // 8: seshat.EventHistoryResponse
	(*ClearEventHistoryRequest)(nil),  // 9: seshat.ClearEventHistoryRequest
	(*ClearEventHistoryResponse)(nil), // 10: seshat.ClearEventHistoryResponse
	(*GetSubscriptionsRequest)(nil),   // 11: seshat.GetSubscriptionsRequest
	(*GetSubscriptionsResponse)(nil),  // 12: seshat.GetSubscriptionsResponse
	(*Subscription)(nil),              // 13: seshat.Subscription
	nil,                               // 14: seshat.GameEvent.DataEntry
	(*Result)(nil),                    // 15: seshat.Result
	(*EventContext)(nil),              // 16: seshat.EventContext
}
var file_seshat_events_proto_depIdxs = []int32{
	6,  // 0: seshat.PublishEventRequest.event:type_name -> seshat.GameEvent
	15, // 1: seshat.PublishEventResponse.status:type_name -> seshat.Result
	15, // 2: seshat.UnsubscribeResponse.status:type_name -> seshat.Result
	16, // 3: seshat.GameEvent.context:type_name -> seshat.EventContext
	14, // 4: seshat.GameEvent.data:type_name -> seshat.GameEvent.DataEntry
	6,  // 5: seshat.EventHistoryResponse.events:type_name -> seshat.GameEvent
	15, // 6: seshat.EventHistoryResponse.status:type_name -> seshat.Result
	15, // 7: seshat.ClearEventHistoryResponse.status:type_name -> seshat.Result
	13, // 8: seshat.GetSubscriptionsResponse.subscriptions:type_name -> seshat.Subscription
	15, // 9: seshat.GetSubscriptionsResponse.status:type_name -> seshat.Result
	0,  // 10: seshat.EventService.PublishEvent:input_type -> seshat.PublishEventRequest
	2,  // 11: seshat.EventService.SubscribeToEvents:input_type -> seshat.SubscribeRequest
	3,  // 12: seshat.EventService.SubscribeToAllEvents:input_type -> seshat.SubscribeAllRequest
	7,  // 13: seshat.EventService.GetEventHistory:input_type -> seshat.EventHistoryRequest
	9,  // 14: seshat.EventService.ClearEventHistory:input_type -> seshat.ClearEventHistoryRequest
	11, // 15: seshat.EventService.GetSubscriptions:input_type -> seshat.GetSubscriptionsRequest
	4,  // 16: seshat.EventService.Unsubscribe:input_type -> seshat.UnsubscribeRequest
	1,  // 17: seshat.EventService.PublishEvent:output_type -> seshat.PublishEventResponse
	6,  // 18: seshat.EventService.SubscribeToEvents:output_type -> seshat.GameEvent
	6,  // 19: seshat.EventService.SubscribeToAllEvents:output_type -> seshat.GameEvent
	8,  // 20: seshat.EventService.GetEventHistory:output_type -> seshat.EventHistoryResponse
	10, // 21: seshat.EventService.ClearEventHistory:output_type -> seshat.ClearEventHistoryResponse
	12, // 22: seshat.EventService.GetSubscriptions:output_type -> seshat.GetSubscriptionsResponse
	5,  // 23: seshat.EventService.Unsubscribe:output_type -> seshat.UnsubscribeResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_seshat_events_proto_init() }
func file_seshat_events_proto_init() {
	if File_seshat_events_proto != nil {
		return
	}
	file_seshat_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_seshat_events_proto_rawDesc), len(file_seshat_events_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_seshat_events_proto_goTypes,
		DependencyIndexes: file_seshat_events_proto_depIdxs,
		MessageInfos:      file_seshat_events_proto_msgTypes,
	}.Build()
	File_seshat_events_proto = out.File
	file_seshat_events_proto_goTypes = nil
	file_seshat_events_proto_depIdxs = nil
}

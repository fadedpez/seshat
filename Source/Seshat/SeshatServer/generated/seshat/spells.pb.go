// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: seshat/spells.proto

package seshat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpellSchool int32

const (
	SpellSchool_SPELL_SCHOOL_UNSPECIFIED   SpellSchool = 0
	SpellSchool_SPELL_SCHOOL_ABJURATION    SpellSchool = 1
	SpellSchool_SPELL_SCHOOL_CONJURATION   SpellSchool = 2
	SpellSchool_SPELL_SCHOOL_DIVINATION    SpellSchool = 3
	SpellSchool_SPELL_SCHOOL_ENCHANTMENT   SpellSchool = 4
	SpellSchool_SPELL_SCHOOL_EVOCATION     SpellSchool = 5
	SpellSchool_SPELL_SCHOOL_ILLUSION      SpellSchool = 6
	SpellSchool_SPELL_SCHOOL_NECROMANCY    SpellSchool = 7
	SpellSchool_SPELL_SCHOOL_TRANSMUTATION SpellSchool = 8
)

// Enum value maps for SpellSchool.
var (
	SpellSchool_name = map[int32]string{
		0: "SPELL_SCHOOL_UNSPECIFIED",
		1: "SPELL_SCHOOL_ABJURATION",
		2: "SPELL_SCHOOL_CONJURATION",
		3: "SPELL_SCHOOL_DIVINATION",
		4: "SPELL_SCHOOL_ENCHANTMENT",
		5: "SPELL_SCHOOL_EVOCATION",
		6: "SPELL_SCHOOL_ILLUSION",
		7: "SPELL_SCHOOL_NECROMANCY",
		8: "SPELL_SCHOOL_TRANSMUTATION",
	}
	SpellSchool_value = map[string]int32{
		"SPELL_SCHOOL_UNSPECIFIED":   0,
		"SPELL_SCHOOL_ABJURATION":    1,
		"SPELL_SCHOOL_CONJURATION":   2,
		"SPELL_SCHOOL_DIVINATION":    3,
		"SPELL_SCHOOL_ENCHANTMENT":   4,
		"SPELL_SCHOOL_EVOCATION":     5,
		"SPELL_SCHOOL_ILLUSION":      6,
		"SPELL_SCHOOL_NECROMANCY":    7,
		"SPELL_SCHOOL_TRANSMUTATION": 8,
	}
)

func (x SpellSchool) Enum() *SpellSchool {
	p := new(SpellSchool)
	*p = x
	return p
}

func (x SpellSchool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpellSchool) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_spells_proto_enumTypes[0].Descriptor()
}

func (SpellSchool) Type() protoreflect.EnumType {
	return &file_seshat_spells_proto_enumTypes[0]
}

func (x SpellSchool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpellSchool.Descriptor instead.
func (SpellSchool) EnumDescriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{0}
}

type RangeType int32

const (
	RangeType_RANGE_TYPE_UNSPECIFIED RangeType = 0
	RangeType_RANGE_TYPE_SELF        RangeType = 1
	RangeType_RANGE_TYPE_TOUCH       RangeType = 2
	RangeType_RANGE_TYPE_RANGED      RangeType = 3 // Specific distance
	RangeType_RANGE_TYPE_SIGHT       RangeType = 4 // As far as you can see
	RangeType_RANGE_TYPE_UNLIMITED   RangeType = 5 // No range limit
)

// Enum value maps for RangeType.
var (
	RangeType_name = map[int32]string{
		0: "RANGE_TYPE_UNSPECIFIED",
		1: "RANGE_TYPE_SELF",
		2: "RANGE_TYPE_TOUCH",
		3: "RANGE_TYPE_RANGED",
		4: "RANGE_TYPE_SIGHT",
		5: "RANGE_TYPE_UNLIMITED",
	}
	RangeType_value = map[string]int32{
		"RANGE_TYPE_UNSPECIFIED": 0,
		"RANGE_TYPE_SELF":        1,
		"RANGE_TYPE_TOUCH":       2,
		"RANGE_TYPE_RANGED":      3,
		"RANGE_TYPE_SIGHT":       4,
		"RANGE_TYPE_UNLIMITED":   5,
	}
)

func (x RangeType) Enum() *RangeType {
	p := new(RangeType)
	*p = x
	return p
}

func (x RangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_spells_proto_enumTypes[1].Descriptor()
}

func (RangeType) Type() protoreflect.EnumType {
	return &file_seshat_spells_proto_enumTypes[1]
}

func (x RangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangeType.Descriptor instead.
func (RangeType) EnumDescriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{1}
}

type AreaType int32

const (
	AreaType_AREA_TYPE_UNSPECIFIED   AreaType = 0
	AreaType_AREA_TYPE_SINGLE_TARGET AreaType = 1
	AreaType_AREA_TYPE_SPHERE        AreaType = 2
	AreaType_AREA_TYPE_CUBE          AreaType = 3
	AreaType_AREA_TYPE_CONE          AreaType = 4
	AreaType_AREA_TYPE_LINE          AreaType = 5
	AreaType_AREA_TYPE_CYLINDER      AreaType = 6
	AreaType_AREA_TYPE_HEMISPHERE    AreaType = 7
)

// Enum value maps for AreaType.
var (
	AreaType_name = map[int32]string{
		0: "AREA_TYPE_UNSPECIFIED",
		1: "AREA_TYPE_SINGLE_TARGET",
		2: "AREA_TYPE_SPHERE",
		3: "AREA_TYPE_CUBE",
		4: "AREA_TYPE_CONE",
		5: "AREA_TYPE_LINE",
		6: "AREA_TYPE_CYLINDER",
		7: "AREA_TYPE_HEMISPHERE",
	}
	AreaType_value = map[string]int32{
		"AREA_TYPE_UNSPECIFIED":   0,
		"AREA_TYPE_SINGLE_TARGET": 1,
		"AREA_TYPE_SPHERE":        2,
		"AREA_TYPE_CUBE":          3,
		"AREA_TYPE_CONE":          4,
		"AREA_TYPE_LINE":          5,
		"AREA_TYPE_CYLINDER":      6,
		"AREA_TYPE_HEMISPHERE":    7,
	}
)

func (x AreaType) Enum() *AreaType {
	p := new(AreaType)
	*p = x
	return p
}

func (x AreaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AreaType) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_spells_proto_enumTypes[2].Descriptor()
}

func (AreaType) Type() protoreflect.EnumType {
	return &file_seshat_spells_proto_enumTypes[2]
}

func (x AreaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AreaType.Descriptor instead.
func (AreaType) EnumDescriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{2}
}

type EffectTiming int32

const (
	EffectTiming_EFFECT_TIMING_UNSPECIFIED   EffectTiming = 0
	EffectTiming_EFFECT_TIMING_IMMEDIATE     EffectTiming = 1 // Happens when cast
	EffectTiming_EFFECT_TIMING_START_OF_TURN EffectTiming = 2
	EffectTiming_EFFECT_TIMING_END_OF_TURN   EffectTiming = 3
	EffectTiming_EFFECT_TIMING_ON_TRIGGER    EffectTiming = 4 // When specific event occurs
	EffectTiming_EFFECT_TIMING_DURATION      EffectTiming = 5 // Ongoing for spell duration
)

// Enum value maps for EffectTiming.
var (
	EffectTiming_name = map[int32]string{
		0: "EFFECT_TIMING_UNSPECIFIED",
		1: "EFFECT_TIMING_IMMEDIATE",
		2: "EFFECT_TIMING_START_OF_TURN",
		3: "EFFECT_TIMING_END_OF_TURN",
		4: "EFFECT_TIMING_ON_TRIGGER",
		5: "EFFECT_TIMING_DURATION",
	}
	EffectTiming_value = map[string]int32{
		"EFFECT_TIMING_UNSPECIFIED":   0,
		"EFFECT_TIMING_IMMEDIATE":     1,
		"EFFECT_TIMING_START_OF_TURN": 2,
		"EFFECT_TIMING_END_OF_TURN":   3,
		"EFFECT_TIMING_ON_TRIGGER":    4,
		"EFFECT_TIMING_DURATION":      5,
	}
)

func (x EffectTiming) Enum() *EffectTiming {
	p := new(EffectTiming)
	*p = x
	return p
}

func (x EffectTiming) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EffectTiming) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_spells_proto_enumTypes[3].Descriptor()
}

func (EffectTiming) Type() protoreflect.EnumType {
	return &file_seshat_spells_proto_enumTypes[3]
}

func (x EffectTiming) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EffectTiming.Descriptor instead.
func (EffectTiming) EnumDescriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{3}
}

// Core spell structure
type Spell struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Level                 int32                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"` // 0 = cantrip, 1-9 = spell levels
	School                SpellSchool            `protobuf:"varint,5,opt,name=school,proto3,enum=seshat.SpellSchool" json:"school,omitempty"`
	Classes               []string               `protobuf:"bytes,6,rep,name=classes,proto3" json:"classes,omitempty"`                                              // Which classes can learn this spell
	Components            []string               `protobuf:"bytes,7,rep,name=components,proto3" json:"components,omitempty"`                                        // "V", "S", "M", "F" (verbal, somatic, material, focus)
	MaterialComponent     string                 `protobuf:"bytes,8,opt,name=material_component,json=materialComponent,proto3" json:"material_component,omitempty"` // Description of material component
	Casting               *CastingRequirements   `protobuf:"bytes,9,opt,name=casting,proto3" json:"casting,omitempty"`
	Range                 *SpellRange            `protobuf:"bytes,10,opt,name=range,proto3" json:"range,omitempty"`
	Duration              *SpellDuration         `protobuf:"bytes,11,opt,name=duration,proto3" json:"duration,omitempty"`
	Area                  *SpellArea             `protobuf:"bytes,12,opt,name=area,proto3" json:"area,omitempty"`
	Effects               []*SpellEffect         `protobuf:"bytes,13,rep,name=effects,proto3" json:"effects,omitempty"`
	Tags                  []string               `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"` // "damage", "healing", "utility", etc.
	RequiresConcentration bool                   `protobuf:"varint,15,opt,name=requires_concentration,json=requiresConcentration,proto3" json:"requires_concentration,omitempty"`
	IsRitual              bool                   `protobuf:"varint,16,opt,name=is_ritual,json=isRitual,proto3" json:"is_ritual,omitempty"`
	CanUpcast             bool                   `protobuf:"varint,17,opt,name=can_upcast,json=canUpcast,proto3" json:"can_upcast,omitempty"` // Can be cast at higher levels
	Properties            map[string]string      `protobuf:"bytes,18,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Source                string                 `protobuf:"bytes,19,opt,name=source,proto3" json:"source,omitempty"` // Book/source where spell is defined
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Spell) Reset() {
	*x = Spell{}
	mi := &file_seshat_spells_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Spell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spell) ProtoMessage() {}

func (x *Spell) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spell.ProtoReflect.Descriptor instead.
func (*Spell) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{0}
}

func (x *Spell) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Spell) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spell) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Spell) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Spell) GetSchool() SpellSchool {
	if x != nil {
		return x.School
	}
	return SpellSchool_SPELL_SCHOOL_UNSPECIFIED
}

func (x *Spell) GetClasses() []string {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *Spell) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Spell) GetMaterialComponent() string {
	if x != nil {
		return x.MaterialComponent
	}
	return ""
}

func (x *Spell) GetCasting() *CastingRequirements {
	if x != nil {
		return x.Casting
	}
	return nil
}

func (x *Spell) GetRange() *SpellRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Spell) GetDuration() *SpellDuration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Spell) GetArea() *SpellArea {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *Spell) GetEffects() []*SpellEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *Spell) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Spell) GetRequiresConcentration() bool {
	if x != nil {
		return x.RequiresConcentration
	}
	return false
}

func (x *Spell) GetIsRitual() bool {
	if x != nil {
		return x.IsRitual
	}
	return false
}

func (x *Spell) GetCanUpcast() bool {
	if x != nil {
		return x.CanUpcast
	}
	return false
}

func (x *Spell) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Spell) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type CastingRequirements struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CastingTime         string                 `protobuf:"bytes,1,opt,name=casting_time,json=castingTime,proto3" json:"casting_time,omitempty"` // "1 action", "1 bonus action", "1 minute"
	RequiresLineOfSight bool                   `protobuf:"varint,2,opt,name=requires_line_of_sight,json=requiresLineOfSight,proto3" json:"requires_line_of_sight,omitempty"`
	RequiresVerbal      bool                   `protobuf:"varint,3,opt,name=requires_verbal,json=requiresVerbal,proto3" json:"requires_verbal,omitempty"`
	RequiresSomatic     bool                   `protobuf:"varint,4,opt,name=requires_somatic,json=requiresSomatic,proto3" json:"requires_somatic,omitempty"`
	RequiresMaterial    bool                   `protobuf:"varint,5,opt,name=requires_material,json=requiresMaterial,proto3" json:"requires_material,omitempty"`
	RequiresFocus       bool                   `protobuf:"varint,6,opt,name=requires_focus,json=requiresFocus,proto3" json:"requires_focus,omitempty"`
	MaterialConsumed    bool                   `protobuf:"varint,7,opt,name=material_consumed,json=materialConsumed,proto3" json:"material_consumed,omitempty"` // Material component is consumed
	MaterialCostGp      int32                  `protobuf:"varint,8,opt,name=material_cost_gp,json=materialCostGp,proto3" json:"material_cost_gp,omitempty"`     // Cost of material component
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CastingRequirements) Reset() {
	*x = CastingRequirements{}
	mi := &file_seshat_spells_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CastingRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastingRequirements) ProtoMessage() {}

func (x *CastingRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastingRequirements.ProtoReflect.Descriptor instead.
func (*CastingRequirements) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{1}
}

func (x *CastingRequirements) GetCastingTime() string {
	if x != nil {
		return x.CastingTime
	}
	return ""
}

func (x *CastingRequirements) GetRequiresLineOfSight() bool {
	if x != nil {
		return x.RequiresLineOfSight
	}
	return false
}

func (x *CastingRequirements) GetRequiresVerbal() bool {
	if x != nil {
		return x.RequiresVerbal
	}
	return false
}

func (x *CastingRequirements) GetRequiresSomatic() bool {
	if x != nil {
		return x.RequiresSomatic
	}
	return false
}

func (x *CastingRequirements) GetRequiresMaterial() bool {
	if x != nil {
		return x.RequiresMaterial
	}
	return false
}

func (x *CastingRequirements) GetRequiresFocus() bool {
	if x != nil {
		return x.RequiresFocus
	}
	return false
}

func (x *CastingRequirements) GetMaterialConsumed() bool {
	if x != nil {
		return x.MaterialConsumed
	}
	return false
}

func (x *CastingRequirements) GetMaterialCostGp() int32 {
	if x != nil {
		return x.MaterialCostGp
	}
	return 0
}

type SpellRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          RangeType              `protobuf:"varint,1,opt,name=type,proto3,enum=seshat.RangeType" json:"type,omitempty"`
	Distance      int32                  `protobuf:"varint,2,opt,name=distance,proto3" json:"distance,omitempty"` // In feet/meters
	RequiresTouch bool                   `protobuf:"varint,3,opt,name=requires_touch,json=requiresTouch,proto3" json:"requires_touch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpellRange) Reset() {
	*x = SpellRange{}
	mi := &file_seshat_spells_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellRange) ProtoMessage() {}

func (x *SpellRange) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellRange.ProtoReflect.Descriptor instead.
func (*SpellRange) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{2}
}

func (x *SpellRange) GetType() RangeType {
	if x != nil {
		return x.Type
	}
	return RangeType_RANGE_TYPE_UNSPECIFIED
}

func (x *SpellRange) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *SpellRange) GetRequiresTouch() bool {
	if x != nil {
		return x.RequiresTouch
	}
	return false
}

type SpellDuration struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Type                  DurationType           `protobuf:"varint,1,opt,name=type,proto3,enum=seshat.DurationType" json:"type,omitempty"` // Reusing from conditions.proto
	Value                 int32                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	RequiresConcentration bool                   `protobuf:"varint,3,opt,name=requires_concentration,json=requiresConcentration,proto3" json:"requires_concentration,omitempty"`
	IsInstantaneous       bool                   `protobuf:"varint,4,opt,name=is_instantaneous,json=isInstantaneous,proto3" json:"is_instantaneous,omitempty"`
	Description           string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"` // "Until dispelled", etc.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SpellDuration) Reset() {
	*x = SpellDuration{}
	mi := &file_seshat_spells_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellDuration) ProtoMessage() {}

func (x *SpellDuration) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellDuration.ProtoReflect.Descriptor instead.
func (*SpellDuration) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{3}
}

func (x *SpellDuration) GetType() DurationType {
	if x != nil {
		return x.Type
	}
	return DurationType_DURATION_TYPE_UNSPECIFIED
}

func (x *SpellDuration) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SpellDuration) GetRequiresConcentration() bool {
	if x != nil {
		return x.RequiresConcentration
	}
	return false
}

func (x *SpellDuration) GetIsInstantaneous() bool {
	if x != nil {
		return x.IsInstantaneous
	}
	return false
}

func (x *SpellDuration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SpellArea struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           AreaType               `protobuf:"varint,1,opt,name=type,proto3,enum=seshat.AreaType" json:"type,omitempty"`
	Size           int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`  // Radius, width, etc.
	Shape          string                 `protobuf:"bytes,3,opt,name=shape,proto3" json:"shape,omitempty"` // "sphere", "cube", "cone", "line"
	AffectsObjects bool                   `protobuf:"varint,4,opt,name=affects_objects,json=affectsObjects,proto3" json:"affects_objects,omitempty"`
	AffectsTerrain bool                   `protobuf:"varint,5,opt,name=affects_terrain,json=affectsTerrain,proto3" json:"affects_terrain,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SpellArea) Reset() {
	*x = SpellArea{}
	mi := &file_seshat_spells_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellArea) ProtoMessage() {}

func (x *SpellArea) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellArea.ProtoReflect.Descriptor instead.
func (*SpellArea) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{4}
}

func (x *SpellArea) GetType() AreaType {
	if x != nil {
		return x.Type
	}
	return AreaType_AREA_TYPE_UNSPECIFIED
}

func (x *SpellArea) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SpellArea) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *SpellArea) GetAffectsObjects() bool {
	if x != nil {
		return x.AffectsObjects
	}
	return false
}

func (x *SpellArea) GetAffectsTerrain() bool {
	if x != nil {
		return x.AffectsTerrain
	}
	return false
}

type SpellEffect struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Type        string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // "damage", "healing", "condition", etc.
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Timing      EffectTiming           `protobuf:"varint,3,opt,name=timing,proto3,enum=seshat.EffectTiming" json:"timing,omitempty"`
	Targets     []string               `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"` // "caster", "target", "all_enemies", etc.
	// Effect parameters (depends on type)
	Damage           *DamageEffect         `protobuf:"bytes,5,opt,name=damage,proto3" json:"damage,omitempty"`
	Healing          *HealingEffect        `protobuf:"bytes,6,opt,name=healing,proto3" json:"healing,omitempty"`
	Condition        *SpellConditionEffect `protobuf:"bytes,7,opt,name=condition,proto3" json:"condition,omitempty"`
	Movement         *MovementEffect       `protobuf:"bytes,8,opt,name=movement,proto3" json:"movement,omitempty"`
	CustomParameters map[string]string     `protobuf:"bytes,9,rep,name=custom_parameters,json=customParameters,proto3" json:"custom_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Scaling for higher level casts
	Scaling       *SpellScaling `protobuf:"bytes,10,opt,name=scaling,proto3" json:"scaling,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpellEffect) Reset() {
	*x = SpellEffect{}
	mi := &file_seshat_spells_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellEffect) ProtoMessage() {}

func (x *SpellEffect) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellEffect.ProtoReflect.Descriptor instead.
func (*SpellEffect) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{5}
}

func (x *SpellEffect) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SpellEffect) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpellEffect) GetTiming() EffectTiming {
	if x != nil {
		return x.Timing
	}
	return EffectTiming_EFFECT_TIMING_UNSPECIFIED
}

func (x *SpellEffect) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *SpellEffect) GetDamage() *DamageEffect {
	if x != nil {
		return x.Damage
	}
	return nil
}

func (x *SpellEffect) GetHealing() *HealingEffect {
	if x != nil {
		return x.Healing
	}
	return nil
}

func (x *SpellEffect) GetCondition() *SpellConditionEffect {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *SpellEffect) GetMovement() *MovementEffect {
	if x != nil {
		return x.Movement
	}
	return nil
}

func (x *SpellEffect) GetCustomParameters() map[string]string {
	if x != nil {
		return x.CustomParameters
	}
	return nil
}

func (x *SpellEffect) GetScaling() *SpellScaling {
	if x != nil {
		return x.Scaling
	}
	return nil
}

type DamageEffect struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DamageType       string                 `protobuf:"bytes,1,opt,name=damage_type,json=damageType,proto3" json:"damage_type,omitempty"`    // "fire", "cold", "necrotic", etc.
	DiceFormula      string                 `protobuf:"bytes,2,opt,name=dice_formula,json=diceFormula,proto3" json:"dice_formula,omitempty"` // "2d6", "1d4+1", etc.
	AllowsSave       bool                   `protobuf:"varint,3,opt,name=allows_save,json=allowsSave,proto3" json:"allows_save,omitempty"`
	SaveAbility      string                 `protobuf:"bytes,4,opt,name=save_ability,json=saveAbility,proto3" json:"save_ability,omitempty"` // "dexterity", "constitution", etc.
	SaveDc           int32                  `protobuf:"varint,5,opt,name=save_dc,json=saveDc,proto3" json:"save_dc,omitempty"`
	HalfDamageOnSave bool                   `protobuf:"varint,6,opt,name=half_damage_on_save,json=halfDamageOnSave,proto3" json:"half_damage_on_save,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DamageEffect) Reset() {
	*x = DamageEffect{}
	mi := &file_seshat_spells_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DamageEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageEffect) ProtoMessage() {}

func (x *DamageEffect) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageEffect.ProtoReflect.Descriptor instead.
func (*DamageEffect) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{6}
}

func (x *DamageEffect) GetDamageType() string {
	if x != nil {
		return x.DamageType
	}
	return ""
}

func (x *DamageEffect) GetDiceFormula() string {
	if x != nil {
		return x.DiceFormula
	}
	return ""
}

func (x *DamageEffect) GetAllowsSave() bool {
	if x != nil {
		return x.AllowsSave
	}
	return false
}

func (x *DamageEffect) GetSaveAbility() string {
	if x != nil {
		return x.SaveAbility
	}
	return ""
}

func (x *DamageEffect) GetSaveDc() int32 {
	if x != nil {
		return x.SaveDc
	}
	return 0
}

func (x *DamageEffect) GetHalfDamageOnSave() bool {
	if x != nil {
		return x.HalfDamageOnSave
	}
	return false
}

type HealingEffect struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DiceFormula        string                 `protobuf:"bytes,1,opt,name=dice_formula,json=diceFormula,proto3" json:"dice_formula,omitempty"`
	AffectsUndead      bool                   `protobuf:"varint,2,opt,name=affects_undead,json=affectsUndead,proto3" json:"affects_undead,omitempty"` // Some healing harms undead
	TemporaryHitPoints bool                   `protobuf:"varint,3,opt,name=temporary_hit_points,json=temporaryHitPoints,proto3" json:"temporary_hit_points,omitempty"`
	MaximumTargets     int32                  `protobuf:"varint,4,opt,name=maximum_targets,json=maximumTargets,proto3" json:"maximum_targets,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HealingEffect) Reset() {
	*x = HealingEffect{}
	mi := &file_seshat_spells_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealingEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealingEffect) ProtoMessage() {}

func (x *HealingEffect) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealingEffect.ProtoReflect.Descriptor instead.
func (*HealingEffect) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{7}
}

func (x *HealingEffect) GetDiceFormula() string {
	if x != nil {
		return x.DiceFormula
	}
	return ""
}

func (x *HealingEffect) GetAffectsUndead() bool {
	if x != nil {
		return x.AffectsUndead
	}
	return false
}

func (x *HealingEffect) GetTemporaryHitPoints() bool {
	if x != nil {
		return x.TemporaryHitPoints
	}
	return false
}

func (x *HealingEffect) GetMaximumTargets() int32 {
	if x != nil {
		return x.MaximumTargets
	}
	return 0
}

type SpellConditionEffect struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ConditionType     string                 `protobuf:"bytes,1,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"` // Links to conditions.proto
	Duration          *ConditionDuration     `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	AllowsSave        bool                   `protobuf:"varint,3,opt,name=allows_save,json=allowsSave,proto3" json:"allows_save,omitempty"`
	SaveAbility       string                 `protobuf:"bytes,4,opt,name=save_ability,json=saveAbility,proto3" json:"save_ability,omitempty"`
	SaveDc            int32                  `protobuf:"varint,5,opt,name=save_dc,json=saveDc,proto3" json:"save_dc,omitempty"`
	SaveEndsCondition bool                   `protobuf:"varint,6,opt,name=save_ends_condition,json=saveEndsCondition,proto3" json:"save_ends_condition,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SpellConditionEffect) Reset() {
	*x = SpellConditionEffect{}
	mi := &file_seshat_spells_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellConditionEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellConditionEffect) ProtoMessage() {}

func (x *SpellConditionEffect) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellConditionEffect.ProtoReflect.Descriptor instead.
func (*SpellConditionEffect) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{8}
}

func (x *SpellConditionEffect) GetConditionType() string {
	if x != nil {
		return x.ConditionType
	}
	return ""
}

func (x *SpellConditionEffect) GetDuration() *ConditionDuration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SpellConditionEffect) GetAllowsSave() bool {
	if x != nil {
		return x.AllowsSave
	}
	return false
}

func (x *SpellConditionEffect) GetSaveAbility() string {
	if x != nil {
		return x.SaveAbility
	}
	return ""
}

func (x *SpellConditionEffect) GetSaveDc() int32 {
	if x != nil {
		return x.SaveDc
	}
	return 0
}

func (x *SpellConditionEffect) GetSaveEndsCondition() bool {
	if x != nil {
		return x.SaveEndsCondition
	}
	return false
}

type MovementEffect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // "teleport", "push", "pull", "speed_change"
	Distance      int32                  `protobuf:"varint,2,opt,name=distance,proto3" json:"distance,omitempty"`
	Direction     string                 `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"` // "away_from_caster", "toward_caster", "chosen"
	AllowsSave    bool                   `protobuf:"varint,4,opt,name=allows_save,json=allowsSave,proto3" json:"allows_save,omitempty"`
	SaveAbility   string                 `protobuf:"bytes,5,opt,name=save_ability,json=saveAbility,proto3" json:"save_ability,omitempty"`
	SaveDc        int32                  `protobuf:"varint,6,opt,name=save_dc,json=saveDc,proto3" json:"save_dc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovementEffect) Reset() {
	*x = MovementEffect{}
	mi := &file_seshat_spells_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovementEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovementEffect) ProtoMessage() {}

func (x *MovementEffect) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovementEffect.ProtoReflect.Descriptor instead.
func (*MovementEffect) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{9}
}

func (x *MovementEffect) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MovementEffect) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *MovementEffect) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *MovementEffect) GetAllowsSave() bool {
	if x != nil {
		return x.AllowsSave
	}
	return false
}

func (x *MovementEffect) GetSaveAbility() string {
	if x != nil {
		return x.SaveAbility
	}
	return ""
}

func (x *MovementEffect) GetSaveDc() int32 {
	if x != nil {
		return x.SaveDc
	}
	return 0
}

type SpellScaling struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScalingType   string                 `protobuf:"bytes,1,opt,name=scaling_type,json=scalingType,proto3" json:"scaling_type,omitempty"`         // "damage", "targets", "duration", "area"
	PerLevelBonus string                 `protobuf:"bytes,2,opt,name=per_level_bonus,json=perLevelBonus,proto3" json:"per_level_bonus,omitempty"` // "1d6", "+1 target", "+10 minutes"
	MaxLevel      int32                  `protobuf:"varint,3,opt,name=max_level,json=maxLevel,proto3" json:"max_level,omitempty"`                 // Maximum effective level
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpellScaling) Reset() {
	*x = SpellScaling{}
	mi := &file_seshat_spells_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellScaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellScaling) ProtoMessage() {}

func (x *SpellScaling) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellScaling.ProtoReflect.Descriptor instead.
func (*SpellScaling) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{10}
}

func (x *SpellScaling) GetScalingType() string {
	if x != nil {
		return x.ScalingType
	}
	return ""
}

func (x *SpellScaling) GetPerLevelBonus() string {
	if x != nil {
		return x.PerLevelBonus
	}
	return ""
}

func (x *SpellScaling) GetMaxLevel() int32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

// Spell queries
type GetSpellRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpellId       string                 `protobuf:"bytes,1,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	SpellName     string                 `protobuf:"bytes,2,opt,name=spell_name,json=spellName,proto3" json:"spell_name,omitempty"` // Alternative lookup
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpellRequest) Reset() {
	*x = GetSpellRequest{}
	mi := &file_seshat_spells_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpellRequest) ProtoMessage() {}

func (x *GetSpellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpellRequest.ProtoReflect.Descriptor instead.
func (*GetSpellRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{11}
}

func (x *GetSpellRequest) GetSpellId() string {
	if x != nil {
		return x.SpellId
	}
	return ""
}

func (x *GetSpellRequest) GetSpellName() string {
	if x != nil {
		return x.SpellName
	}
	return ""
}

type GetSpellResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spell         *Spell                 `protobuf:"bytes,1,opt,name=spell,proto3" json:"spell,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpellResponse) Reset() {
	*x = GetSpellResponse{}
	mi := &file_seshat_spells_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpellResponse) ProtoMessage() {}

func (x *GetSpellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpellResponse.ProtoReflect.Descriptor instead.
func (*GetSpellResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{12}
}

func (x *GetSpellResponse) GetSpell() *Spell {
	if x != nil {
		return x.Spell
	}
	return nil
}

func (x *GetSpellResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListSpellsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Levels        []int32                `protobuf:"varint,1,rep,packed,name=levels,proto3" json:"levels,omitempty"`                           // Filter by spell levels
	Schools       []SpellSchool          `protobuf:"varint,2,rep,packed,name=schools,proto3,enum=seshat.SpellSchool" json:"schools,omitempty"` // Filter by schools
	Classes       []string               `protobuf:"bytes,3,rep,name=classes,proto3" json:"classes,omitempty"`                                 // Filter by class availability
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`                                       // Filter by tags
	SearchText    string                 `protobuf:"bytes,5,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`         // Search in name/description
	Limit         int32                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor        string                 `protobuf:"bytes,7,opt,name=cursor,proto3" json:"cursor,omitempty"` // Pagination
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSpellsRequest) Reset() {
	*x = ListSpellsRequest{}
	mi := &file_seshat_spells_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSpellsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSpellsRequest) ProtoMessage() {}

func (x *ListSpellsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSpellsRequest.ProtoReflect.Descriptor instead.
func (*ListSpellsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{13}
}

func (x *ListSpellsRequest) GetLevels() []int32 {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *ListSpellsRequest) GetSchools() []SpellSchool {
	if x != nil {
		return x.Schools
	}
	return nil
}

func (x *ListSpellsRequest) GetClasses() []string {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *ListSpellsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListSpellsRequest) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *ListSpellsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListSpellsRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type ListSpellsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spells        []*Spell               `protobuf:"bytes,1,rep,name=spells,proto3" json:"spells,omitempty"`
	NextCursor    string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	TotalCount    int32                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Status        *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSpellsResponse) Reset() {
	*x = ListSpellsResponse{}
	mi := &file_seshat_spells_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSpellsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSpellsResponse) ProtoMessage() {}

func (x *ListSpellsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSpellsResponse.ProtoReflect.Descriptor instead.
func (*ListSpellsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{14}
}

func (x *ListSpellsResponse) GetSpells() []*Spell {
	if x != nil {
		return x.Spells
	}
	return nil
}

func (x *ListSpellsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *ListSpellsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListSpellsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateCustomSpellRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Spell           *Spell                 `protobuf:"bytes,1,opt,name=spell,proto3" json:"spell,omitempty"`
	CreatorEntityId string                 `protobuf:"bytes,2,opt,name=creator_entity_id,json=creatorEntityId,proto3" json:"creator_entity_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateCustomSpellRequest) Reset() {
	*x = CreateCustomSpellRequest{}
	mi := &file_seshat_spells_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCustomSpellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomSpellRequest) ProtoMessage() {}

func (x *CreateCustomSpellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomSpellRequest.ProtoReflect.Descriptor instead.
func (*CreateCustomSpellRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{15}
}

func (x *CreateCustomSpellRequest) GetSpell() *Spell {
	if x != nil {
		return x.Spell
	}
	return nil
}

func (x *CreateCustomSpellRequest) GetCreatorEntityId() string {
	if x != nil {
		return x.CreatorEntityId
	}
	return ""
}

type CreateCustomSpellResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedSpell  *Spell                 `protobuf:"bytes,1,opt,name=created_spell,json=createdSpell,proto3" json:"created_spell,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCustomSpellResponse) Reset() {
	*x = CreateCustomSpellResponse{}
	mi := &file_seshat_spells_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCustomSpellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomSpellResponse) ProtoMessage() {}

func (x *CreateCustomSpellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomSpellResponse.ProtoReflect.Descriptor instead.
func (*CreateCustomSpellResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{16}
}

func (x *CreateCustomSpellResponse) GetCreatedSpell() *Spell {
	if x != nil {
		return x.CreatedSpell
	}
	return nil
}

func (x *CreateCustomSpellResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Spell casting
type CastSpellRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CasterEntityId  string                 `protobuf:"bytes,1,opt,name=caster_entity_id,json=casterEntityId,proto3" json:"caster_entity_id,omitempty"`
	SpellId         string                 `protobuf:"bytes,2,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	CastLevel       int32                  `protobuf:"varint,3,opt,name=cast_level,json=castLevel,proto3" json:"cast_level,omitempty"` // Level to cast at (for upcasting)
	TargetEntityIds []string               `protobuf:"bytes,4,rep,name=target_entity_ids,json=targetEntityIds,proto3" json:"target_entity_ids,omitempty"`
	TargetPosition  *Position              `protobuf:"bytes,5,opt,name=target_position,json=targetPosition,proto3" json:"target_position,omitempty"`                                                                           // For area spells
	CastingOptions  map[string]string      `protobuf:"bytes,6,rep,name=casting_options,json=castingOptions,proto3" json:"casting_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional casting parameters
	UseSpellSlot    bool                   `protobuf:"varint,7,opt,name=use_spell_slot,json=useSpellSlot,proto3" json:"use_spell_slot,omitempty"`                                                                              // False for cantrips, rituals
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CastSpellRequest) Reset() {
	*x = CastSpellRequest{}
	mi := &file_seshat_spells_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CastSpellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastSpellRequest) ProtoMessage() {}

func (x *CastSpellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastSpellRequest.ProtoReflect.Descriptor instead.
func (*CastSpellRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{17}
}

func (x *CastSpellRequest) GetCasterEntityId() string {
	if x != nil {
		return x.CasterEntityId
	}
	return ""
}

func (x *CastSpellRequest) GetSpellId() string {
	if x != nil {
		return x.SpellId
	}
	return ""
}

func (x *CastSpellRequest) GetCastLevel() int32 {
	if x != nil {
		return x.CastLevel
	}
	return 0
}

func (x *CastSpellRequest) GetTargetEntityIds() []string {
	if x != nil {
		return x.TargetEntityIds
	}
	return nil
}

func (x *CastSpellRequest) GetTargetPosition() *Position {
	if x != nil {
		return x.TargetPosition
	}
	return nil
}

func (x *CastSpellRequest) GetCastingOptions() map[string]string {
	if x != nil {
		return x.CastingOptions
	}
	return nil
}

func (x *CastSpellRequest) GetUseSpellSlot() bool {
	if x != nil {
		return x.UseSpellSlot
	}
	return false
}

type CastSpellResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Result                 *SpellCastResult       `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	AppliedEffects         []*SpellEffect         `protobuf:"bytes,2,rep,name=applied_effects,json=appliedEffects,proto3" json:"applied_effects,omitempty"`
	UpdatedSpellSlots      *ResourcePool          `protobuf:"bytes,3,opt,name=updated_spell_slots,json=updatedSpellSlots,proto3" json:"updated_spell_slots,omitempty"`              // If spell slot was used
	ConcentrationCondition *Condition             `protobuf:"bytes,4,opt,name=concentration_condition,json=concentrationCondition,proto3" json:"concentration_condition,omitempty"` // If spell requires concentration
	Status                 *Result                `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CastSpellResponse) Reset() {
	*x = CastSpellResponse{}
	mi := &file_seshat_spells_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CastSpellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastSpellResponse) ProtoMessage() {}

func (x *CastSpellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastSpellResponse.ProtoReflect.Descriptor instead.
func (*CastSpellResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{18}
}

func (x *CastSpellResponse) GetResult() *SpellCastResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CastSpellResponse) GetAppliedEffects() []*SpellEffect {
	if x != nil {
		return x.AppliedEffects
	}
	return nil
}

func (x *CastSpellResponse) GetUpdatedSpellSlots() *ResourcePool {
	if x != nil {
		return x.UpdatedSpellSlots
	}
	return nil
}

func (x *CastSpellResponse) GetConcentrationCondition() *Condition {
	if x != nil {
		return x.ConcentrationCondition
	}
	return nil
}

func (x *CastSpellResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type SpellCastResult struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Success           bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	FailureReason     string                 `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"` // Why casting failed
	SpellCast         *Spell                 `protobuf:"bytes,3,opt,name=spell_cast,json=spellCast,proto3" json:"spell_cast,omitempty"`
	ActualCastLevel   int32                  `protobuf:"varint,4,opt,name=actual_cast_level,json=actualCastLevel,proto3" json:"actual_cast_level,omitempty"`
	AffectedEntityIds []string               `protobuf:"bytes,5,rep,name=affected_entity_ids,json=affectedEntityIds,proto3" json:"affected_entity_ids,omitempty"`
	AffectedPositions []*Position            `protobuf:"bytes,6,rep,name=affected_positions,json=affectedPositions,proto3" json:"affected_positions,omitempty"`
	CastTimestamp     int64                  `protobuf:"varint,7,opt,name=cast_timestamp,json=castTimestamp,proto3" json:"cast_timestamp,omitempty"`
	CastId            string                 `protobuf:"bytes,8,opt,name=cast_id,json=castId,proto3" json:"cast_id,omitempty"` // Unique identifier for this casting
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SpellCastResult) Reset() {
	*x = SpellCastResult{}
	mi := &file_seshat_spells_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellCastResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellCastResult) ProtoMessage() {}

func (x *SpellCastResult) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellCastResult.ProtoReflect.Descriptor instead.
func (*SpellCastResult) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{19}
}

func (x *SpellCastResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SpellCastResult) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *SpellCastResult) GetSpellCast() *Spell {
	if x != nil {
		return x.SpellCast
	}
	return nil
}

func (x *SpellCastResult) GetActualCastLevel() int32 {
	if x != nil {
		return x.ActualCastLevel
	}
	return 0
}

func (x *SpellCastResult) GetAffectedEntityIds() []string {
	if x != nil {
		return x.AffectedEntityIds
	}
	return nil
}

func (x *SpellCastResult) GetAffectedPositions() []*Position {
	if x != nil {
		return x.AffectedPositions
	}
	return nil
}

func (x *SpellCastResult) GetCastTimestamp() int64 {
	if x != nil {
		return x.CastTimestamp
	}
	return 0
}

func (x *SpellCastResult) GetCastId() string {
	if x != nil {
		return x.CastId
	}
	return ""
}

type CanCastSpellRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CasterEntityId string                 `protobuf:"bytes,1,opt,name=caster_entity_id,json=casterEntityId,proto3" json:"caster_entity_id,omitempty"`
	SpellId        string                 `protobuf:"bytes,2,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	DesiredLevel   int32                  `protobuf:"varint,3,opt,name=desired_level,json=desiredLevel,proto3" json:"desired_level,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CanCastSpellRequest) Reset() {
	*x = CanCastSpellRequest{}
	mi := &file_seshat_spells_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanCastSpellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanCastSpellRequest) ProtoMessage() {}

func (x *CanCastSpellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanCastSpellRequest.ProtoReflect.Descriptor instead.
func (*CanCastSpellRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{20}
}

func (x *CanCastSpellRequest) GetCasterEntityId() string {
	if x != nil {
		return x.CasterEntityId
	}
	return ""
}

func (x *CanCastSpellRequest) GetSpellId() string {
	if x != nil {
		return x.SpellId
	}
	return ""
}

func (x *CanCastSpellRequest) GetDesiredLevel() int32 {
	if x != nil {
		return x.DesiredLevel
	}
	return 0
}

type CanCastSpellResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CanCast            bool                   `protobuf:"varint,1,opt,name=can_cast,json=canCast,proto3" json:"can_cast,omitempty"`
	RequirementsNotMet []string               `protobuf:"bytes,2,rep,name=requirements_not_met,json=requirementsNotMet,proto3" json:"requirements_not_met,omitempty"` // What's preventing casting
	AvailableLevels    []int32                `protobuf:"varint,3,rep,packed,name=available_levels,json=availableLevels,proto3" json:"available_levels,omitempty"`    // Levels this spell can be cast at
	Status             *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CanCastSpellResponse) Reset() {
	*x = CanCastSpellResponse{}
	mi := &file_seshat_spells_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanCastSpellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanCastSpellResponse) ProtoMessage() {}

func (x *CanCastSpellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanCastSpellResponse.ProtoReflect.Descriptor instead.
func (*CanCastSpellResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{21}
}

func (x *CanCastSpellResponse) GetCanCast() bool {
	if x != nil {
		return x.CanCast
	}
	return false
}

func (x *CanCastSpellResponse) GetRequirementsNotMet() []string {
	if x != nil {
		return x.RequirementsNotMet
	}
	return nil
}

func (x *CanCastSpellResponse) GetAvailableLevels() []int32 {
	if x != nil {
		return x.AvailableLevels
	}
	return nil
}

func (x *CanCastSpellResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetCastingOptionsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CasterEntityId string                 `protobuf:"bytes,1,opt,name=caster_entity_id,json=casterEntityId,proto3" json:"caster_entity_id,omitempty"`
	SpellId        string                 `protobuf:"bytes,2,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetCastingOptionsRequest) Reset() {
	*x = GetCastingOptionsRequest{}
	mi := &file_seshat_spells_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCastingOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCastingOptionsRequest) ProtoMessage() {}

func (x *GetCastingOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCastingOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetCastingOptionsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{22}
}

func (x *GetCastingOptionsRequest) GetCasterEntityId() string {
	if x != nil {
		return x.CasterEntityId
	}
	return ""
}

func (x *GetCastingOptionsRequest) GetSpellId() string {
	if x != nil {
		return x.SpellId
	}
	return ""
}

type GetCastingOptionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Options       []*CastingOption       `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCastingOptionsResponse) Reset() {
	*x = GetCastingOptionsResponse{}
	mi := &file_seshat_spells_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCastingOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCastingOptionsResponse) ProtoMessage() {}

func (x *GetCastingOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCastingOptionsResponse.ProtoReflect.Descriptor instead.
func (*GetCastingOptionsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{23}
}

func (x *GetCastingOptionsResponse) GetOptions() []*CastingOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *GetCastingOptionsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type CastingOption struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Level          int32                  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	AvailableSlots int32                  `protobuf:"varint,2,opt,name=available_slots,json=availableSlots,proto3" json:"available_slots,omitempty"`
	IsRitual       bool                   `protobuf:"varint,3,opt,name=is_ritual,json=isRitual,proto3" json:"is_ritual,omitempty"`
	Description    string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                                                   // "2nd level slot", "ritual casting", etc.
	Effects        map[string]string      `protobuf:"bytes,5,rep,name=effects,proto3" json:"effects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // How casting at this level differs
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CastingOption) Reset() {
	*x = CastingOption{}
	mi := &file_seshat_spells_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CastingOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastingOption) ProtoMessage() {}

func (x *CastingOption) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastingOption.ProtoReflect.Descriptor instead.
func (*CastingOption) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{24}
}

func (x *CastingOption) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CastingOption) GetAvailableSlots() int32 {
	if x != nil {
		return x.AvailableSlots
	}
	return 0
}

func (x *CastingOption) GetIsRitual() bool {
	if x != nil {
		return x.IsRitual
	}
	return false
}

func (x *CastingOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CastingOption) GetEffects() map[string]string {
	if x != nil {
		return x.Effects
	}
	return nil
}

// Spell slots
type GetSpellSlotsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpellSlotsRequest) Reset() {
	*x = GetSpellSlotsRequest{}
	mi := &file_seshat_spells_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpellSlotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpellSlotsRequest) ProtoMessage() {}

func (x *GetSpellSlotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpellSlotsRequest.ProtoReflect.Descriptor instead.
func (*GetSpellSlotsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{25}
}

func (x *GetSpellSlotsRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type GetSpellSlotsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SlotTable     *SpellSlotTable        `protobuf:"bytes,1,opt,name=slot_table,json=slotTable,proto3" json:"slot_table,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpellSlotsResponse) Reset() {
	*x = GetSpellSlotsResponse{}
	mi := &file_seshat_spells_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpellSlotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpellSlotsResponse) ProtoMessage() {}

func (x *GetSpellSlotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpellSlotsResponse.ProtoReflect.Descriptor instead.
func (*GetSpellSlotsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{26}
}

func (x *GetSpellSlotsResponse) GetSlotTable() *SpellSlotTable {
	if x != nil {
		return x.SlotTable
	}
	return nil
}

func (x *GetSpellSlotsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type SpellSlotTable struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	EntityId              string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Levels                []*SpellSlotLevel      `protobuf:"bytes,2,rep,name=levels,proto3" json:"levels,omitempty"`
	TotalSlots            int32                  `protobuf:"varint,3,opt,name=total_slots,json=totalSlots,proto3" json:"total_slots,omitempty"`
	UsedSlots             int32                  `protobuf:"varint,4,opt,name=used_slots,json=usedSlots,proto3" json:"used_slots,omitempty"`
	LastLongRestTimestamp int64                  `protobuf:"varint,5,opt,name=last_long_rest_timestamp,json=lastLongRestTimestamp,proto3" json:"last_long_rest_timestamp,omitempty"` // When slots were last restored
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SpellSlotTable) Reset() {
	*x = SpellSlotTable{}
	mi := &file_seshat_spells_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellSlotTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellSlotTable) ProtoMessage() {}

func (x *SpellSlotTable) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellSlotTable.ProtoReflect.Descriptor instead.
func (*SpellSlotTable) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{27}
}

func (x *SpellSlotTable) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *SpellSlotTable) GetLevels() []*SpellSlotLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *SpellSlotTable) GetTotalSlots() int32 {
	if x != nil {
		return x.TotalSlots
	}
	return 0
}

func (x *SpellSlotTable) GetUsedSlots() int32 {
	if x != nil {
		return x.UsedSlots
	}
	return 0
}

func (x *SpellSlotTable) GetLastLongRestTimestamp() int64 {
	if x != nil {
		return x.LastLongRestTimestamp
	}
	return 0
}

type SpellSlotLevel struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Level          int32                  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"` // 1-9
	TotalSlots     int32                  `protobuf:"varint,2,opt,name=total_slots,json=totalSlots,proto3" json:"total_slots,omitempty"`
	UsedSlots      int32                  `protobuf:"varint,3,opt,name=used_slots,json=usedSlots,proto3" json:"used_slots,omitempty"`
	AvailableSlots int32                  `protobuf:"varint,4,opt,name=available_slots,json=availableSlots,proto3" json:"available_slots,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SpellSlotLevel) Reset() {
	*x = SpellSlotLevel{}
	mi := &file_seshat_spells_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellSlotLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellSlotLevel) ProtoMessage() {}

func (x *SpellSlotLevel) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellSlotLevel.ProtoReflect.Descriptor instead.
func (*SpellSlotLevel) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{28}
}

func (x *SpellSlotLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SpellSlotLevel) GetTotalSlots() int32 {
	if x != nil {
		return x.TotalSlots
	}
	return 0
}

func (x *SpellSlotLevel) GetUsedSlots() int32 {
	if x != nil {
		return x.UsedSlots
	}
	return 0
}

func (x *SpellSlotLevel) GetAvailableSlots() int32 {
	if x != nil {
		return x.AvailableSlots
	}
	return 0
}

type UpdateSpellSlotsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Updates       []*SpellSlotUpdate     `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"` // "level_up", "long_rest", "spell_cast"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSpellSlotsRequest) Reset() {
	*x = UpdateSpellSlotsRequest{}
	mi := &file_seshat_spells_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSpellSlotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSpellSlotsRequest) ProtoMessage() {}

func (x *UpdateSpellSlotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSpellSlotsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSpellSlotsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateSpellSlotsRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *UpdateSpellSlotsRequest) GetUpdates() []*SpellSlotUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateSpellSlotsRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateSpellSlotsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpdatedTable  *SpellSlotTable        `protobuf:"bytes,1,opt,name=updated_table,json=updatedTable,proto3" json:"updated_table,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSpellSlotsResponse) Reset() {
	*x = UpdateSpellSlotsResponse{}
	mi := &file_seshat_spells_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSpellSlotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSpellSlotsResponse) ProtoMessage() {}

func (x *UpdateSpellSlotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSpellSlotsResponse.ProtoReflect.Descriptor instead.
func (*UpdateSpellSlotsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateSpellSlotsResponse) GetUpdatedTable() *SpellSlotTable {
	if x != nil {
		return x.UpdatedTable
	}
	return nil
}

func (x *UpdateSpellSlotsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type SpellSlotUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         int32                  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	NewTotal      int32                  `protobuf:"varint,2,opt,name=new_total,json=newTotal,proto3" json:"new_total,omitempty"`
	UsedChange    int32                  `protobuf:"varint,3,opt,name=used_change,json=usedChange,proto3" json:"used_change,omitempty"` // +1 to use slot, -1 to restore
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpellSlotUpdate) Reset() {
	*x = SpellSlotUpdate{}
	mi := &file_seshat_spells_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellSlotUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellSlotUpdate) ProtoMessage() {}

func (x *SpellSlotUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellSlotUpdate.ProtoReflect.Descriptor instead.
func (*SpellSlotUpdate) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{31}
}

func (x *SpellSlotUpdate) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SpellSlotUpdate) GetNewTotal() int32 {
	if x != nil {
		return x.NewTotal
	}
	return 0
}

func (x *SpellSlotUpdate) GetUsedChange() int32 {
	if x != nil {
		return x.UsedChange
	}
	return 0
}

// Spell preparation
type GetPreparedSpellsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPreparedSpellsRequest) Reset() {
	*x = GetPreparedSpellsRequest{}
	mi := &file_seshat_spells_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreparedSpellsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreparedSpellsRequest) ProtoMessage() {}

func (x *GetPreparedSpellsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreparedSpellsRequest.ProtoReflect.Descriptor instead.
func (*GetPreparedSpellsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{32}
}

func (x *GetPreparedSpellsRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type GetPreparedSpellsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PreparedSpells  []*PreparedSpell       `protobuf:"bytes,1,rep,name=prepared_spells,json=preparedSpells,proto3" json:"prepared_spells,omitempty"`
	MaxPrepared     int32                  `protobuf:"varint,2,opt,name=max_prepared,json=maxPrepared,proto3" json:"max_prepared,omitempty"`
	CurrentPrepared int32                  `protobuf:"varint,3,opt,name=current_prepared,json=currentPrepared,proto3" json:"current_prepared,omitempty"`
	Status          *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetPreparedSpellsResponse) Reset() {
	*x = GetPreparedSpellsResponse{}
	mi := &file_seshat_spells_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreparedSpellsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreparedSpellsResponse) ProtoMessage() {}

func (x *GetPreparedSpellsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreparedSpellsResponse.ProtoReflect.Descriptor instead.
func (*GetPreparedSpellsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{33}
}

func (x *GetPreparedSpellsResponse) GetPreparedSpells() []*PreparedSpell {
	if x != nil {
		return x.PreparedSpells
	}
	return nil
}

func (x *GetPreparedSpellsResponse) GetMaxPrepared() int32 {
	if x != nil {
		return x.MaxPrepared
	}
	return 0
}

func (x *GetPreparedSpellsResponse) GetCurrentPrepared() int32 {
	if x != nil {
		return x.CurrentPrepared
	}
	return 0
}

func (x *GetPreparedSpellsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type PreparedSpell struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Spell             *Spell                 `protobuf:"bytes,1,opt,name=spell,proto3" json:"spell,omitempty"`
	PreparedTimestamp int64                  `protobuf:"varint,2,opt,name=prepared_timestamp,json=preparedTimestamp,proto3" json:"prepared_timestamp,omitempty"`
	AlwaysPrepared    bool                   `protobuf:"varint,3,opt,name=always_prepared,json=alwaysPrepared,proto3" json:"always_prepared,omitempty"`         // Domain spells, etc.
	PreparationSource string                 `protobuf:"bytes,4,opt,name=preparation_source,json=preparationSource,proto3" json:"preparation_source,omitempty"` // "domain", "class", "racial", etc.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PreparedSpell) Reset() {
	*x = PreparedSpell{}
	mi := &file_seshat_spells_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreparedSpell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreparedSpell) ProtoMessage() {}

func (x *PreparedSpell) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreparedSpell.ProtoReflect.Descriptor instead.
func (*PreparedSpell) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{34}
}

func (x *PreparedSpell) GetSpell() *Spell {
	if x != nil {
		return x.Spell
	}
	return nil
}

func (x *PreparedSpell) GetPreparedTimestamp() int64 {
	if x != nil {
		return x.PreparedTimestamp
	}
	return 0
}

func (x *PreparedSpell) GetAlwaysPrepared() bool {
	if x != nil {
		return x.AlwaysPrepared
	}
	return false
}

func (x *PreparedSpell) GetPreparationSource() string {
	if x != nil {
		return x.PreparationSource
	}
	return ""
}

type PrepareSpellRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	SpellId       string                 `protobuf:"bytes,2,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareSpellRequest) Reset() {
	*x = PrepareSpellRequest{}
	mi := &file_seshat_spells_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareSpellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSpellRequest) ProtoMessage() {}

func (x *PrepareSpellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSpellRequest.ProtoReflect.Descriptor instead.
func (*PrepareSpellRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{35}
}

func (x *PrepareSpellRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *PrepareSpellRequest) GetSpellId() string {
	if x != nil {
		return x.SpellId
	}
	return ""
}

type PrepareSpellResponse struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	PreparedSpell             *PreparedSpell         `protobuf:"bytes,1,opt,name=prepared_spell,json=preparedSpell,proto3" json:"prepared_spell,omitempty"`
	RemainingPreparationSlots int32                  `protobuf:"varint,2,opt,name=remaining_preparation_slots,json=remainingPreparationSlots,proto3" json:"remaining_preparation_slots,omitempty"`
	Status                    *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *PrepareSpellResponse) Reset() {
	*x = PrepareSpellResponse{}
	mi := &file_seshat_spells_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareSpellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSpellResponse) ProtoMessage() {}

func (x *PrepareSpellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSpellResponse.ProtoReflect.Descriptor instead.
func (*PrepareSpellResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{36}
}

func (x *PrepareSpellResponse) GetPreparedSpell() *PreparedSpell {
	if x != nil {
		return x.PreparedSpell
	}
	return nil
}

func (x *PrepareSpellResponse) GetRemainingPreparationSlots() int32 {
	if x != nil {
		return x.RemainingPreparationSlots
	}
	return 0
}

func (x *PrepareSpellResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type UnprepareSpellRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	SpellId       string                 `protobuf:"bytes,2,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnprepareSpellRequest) Reset() {
	*x = UnprepareSpellRequest{}
	mi := &file_seshat_spells_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnprepareSpellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprepareSpellRequest) ProtoMessage() {}

func (x *UnprepareSpellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprepareSpellRequest.ProtoReflect.Descriptor instead.
func (*UnprepareSpellRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{37}
}

func (x *UnprepareSpellRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *UnprepareSpellRequest) GetSpellId() string {
	if x != nil {
		return x.SpellId
	}
	return ""
}

type UnprepareSpellResponse struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	WasPrepared               bool                   `protobuf:"varint,1,opt,name=was_prepared,json=wasPrepared,proto3" json:"was_prepared,omitempty"`
	AvailablePreparationSlots int32                  `protobuf:"varint,2,opt,name=available_preparation_slots,json=availablePreparationSlots,proto3" json:"available_preparation_slots,omitempty"`
	Status                    *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *UnprepareSpellResponse) Reset() {
	*x = UnprepareSpellResponse{}
	mi := &file_seshat_spells_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnprepareSpellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprepareSpellResponse) ProtoMessage() {}

func (x *UnprepareSpellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprepareSpellResponse.ProtoReflect.Descriptor instead.
func (*UnprepareSpellResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{38}
}

func (x *UnprepareSpellResponse) GetWasPrepared() bool {
	if x != nil {
		return x.WasPrepared
	}
	return false
}

func (x *UnprepareSpellResponse) GetAvailablePreparationSlots() int32 {
	if x != nil {
		return x.AvailablePreparationSlots
	}
	return 0
}

func (x *UnprepareSpellResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Concentration management
type StartConcentrationRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CasterEntityId string                 `protobuf:"bytes,1,opt,name=caster_entity_id,json=casterEntityId,proto3" json:"caster_entity_id,omitempty"`
	SpellCastId    string                 `protobuf:"bytes,2,opt,name=spell_cast_id,json=spellCastId,proto3" json:"spell_cast_id,omitempty"` // Links to specific spell casting
	Spell          *Spell                 `protobuf:"bytes,3,opt,name=spell,proto3" json:"spell,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StartConcentrationRequest) Reset() {
	*x = StartConcentrationRequest{}
	mi := &file_seshat_spells_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartConcentrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartConcentrationRequest) ProtoMessage() {}

func (x *StartConcentrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartConcentrationRequest.ProtoReflect.Descriptor instead.
func (*StartConcentrationRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{39}
}

func (x *StartConcentrationRequest) GetCasterEntityId() string {
	if x != nil {
		return x.CasterEntityId
	}
	return ""
}

func (x *StartConcentrationRequest) GetSpellCastId() string {
	if x != nil {
		return x.SpellCastId
	}
	return ""
}

func (x *StartConcentrationRequest) GetSpell() *Spell {
	if x != nil {
		return x.Spell
	}
	return nil
}

type StartConcentrationResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ConcentrationCondition *Condition             `protobuf:"bytes,1,opt,name=concentration_condition,json=concentrationCondition,proto3" json:"concentration_condition,omitempty"` // The concentration condition applied
	EndedConcentration     *Condition             `protobuf:"bytes,2,opt,name=ended_concentration,json=endedConcentration,proto3" json:"ended_concentration,omitempty"`             // Previous concentration that ended
	Status                 *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StartConcentrationResponse) Reset() {
	*x = StartConcentrationResponse{}
	mi := &file_seshat_spells_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartConcentrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartConcentrationResponse) ProtoMessage() {}

func (x *StartConcentrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartConcentrationResponse.ProtoReflect.Descriptor instead.
func (*StartConcentrationResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{40}
}

func (x *StartConcentrationResponse) GetConcentrationCondition() *Condition {
	if x != nil {
		return x.ConcentrationCondition
	}
	return nil
}

func (x *StartConcentrationResponse) GetEndedConcentration() *Condition {
	if x != nil {
		return x.EndedConcentration
	}
	return nil
}

func (x *StartConcentrationResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type EndConcentrationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"` // "voluntary", "failed_save", "incapacitated"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndConcentrationRequest) Reset() {
	*x = EndConcentrationRequest{}
	mi := &file_seshat_spells_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndConcentrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndConcentrationRequest) ProtoMessage() {}

func (x *EndConcentrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndConcentrationRequest.ProtoReflect.Descriptor instead.
func (*EndConcentrationRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{41}
}

func (x *EndConcentrationRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EndConcentrationRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type EndConcentrationResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EndedCondition *Condition             `protobuf:"bytes,1,opt,name=ended_condition,json=endedCondition,proto3" json:"ended_condition,omitempty"`
	EndedEffects   []*SpellEffect         `protobuf:"bytes,2,rep,name=ended_effects,json=endedEffects,proto3" json:"ended_effects,omitempty"`
	Status         *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EndConcentrationResponse) Reset() {
	*x = EndConcentrationResponse{}
	mi := &file_seshat_spells_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndConcentrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndConcentrationResponse) ProtoMessage() {}

func (x *EndConcentrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndConcentrationResponse.ProtoReflect.Descriptor instead.
func (*EndConcentrationResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{42}
}

func (x *EndConcentrationResponse) GetEndedCondition() *Condition {
	if x != nil {
		return x.EndedCondition
	}
	return nil
}

func (x *EndConcentrationResponse) GetEndedEffects() []*SpellEffect {
	if x != nil {
		return x.EndedEffects
	}
	return nil
}

func (x *EndConcentrationResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetConcentrationStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConcentrationStatusRequest) Reset() {
	*x = GetConcentrationStatusRequest{}
	mi := &file_seshat_spells_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConcentrationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConcentrationStatusRequest) ProtoMessage() {}

func (x *GetConcentrationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConcentrationStatusRequest.ProtoReflect.Descriptor instead.
func (*GetConcentrationStatusRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{43}
}

func (x *GetConcentrationStatusRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type GetConcentrationStatusResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	IsConcentrating        bool                   `protobuf:"varint,1,opt,name=is_concentrating,json=isConcentrating,proto3" json:"is_concentrating,omitempty"`
	ConcentrationCondition *Condition             `protobuf:"bytes,2,opt,name=concentration_condition,json=concentrationCondition,proto3" json:"concentration_condition,omitempty"`
	ConcentrationSpell     *Spell                 `protobuf:"bytes,3,opt,name=concentration_spell,json=concentrationSpell,proto3" json:"concentration_spell,omitempty"`
	ConcentrationStarted   int64                  `protobuf:"varint,4,opt,name=concentration_started,json=concentrationStarted,proto3" json:"concentration_started,omitempty"`
	Status                 *Result                `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetConcentrationStatusResponse) Reset() {
	*x = GetConcentrationStatusResponse{}
	mi := &file_seshat_spells_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConcentrationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConcentrationStatusResponse) ProtoMessage() {}

func (x *GetConcentrationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConcentrationStatusResponse.ProtoReflect.Descriptor instead.
func (*GetConcentrationStatusResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{44}
}

func (x *GetConcentrationStatusResponse) GetIsConcentrating() bool {
	if x != nil {
		return x.IsConcentrating
	}
	return false
}

func (x *GetConcentrationStatusResponse) GetConcentrationCondition() *Condition {
	if x != nil {
		return x.ConcentrationCondition
	}
	return nil
}

func (x *GetConcentrationStatusResponse) GetConcentrationSpell() *Spell {
	if x != nil {
		return x.ConcentrationSpell
	}
	return nil
}

func (x *GetConcentrationStatusResponse) GetConcentrationStarted() int64 {
	if x != nil {
		return x.ConcentrationStarted
	}
	return 0
}

func (x *GetConcentrationStatusResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type MakeConcentrationCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	DamageTaken   int32                  `protobuf:"varint,2,opt,name=damage_taken,json=damageTaken,proto3" json:"damage_taken,omitempty"`                                                    // Trigger for concentration check
	DcOverride    int32                  `protobuf:"varint,3,opt,name=dc_override,json=dcOverride,proto3" json:"dc_override,omitempty"`                                                       // Override default DC calculation
	Modifiers     map[string]int32       `protobuf:"bytes,4,rep,name=modifiers,proto3" json:"modifiers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Bonuses/penalties to the check
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MakeConcentrationCheckRequest) Reset() {
	*x = MakeConcentrationCheckRequest{}
	mi := &file_seshat_spells_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeConcentrationCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeConcentrationCheckRequest) ProtoMessage() {}

func (x *MakeConcentrationCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeConcentrationCheckRequest.ProtoReflect.Descriptor instead.
func (*MakeConcentrationCheckRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{45}
}

func (x *MakeConcentrationCheckRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *MakeConcentrationCheckRequest) GetDamageTaken() int32 {
	if x != nil {
		return x.DamageTaken
	}
	return 0
}

func (x *MakeConcentrationCheckRequest) GetDcOverride() int32 {
	if x != nil {
		return x.DcOverride
	}
	return 0
}

func (x *MakeConcentrationCheckRequest) GetModifiers() map[string]int32 {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

type MakeConcentrationCheckResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CheckPassed             bool                   `protobuf:"varint,1,opt,name=check_passed,json=checkPassed,proto3" json:"check_passed,omitempty"`
	RollResult              int32                  `protobuf:"varint,2,opt,name=roll_result,json=rollResult,proto3" json:"roll_result,omitempty"`
	Dc                      int32                  `protobuf:"varint,3,opt,name=dc,proto3" json:"dc,omitempty"`
	TotalModifier           int32                  `protobuf:"varint,4,opt,name=total_modifier,json=totalModifier,proto3" json:"total_modifier,omitempty"`
	ConcentrationMaintained bool                   `protobuf:"varint,5,opt,name=concentration_maintained,json=concentrationMaintained,proto3" json:"concentration_maintained,omitempty"`
	Status                  *Result                `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MakeConcentrationCheckResponse) Reset() {
	*x = MakeConcentrationCheckResponse{}
	mi := &file_seshat_spells_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeConcentrationCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeConcentrationCheckResponse) ProtoMessage() {}

func (x *MakeConcentrationCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeConcentrationCheckResponse.ProtoReflect.Descriptor instead.
func (*MakeConcentrationCheckResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{46}
}

func (x *MakeConcentrationCheckResponse) GetCheckPassed() bool {
	if x != nil {
		return x.CheckPassed
	}
	return false
}

func (x *MakeConcentrationCheckResponse) GetRollResult() int32 {
	if x != nil {
		return x.RollResult
	}
	return 0
}

func (x *MakeConcentrationCheckResponse) GetDc() int32 {
	if x != nil {
		return x.Dc
	}
	return 0
}

func (x *MakeConcentrationCheckResponse) GetTotalModifier() int32 {
	if x != nil {
		return x.TotalModifier
	}
	return 0
}

func (x *MakeConcentrationCheckResponse) GetConcentrationMaintained() bool {
	if x != nil {
		return x.ConcentrationMaintained
	}
	return false
}

func (x *MakeConcentrationCheckResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Spell targeting and effects
type GetSpellTargetsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SpellId         string                 `protobuf:"bytes,1,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	CasterEntityId  string                 `protobuf:"bytes,2,opt,name=caster_entity_id,json=casterEntityId,proto3" json:"caster_entity_id,omitempty"`
	CastingPosition *Position              `protobuf:"bytes,3,opt,name=casting_position,json=castingPosition,proto3" json:"casting_position,omitempty"`
	TargetPosition  *Position              `protobuf:"bytes,4,opt,name=target_position,json=targetPosition,proto3" json:"target_position,omitempty"` // For area spells
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetSpellTargetsRequest) Reset() {
	*x = GetSpellTargetsRequest{}
	mi := &file_seshat_spells_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpellTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpellTargetsRequest) ProtoMessage() {}

func (x *GetSpellTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpellTargetsRequest.ProtoReflect.Descriptor instead.
func (*GetSpellTargetsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{47}
}

func (x *GetSpellTargetsRequest) GetSpellId() string {
	if x != nil {
		return x.SpellId
	}
	return ""
}

func (x *GetSpellTargetsRequest) GetCasterEntityId() string {
	if x != nil {
		return x.CasterEntityId
	}
	return ""
}

func (x *GetSpellTargetsRequest) GetCastingPosition() *Position {
	if x != nil {
		return x.CastingPosition
	}
	return nil
}

func (x *GetSpellTargetsRequest) GetTargetPosition() *Position {
	if x != nil {
		return x.TargetPosition
	}
	return nil
}

type GetSpellTargetsResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ValidTargetEntityIds []string               `protobuf:"bytes,1,rep,name=valid_target_entity_ids,json=validTargetEntityIds,proto3" json:"valid_target_entity_ids,omitempty"`
	AffectedPositions    []*Position            `protobuf:"bytes,2,rep,name=affected_positions,json=affectedPositions,proto3" json:"affected_positions,omitempty"`
	EffectiveArea        *SpellArea             `protobuf:"bytes,3,opt,name=effective_area,json=effectiveArea,proto3" json:"effective_area,omitempty"`
	TargetingWarnings    []string               `protobuf:"bytes,4,rep,name=targeting_warnings,json=targetingWarnings,proto3" json:"targeting_warnings,omitempty"` // "Allies in area", etc.
	Status               *Result                `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetSpellTargetsResponse) Reset() {
	*x = GetSpellTargetsResponse{}
	mi := &file_seshat_spells_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpellTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpellTargetsResponse) ProtoMessage() {}

func (x *GetSpellTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpellTargetsResponse.ProtoReflect.Descriptor instead.
func (*GetSpellTargetsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{48}
}

func (x *GetSpellTargetsResponse) GetValidTargetEntityIds() []string {
	if x != nil {
		return x.ValidTargetEntityIds
	}
	return nil
}

func (x *GetSpellTargetsResponse) GetAffectedPositions() []*Position {
	if x != nil {
		return x.AffectedPositions
	}
	return nil
}

func (x *GetSpellTargetsResponse) GetEffectiveArea() *SpellArea {
	if x != nil {
		return x.EffectiveArea
	}
	return nil
}

func (x *GetSpellTargetsResponse) GetTargetingWarnings() []string {
	if x != nil {
		return x.TargetingWarnings
	}
	return nil
}

func (x *GetSpellTargetsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type ApplySpellEffectsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SpellCastId     string                 `protobuf:"bytes,1,opt,name=spell_cast_id,json=spellCastId,proto3" json:"spell_cast_id,omitempty"`
	TargetEntityIds []string               `protobuf:"bytes,2,rep,name=target_entity_ids,json=targetEntityIds,proto3" json:"target_entity_ids,omitempty"`
	EffectsToApply  []*SpellEffect         `protobuf:"bytes,3,rep,name=effects_to_apply,json=effectsToApply,proto3" json:"effects_to_apply,omitempty"`
	CastLevel       int32                  `protobuf:"varint,4,opt,name=cast_level,json=castLevel,proto3" json:"cast_level,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ApplySpellEffectsRequest) Reset() {
	*x = ApplySpellEffectsRequest{}
	mi := &file_seshat_spells_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplySpellEffectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplySpellEffectsRequest) ProtoMessage() {}

func (x *ApplySpellEffectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplySpellEffectsRequest.ProtoReflect.Descriptor instead.
func (*ApplySpellEffectsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{49}
}

func (x *ApplySpellEffectsRequest) GetSpellCastId() string {
	if x != nil {
		return x.SpellCastId
	}
	return ""
}

func (x *ApplySpellEffectsRequest) GetTargetEntityIds() []string {
	if x != nil {
		return x.TargetEntityIds
	}
	return nil
}

func (x *ApplySpellEffectsRequest) GetEffectsToApply() []*SpellEffect {
	if x != nil {
		return x.EffectsToApply
	}
	return nil
}

func (x *ApplySpellEffectsRequest) GetCastLevel() int32 {
	if x != nil {
		return x.CastLevel
	}
	return 0
}

type ApplySpellEffectsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EffectResults []*SpellEffectResult   `protobuf:"bytes,1,rep,name=effect_results,json=effectResults,proto3" json:"effect_results,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplySpellEffectsResponse) Reset() {
	*x = ApplySpellEffectsResponse{}
	mi := &file_seshat_spells_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplySpellEffectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplySpellEffectsResponse) ProtoMessage() {}

func (x *ApplySpellEffectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplySpellEffectsResponse.ProtoReflect.Descriptor instead.
func (*ApplySpellEffectsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{50}
}

func (x *ApplySpellEffectsResponse) GetEffectResults() []*SpellEffectResult {
	if x != nil {
		return x.EffectResults
	}
	return nil
}

func (x *ApplySpellEffectsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type SpellEffectResult struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TargetEntityId   string                 `protobuf:"bytes,1,opt,name=target_entity_id,json=targetEntityId,proto3" json:"target_entity_id,omitempty"`
	Effect           *SpellEffect           `protobuf:"bytes,2,opt,name=effect,proto3" json:"effect,omitempty"`
	EffectSucceeded  bool                   `protobuf:"varint,3,opt,name=effect_succeeded,json=effectSucceeded,proto3" json:"effect_succeeded,omitempty"`
	DamageDealt      int32                  `protobuf:"varint,4,opt,name=damage_dealt,json=damageDealt,proto3" json:"damage_dealt,omitempty"`
	HealingDone      int32                  `protobuf:"varint,5,opt,name=healing_done,json=healingDone,proto3" json:"healing_done,omitempty"`
	ConditionApplied *Condition             `protobuf:"bytes,6,opt,name=condition_applied,json=conditionApplied,proto3" json:"condition_applied,omitempty"`
	SaveResult       string                 `protobuf:"bytes,7,opt,name=save_result,json=saveResult,proto3" json:"save_result,omitempty"` // "passed", "failed", "no_save"
	Details          map[string]string      `protobuf:"bytes,8,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SpellEffectResult) Reset() {
	*x = SpellEffectResult{}
	mi := &file_seshat_spells_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellEffectResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellEffectResult) ProtoMessage() {}

func (x *SpellEffectResult) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellEffectResult.ProtoReflect.Descriptor instead.
func (*SpellEffectResult) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{51}
}

func (x *SpellEffectResult) GetTargetEntityId() string {
	if x != nil {
		return x.TargetEntityId
	}
	return ""
}

func (x *SpellEffectResult) GetEffect() *SpellEffect {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *SpellEffectResult) GetEffectSucceeded() bool {
	if x != nil {
		return x.EffectSucceeded
	}
	return false
}

func (x *SpellEffectResult) GetDamageDealt() int32 {
	if x != nil {
		return x.DamageDealt
	}
	return 0
}

func (x *SpellEffectResult) GetHealingDone() int32 {
	if x != nil {
		return x.HealingDone
	}
	return 0
}

func (x *SpellEffectResult) GetConditionApplied() *Condition {
	if x != nil {
		return x.ConditionApplied
	}
	return nil
}

func (x *SpellEffectResult) GetSaveResult() string {
	if x != nil {
		return x.SaveResult
	}
	return ""
}

func (x *SpellEffectResult) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetSpellAreasRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SpellId        string                 `protobuf:"bytes,1,opt,name=spell_id,json=spellId,proto3" json:"spell_id,omitempty"`
	CenterPosition *Position              `protobuf:"bytes,2,opt,name=center_position,json=centerPosition,proto3" json:"center_position,omitempty"`
	RoomId         string                 `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // For line of sight calculations
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSpellAreasRequest) Reset() {
	*x = GetSpellAreasRequest{}
	mi := &file_seshat_spells_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpellAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpellAreasRequest) ProtoMessage() {}

func (x *GetSpellAreasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpellAreasRequest.ProtoReflect.Descriptor instead.
func (*GetSpellAreasRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{52}
}

func (x *GetSpellAreasRequest) GetSpellId() string {
	if x != nil {
		return x.SpellId
	}
	return ""
}

func (x *GetSpellAreasRequest) GetCenterPosition() *Position {
	if x != nil {
		return x.CenterPosition
	}
	return nil
}

func (x *GetSpellAreasRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type GetSpellAreasResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AffectedPositions []*Position            `protobuf:"bytes,1,rep,name=affected_positions,json=affectedPositions,proto3" json:"affected_positions,omitempty"`
	Area              *SpellArea             `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty"`
	BlockedPositions  []*Position            `protobuf:"bytes,3,rep,name=blocked_positions,json=blockedPositions,proto3" json:"blocked_positions,omitempty"` // Positions blocked by walls/obstacles
	Status            *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetSpellAreasResponse) Reset() {
	*x = GetSpellAreasResponse{}
	mi := &file_seshat_spells_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpellAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpellAreasResponse) ProtoMessage() {}

func (x *GetSpellAreasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpellAreasResponse.ProtoReflect.Descriptor instead.
func (*GetSpellAreasResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{53}
}

func (x *GetSpellAreasResponse) GetAffectedPositions() []*Position {
	if x != nil {
		return x.AffectedPositions
	}
	return nil
}

func (x *GetSpellAreasResponse) GetArea() *SpellArea {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *GetSpellAreasResponse) GetBlockedPositions() []*Position {
	if x != nil {
		return x.BlockedPositions
	}
	return nil
}

func (x *GetSpellAreasResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Spell tracking and history
type GetSpellHistoryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EntityId       string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Limit          int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	SinceTimestamp int64                  `protobuf:"varint,3,opt,name=since_timestamp,json=sinceTimestamp,proto3" json:"since_timestamp,omitempty"`
	SpellIds       []string               `protobuf:"bytes,4,rep,name=spell_ids,json=spellIds,proto3" json:"spell_ids,omitempty"` // Filter by specific spells
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSpellHistoryRequest) Reset() {
	*x = GetSpellHistoryRequest{}
	mi := &file_seshat_spells_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpellHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpellHistoryRequest) ProtoMessage() {}

func (x *GetSpellHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpellHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetSpellHistoryRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{54}
}

func (x *GetSpellHistoryRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *GetSpellHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSpellHistoryRequest) GetSinceTimestamp() int64 {
	if x != nil {
		return x.SinceTimestamp
	}
	return 0
}

func (x *GetSpellHistoryRequest) GetSpellIds() []string {
	if x != nil {
		return x.SpellIds
	}
	return nil
}

type GetSpellHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	History       []*SpellCastRecord     `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Status        *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpellHistoryResponse) Reset() {
	*x = GetSpellHistoryResponse{}
	mi := &file_seshat_spells_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpellHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpellHistoryResponse) ProtoMessage() {}

func (x *GetSpellHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpellHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetSpellHistoryResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{55}
}

func (x *GetSpellHistoryResponse) GetHistory() []*SpellCastRecord {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *GetSpellHistoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetSpellHistoryResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type SpellCastRecord struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	CastId               string                 `protobuf:"bytes,1,opt,name=cast_id,json=castId,proto3" json:"cast_id,omitempty"`
	Spell                *Spell                 `protobuf:"bytes,2,opt,name=spell,proto3" json:"spell,omitempty"`
	CasterEntityId       string                 `protobuf:"bytes,3,opt,name=caster_entity_id,json=casterEntityId,proto3" json:"caster_entity_id,omitempty"`
	CastLevel            int32                  `protobuf:"varint,4,opt,name=cast_level,json=castLevel,proto3" json:"cast_level,omitempty"`
	TargetEntityIds      []string               `protobuf:"bytes,5,rep,name=target_entity_ids,json=targetEntityIds,proto3" json:"target_entity_ids,omitempty"`
	WasSuccessful        bool                   `protobuf:"varint,6,opt,name=was_successful,json=wasSuccessful,proto3" json:"was_successful,omitempty"`
	CastTimestamp        int64                  `protobuf:"varint,7,opt,name=cast_timestamp,json=castTimestamp,proto3" json:"cast_timestamp,omitempty"`
	DurationEndTimestamp int64                  `protobuf:"varint,8,opt,name=duration_end_timestamp,json=durationEndTimestamp,proto3" json:"duration_end_timestamp,omitempty"` // When spell effects ended
	Outcome              string                 `protobuf:"bytes,9,opt,name=outcome,proto3" json:"outcome,omitempty"`                                                          // Brief description of results
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SpellCastRecord) Reset() {
	*x = SpellCastRecord{}
	mi := &file_seshat_spells_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellCastRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellCastRecord) ProtoMessage() {}

func (x *SpellCastRecord) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellCastRecord.ProtoReflect.Descriptor instead.
func (*SpellCastRecord) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{56}
}

func (x *SpellCastRecord) GetCastId() string {
	if x != nil {
		return x.CastId
	}
	return ""
}

func (x *SpellCastRecord) GetSpell() *Spell {
	if x != nil {
		return x.Spell
	}
	return nil
}

func (x *SpellCastRecord) GetCasterEntityId() string {
	if x != nil {
		return x.CasterEntityId
	}
	return ""
}

func (x *SpellCastRecord) GetCastLevel() int32 {
	if x != nil {
		return x.CastLevel
	}
	return 0
}

func (x *SpellCastRecord) GetTargetEntityIds() []string {
	if x != nil {
		return x.TargetEntityIds
	}
	return nil
}

func (x *SpellCastRecord) GetWasSuccessful() bool {
	if x != nil {
		return x.WasSuccessful
	}
	return false
}

func (x *SpellCastRecord) GetCastTimestamp() int64 {
	if x != nil {
		return x.CastTimestamp
	}
	return 0
}

func (x *SpellCastRecord) GetDurationEndTimestamp() int64 {
	if x != nil {
		return x.DurationEndTimestamp
	}
	return 0
}

func (x *SpellCastRecord) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

type GetActiveSpellsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`        // Spells affecting this entity
	CasterOnly    bool                   `protobuf:"varint,2,opt,name=caster_only,json=casterOnly,proto3" json:"caster_only,omitempty"` // Only spells this entity cast
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveSpellsRequest) Reset() {
	*x = GetActiveSpellsRequest{}
	mi := &file_seshat_spells_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveSpellsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveSpellsRequest) ProtoMessage() {}

func (x *GetActiveSpellsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveSpellsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveSpellsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{57}
}

func (x *GetActiveSpellsRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *GetActiveSpellsRequest) GetCasterOnly() bool {
	if x != nil {
		return x.CasterOnly
	}
	return false
}

type GetActiveSpellsResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ActiveSpells        []*ActiveSpell         `protobuf:"bytes,1,rep,name=active_spells,json=activeSpells,proto3" json:"active_spells,omitempty"`
	ConcentrationSpells int32                  `protobuf:"varint,2,opt,name=concentration_spells,json=concentrationSpells,proto3" json:"concentration_spells,omitempty"`
	Status              *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetActiveSpellsResponse) Reset() {
	*x = GetActiveSpellsResponse{}
	mi := &file_seshat_spells_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveSpellsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveSpellsResponse) ProtoMessage() {}

func (x *GetActiveSpellsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveSpellsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveSpellsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{58}
}

func (x *GetActiveSpellsResponse) GetActiveSpells() []*ActiveSpell {
	if x != nil {
		return x.ActiveSpells
	}
	return nil
}

func (x *GetActiveSpellsResponse) GetConcentrationSpells() int32 {
	if x != nil {
		return x.ConcentrationSpells
	}
	return 0
}

func (x *GetActiveSpellsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type ActiveSpell struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CastId                string                 `protobuf:"bytes,1,opt,name=cast_id,json=castId,proto3" json:"cast_id,omitempty"`
	Spell                 *Spell                 `protobuf:"bytes,2,opt,name=spell,proto3" json:"spell,omitempty"`
	CasterEntityId        string                 `protobuf:"bytes,3,opt,name=caster_entity_id,json=casterEntityId,proto3" json:"caster_entity_id,omitempty"`
	CastLevel             int32                  `protobuf:"varint,4,opt,name=cast_level,json=castLevel,proto3" json:"cast_level,omitempty"`
	CastTimestamp         int64                  `protobuf:"varint,5,opt,name=cast_timestamp,json=castTimestamp,proto3" json:"cast_timestamp,omitempty"`
	ExpiresTimestamp      int64                  `protobuf:"varint,6,opt,name=expires_timestamp,json=expiresTimestamp,proto3" json:"expires_timestamp,omitempty"`
	RequiresConcentration bool                   `protobuf:"varint,7,opt,name=requires_concentration,json=requiresConcentration,proto3" json:"requires_concentration,omitempty"`
	OngoingEffects        []*SpellEffect         `protobuf:"bytes,8,rep,name=ongoing_effects,json=ongoingEffects,proto3" json:"ongoing_effects,omitempty"`
	Area                  *SpellArea             `protobuf:"bytes,9,opt,name=area,proto3" json:"area,omitempty"` // If spell affects an area
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ActiveSpell) Reset() {
	*x = ActiveSpell{}
	mi := &file_seshat_spells_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveSpell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveSpell) ProtoMessage() {}

func (x *ActiveSpell) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spells_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveSpell.ProtoReflect.Descriptor instead.
func (*ActiveSpell) Descriptor() ([]byte, []int) {
	return file_seshat_spells_proto_rawDescGZIP(), []int{59}
}

func (x *ActiveSpell) GetCastId() string {
	if x != nil {
		return x.CastId
	}
	return ""
}

func (x *ActiveSpell) GetSpell() *Spell {
	if x != nil {
		return x.Spell
	}
	return nil
}

func (x *ActiveSpell) GetCasterEntityId() string {
	if x != nil {
		return x.CasterEntityId
	}
	return ""
}

func (x *ActiveSpell) GetCastLevel() int32 {
	if x != nil {
		return x.CastLevel
	}
	return 0
}

func (x *ActiveSpell) GetCastTimestamp() int64 {
	if x != nil {
		return x.CastTimestamp
	}
	return 0
}

func (x *ActiveSpell) GetExpiresTimestamp() int64 {
	if x != nil {
		return x.ExpiresTimestamp
	}
	return 0
}

func (x *ActiveSpell) GetRequiresConcentration() bool {
	if x != nil {
		return x.RequiresConcentration
	}
	return false
}

func (x *ActiveSpell) GetOngoingEffects() []*SpellEffect {
	if x != nil {
		return x.OngoingEffects
	}
	return nil
}

func (x *ActiveSpell) GetArea() *SpellArea {
	if x != nil {
		return x.Area
	}
	return nil
}

var File_seshat_spells_proto protoreflect.FileDescriptor

const file_seshat_spells_proto_rawDesc = "" +
	"\n" +
	"\x13seshat/spells.proto\x12\x06seshat\x1a\x13seshat/common.proto\x1a\x16seshat/resources.proto\x1a\x17seshat/conditions.proto\"\x80\x06\n" +
	"\x05Spell\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x14\n" +
	"\x05level\x18\x04 \x01(\x05R\x05level\x12+\n" +
	"\x06school\x18\x05 \x01(\x0e2\x13.seshat.SpellSchoolR\x06school\x12\x18\n" +
	"\aclasses\x18\x06 \x03(\tR\aclasses\x12\x1e\n" +
	"\n" +
	"components\x18\a \x03(\tR\n" +
	"components\x12-\n" +
	"\x12material_component\x18\b \x01(\tR\x11materialComponent\x125\n" +
	"\acasting\x18\t \x01(\v2\x1b.seshat.CastingRequirementsR\acasting\x12(\n" +
	"\x05range\x18\n" +
	" \x01(\v2\x12.seshat.SpellRangeR\x05range\x121\n" +
	"\bduration\x18\v \x01(\v2\x15.seshat.SpellDurationR\bduration\x12%\n" +
	"\x04area\x18\f \x01(\v2\x11.seshat.SpellAreaR\x04area\x12-\n" +
	"\aeffects\x18\r \x03(\v2\x13.seshat.SpellEffectR\aeffects\x12\x12\n" +
	"\x04tags\x18\x0e \x03(\tR\x04tags\x125\n" +
	"\x16requires_concentration\x18\x0f \x01(\bR\x15requiresConcentration\x12\x1b\n" +
	"\tis_ritual\x18\x10 \x01(\bR\bisRitual\x12\x1d\n" +
	"\n" +
	"can_upcast\x18\x11 \x01(\bR\tcanUpcast\x12=\n" +
	"\n" +
	"properties\x18\x12 \x03(\v2\x1d.seshat.Spell.PropertiesEntryR\n" +
	"properties\x12\x16\n" +
	"\x06source\x18\x13 \x01(\tR\x06source\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xec\x02\n" +
	"\x13CastingRequirements\x12!\n" +
	"\fcasting_time\x18\x01 \x01(\tR\vcastingTime\x123\n" +
	"\x16requires_line_of_sight\x18\x02 \x01(\bR\x13requiresLineOfSight\x12'\n" +
	"\x0frequires_verbal\x18\x03 \x01(\bR\x0erequiresVerbal\x12)\n" +
	"\x10requires_somatic\x18\x04 \x01(\bR\x0frequiresSomatic\x12+\n" +
	"\x11requires_material\x18\x05 \x01(\bR\x10requiresMaterial\x12%\n" +
	"\x0erequires_focus\x18\x06 \x01(\bR\rrequiresFocus\x12+\n" +
	"\x11material_consumed\x18\a \x01(\bR\x10materialConsumed\x12(\n" +
	"\x10material_cost_gp\x18\b \x01(\x05R\x0ematerialCostGp\"v\n" +
	"\n" +
	"SpellRange\x12%\n" +
	"\x04type\x18\x01 \x01(\x0e2\x11.seshat.RangeTypeR\x04type\x12\x1a\n" +
	"\bdistance\x18\x02 \x01(\x05R\bdistance\x12%\n" +
	"\x0erequires_touch\x18\x03 \x01(\bR\rrequiresTouch\"\xd3\x01\n" +
	"\rSpellDuration\x12(\n" +
	"\x04type\x18\x01 \x01(\x0e2\x14.seshat.DurationTypeR\x04type\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value\x125\n" +
	"\x16requires_concentration\x18\x03 \x01(\bR\x15requiresConcentration\x12)\n" +
	"\x10is_instantaneous\x18\x04 \x01(\bR\x0fisInstantaneous\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\"\xad\x01\n" +
	"\tSpellArea\x12$\n" +
	"\x04type\x18\x01 \x01(\x0e2\x10.seshat.AreaTypeR\x04type\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\x12\x14\n" +
	"\x05shape\x18\x03 \x01(\tR\x05shape\x12'\n" +
	"\x0faffects_objects\x18\x04 \x01(\bR\x0eaffectsObjects\x12'\n" +
	"\x0faffects_terrain\x18\x05 \x01(\bR\x0eaffectsTerrain\"\xa7\x04\n" +
	"\vSpellEffect\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12,\n" +
	"\x06timing\x18\x03 \x01(\x0e2\x14.seshat.EffectTimingR\x06timing\x12\x18\n" +
	"\atargets\x18\x04 \x03(\tR\atargets\x12,\n" +
	"\x06damage\x18\x05 \x01(\v2\x14.seshat.DamageEffectR\x06damage\x12/\n" +
	"\ahealing\x18\x06 \x01(\v2\x15.seshat.HealingEffectR\ahealing\x12:\n" +
	"\tcondition\x18\a \x01(\v2\x1c.seshat.SpellConditionEffectR\tcondition\x122\n" +
	"\bmovement\x18\b \x01(\v2\x16.seshat.MovementEffectR\bmovement\x12V\n" +
	"\x11custom_parameters\x18\t \x03(\v2).seshat.SpellEffect.CustomParametersEntryR\x10customParameters\x12.\n" +
	"\ascaling\x18\n" +
	" \x01(\v2\x14.seshat.SpellScalingR\ascaling\x1aC\n" +
	"\x15CustomParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xde\x01\n" +
	"\fDamageEffect\x12\x1f\n" +
	"\vdamage_type\x18\x01 \x01(\tR\n" +
	"damageType\x12!\n" +
	"\fdice_formula\x18\x02 \x01(\tR\vdiceFormula\x12\x1f\n" +
	"\vallows_save\x18\x03 \x01(\bR\n" +
	"allowsSave\x12!\n" +
	"\fsave_ability\x18\x04 \x01(\tR\vsaveAbility\x12\x17\n" +
	"\asave_dc\x18\x05 \x01(\x05R\x06saveDc\x12-\n" +
	"\x13half_damage_on_save\x18\x06 \x01(\bR\x10halfDamageOnSave\"\xb4\x01\n" +
	"\rHealingEffect\x12!\n" +
	"\fdice_formula\x18\x01 \x01(\tR\vdiceFormula\x12%\n" +
	"\x0eaffects_undead\x18\x02 \x01(\bR\raffectsUndead\x120\n" +
	"\x14temporary_hit_points\x18\x03 \x01(\bR\x12temporaryHitPoints\x12'\n" +
	"\x0fmaximum_targets\x18\x04 \x01(\x05R\x0emaximumTargets\"\x81\x02\n" +
	"\x14SpellConditionEffect\x12%\n" +
	"\x0econdition_type\x18\x01 \x01(\tR\rconditionType\x125\n" +
	"\bduration\x18\x02 \x01(\v2\x19.seshat.ConditionDurationR\bduration\x12\x1f\n" +
	"\vallows_save\x18\x03 \x01(\bR\n" +
	"allowsSave\x12!\n" +
	"\fsave_ability\x18\x04 \x01(\tR\vsaveAbility\x12\x17\n" +
	"\asave_dc\x18\x05 \x01(\x05R\x06saveDc\x12.\n" +
	"\x13save_ends_condition\x18\x06 \x01(\bR\x11saveEndsCondition\"\xbb\x01\n" +
	"\x0eMovementEffect\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x1a\n" +
	"\bdistance\x18\x02 \x01(\x05R\bdistance\x12\x1c\n" +
	"\tdirection\x18\x03 \x01(\tR\tdirection\x12\x1f\n" +
	"\vallows_save\x18\x04 \x01(\bR\n" +
	"allowsSave\x12!\n" +
	"\fsave_ability\x18\x05 \x01(\tR\vsaveAbility\x12\x17\n" +
	"\asave_dc\x18\x06 \x01(\x05R\x06saveDc\"v\n" +
	"\fSpellScaling\x12!\n" +
	"\fscaling_type\x18\x01 \x01(\tR\vscalingType\x12&\n" +
	"\x0fper_level_bonus\x18\x02 \x01(\tR\rperLevelBonus\x12\x1b\n" +
	"\tmax_level\x18\x03 \x01(\x05R\bmaxLevel\"K\n" +
	"\x0fGetSpellRequest\x12\x19\n" +
	"\bspell_id\x18\x01 \x01(\tR\aspellId\x12\x1d\n" +
	"\n" +
	"spell_name\x18\x02 \x01(\tR\tspellName\"_\n" +
	"\x10GetSpellResponse\x12#\n" +
	"\x05spell\x18\x01 \x01(\v2\r.seshat.SpellR\x05spell\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\xd7\x01\n" +
	"\x11ListSpellsRequest\x12\x16\n" +
	"\x06levels\x18\x01 \x03(\x05R\x06levels\x12-\n" +
	"\aschools\x18\x02 \x03(\x0e2\x13.seshat.SpellSchoolR\aschools\x12\x18\n" +
	"\aclasses\x18\x03 \x03(\tR\aclasses\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12\x1f\n" +
	"\vsearch_text\x18\x05 \x01(\tR\n" +
	"searchText\x12\x14\n" +
	"\x05limit\x18\x06 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06cursor\x18\a \x01(\tR\x06cursor\"\xa5\x01\n" +
	"\x12ListSpellsResponse\x12%\n" +
	"\x06spells\x18\x01 \x03(\v2\r.seshat.SpellR\x06spells\x12\x1f\n" +
	"\vnext_cursor\x18\x02 \x01(\tR\n" +
	"nextCursor\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x05R\n" +
	"totalCount\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"k\n" +
	"\x18CreateCustomSpellRequest\x12#\n" +
	"\x05spell\x18\x01 \x01(\v2\r.seshat.SpellR\x05spell\x12*\n" +
	"\x11creator_entity_id\x18\x02 \x01(\tR\x0fcreatorEntityId\"w\n" +
	"\x19CreateCustomSpellResponse\x122\n" +
	"\rcreated_spell\x18\x01 \x01(\v2\r.seshat.SpellR\fcreatedSpell\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\x9d\x03\n" +
	"\x10CastSpellRequest\x12(\n" +
	"\x10caster_entity_id\x18\x01 \x01(\tR\x0ecasterEntityId\x12\x19\n" +
	"\bspell_id\x18\x02 \x01(\tR\aspellId\x12\x1d\n" +
	"\n" +
	"cast_level\x18\x03 \x01(\x05R\tcastLevel\x12*\n" +
	"\x11target_entity_ids\x18\x04 \x03(\tR\x0ftargetEntityIds\x129\n" +
	"\x0ftarget_position\x18\x05 \x01(\v2\x10.seshat.PositionR\x0etargetPosition\x12U\n" +
	"\x0fcasting_options\x18\x06 \x03(\v2,.seshat.CastSpellRequest.CastingOptionsEntryR\x0ecastingOptions\x12$\n" +
	"\x0euse_spell_slot\x18\a \x01(\bR\fuseSpellSlot\x1aA\n" +
	"\x13CastingOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xbc\x02\n" +
	"\x11CastSpellResponse\x12/\n" +
	"\x06result\x18\x01 \x01(\v2\x17.seshat.SpellCastResultR\x06result\x12<\n" +
	"\x0fapplied_effects\x18\x02 \x03(\v2\x13.seshat.SpellEffectR\x0eappliedEffects\x12D\n" +
	"\x13updated_spell_slots\x18\x03 \x01(\v2\x14.seshat.ResourcePoolR\x11updatedSpellSlots\x12J\n" +
	"\x17concentration_condition\x18\x04 \x01(\v2\x11.seshat.ConditionR\x16concentrationCondition\x12&\n" +
	"\x06status\x18\x05 \x01(\v2\x0e.seshat.ResultR\x06status\"\xdd\x02\n" +
	"\x0fSpellCastResult\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12%\n" +
	"\x0efailure_reason\x18\x02 \x01(\tR\rfailureReason\x12,\n" +
	"\n" +
	"spell_cast\x18\x03 \x01(\v2\r.seshat.SpellR\tspellCast\x12*\n" +
	"\x11actual_cast_level\x18\x04 \x01(\x05R\x0factualCastLevel\x12.\n" +
	"\x13affected_entity_ids\x18\x05 \x03(\tR\x11affectedEntityIds\x12?\n" +
	"\x12affected_positions\x18\x06 \x03(\v2\x10.seshat.PositionR\x11affectedPositions\x12%\n" +
	"\x0ecast_timestamp\x18\a \x01(\x03R\rcastTimestamp\x12\x17\n" +
	"\acast_id\x18\b \x01(\tR\x06castId\"\x7f\n" +
	"\x13CanCastSpellRequest\x12(\n" +
	"\x10caster_entity_id\x18\x01 \x01(\tR\x0ecasterEntityId\x12\x19\n" +
	"\bspell_id\x18\x02 \x01(\tR\aspellId\x12#\n" +
	"\rdesired_level\x18\x03 \x01(\x05R\fdesiredLevel\"\xb6\x01\n" +
	"\x14CanCastSpellResponse\x12\x19\n" +
	"\bcan_cast\x18\x01 \x01(\bR\acanCast\x120\n" +
	"\x14requirements_not_met\x18\x02 \x03(\tR\x12requirementsNotMet\x12)\n" +
	"\x10available_levels\x18\x03 \x03(\x05R\x0favailableLevels\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"_\n" +
	"\x18GetCastingOptionsRequest\x12(\n" +
	"\x10caster_entity_id\x18\x01 \x01(\tR\x0ecasterEntityId\x12\x19\n" +
	"\bspell_id\x18\x02 \x01(\tR\aspellId\"t\n" +
	"\x19GetCastingOptionsResponse\x12/\n" +
	"\aoptions\x18\x01 \x03(\v2\x15.seshat.CastingOptionR\aoptions\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\x87\x02\n" +
	"\rCastingOption\x12\x14\n" +
	"\x05level\x18\x01 \x01(\x05R\x05level\x12'\n" +
	"\x0favailable_slots\x18\x02 \x01(\x05R\x0eavailableSlots\x12\x1b\n" +
	"\tis_ritual\x18\x03 \x01(\bR\bisRitual\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12<\n" +
	"\aeffects\x18\x05 \x03(\v2\".seshat.CastingOption.EffectsEntryR\aeffects\x1a:\n" +
	"\fEffectsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"3\n" +
	"\x14GetSpellSlotsRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\"v\n" +
	"\x15GetSpellSlotsResponse\x125\n" +
	"\n" +
	"slot_table\x18\x01 \x01(\v2\x16.seshat.SpellSlotTableR\tslotTable\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\xd6\x01\n" +
	"\x0eSpellSlotTable\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12.\n" +
	"\x06levels\x18\x02 \x03(\v2\x16.seshat.SpellSlotLevelR\x06levels\x12\x1f\n" +
	"\vtotal_slots\x18\x03 \x01(\x05R\n" +
	"totalSlots\x12\x1d\n" +
	"\n" +
	"used_slots\x18\x04 \x01(\x05R\tusedSlots\x127\n" +
	"\x18last_long_rest_timestamp\x18\x05 \x01(\x03R\x15lastLongRestTimestamp\"\x8f\x01\n" +
	"\x0eSpellSlotLevel\x12\x14\n" +
	"\x05level\x18\x01 \x01(\x05R\x05level\x12\x1f\n" +
	"\vtotal_slots\x18\x02 \x01(\x05R\n" +
	"totalSlots\x12\x1d\n" +
	"\n" +
	"used_slots\x18\x03 \x01(\x05R\tusedSlots\x12'\n" +
	"\x0favailable_slots\x18\x04 \x01(\x05R\x0eavailableSlots\"\x81\x01\n" +
	"\x17UpdateSpellSlotsRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x121\n" +
	"\aupdates\x18\x02 \x03(\v2\x17.seshat.SpellSlotUpdateR\aupdates\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"\x7f\n" +
	"\x18UpdateSpellSlotsResponse\x12;\n" +
	"\rupdated_table\x18\x01 \x01(\v2\x16.seshat.SpellSlotTableR\fupdatedTable\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"e\n" +
	"\x0fSpellSlotUpdate\x12\x14\n" +
	"\x05level\x18\x01 \x01(\x05R\x05level\x12\x1b\n" +
	"\tnew_total\x18\x02 \x01(\x05R\bnewTotal\x12\x1f\n" +
	"\vused_change\x18\x03 \x01(\x05R\n" +
	"usedChange\"7\n" +
	"\x18GetPreparedSpellsRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\"\xd1\x01\n" +
	"\x19GetPreparedSpellsResponse\x12>\n" +
	"\x0fprepared_spells\x18\x01 \x03(\v2\x15.seshat.PreparedSpellR\x0epreparedSpells\x12!\n" +
	"\fmax_prepared\x18\x02 \x01(\x05R\vmaxPrepared\x12)\n" +
	"\x10current_prepared\x18\x03 \x01(\x05R\x0fcurrentPrepared\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"\xbb\x01\n" +
	"\rPreparedSpell\x12#\n" +
	"\x05spell\x18\x01 \x01(\v2\r.seshat.SpellR\x05spell\x12-\n" +
	"\x12prepared_timestamp\x18\x02 \x01(\x03R\x11preparedTimestamp\x12'\n" +
	"\x0falways_prepared\x18\x03 \x01(\bR\x0ealwaysPrepared\x12-\n" +
	"\x12preparation_source\x18\x04 \x01(\tR\x11preparationSource\"M\n" +
	"\x13PrepareSpellRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x19\n" +
	"\bspell_id\x18\x02 \x01(\tR\aspellId\"\xbc\x01\n" +
	"\x14PrepareSpellResponse\x12<\n" +
	"\x0eprepared_spell\x18\x01 \x01(\v2\x15.seshat.PreparedSpellR\rpreparedSpell\x12>\n" +
	"\x1bremaining_preparation_slots\x18\x02 \x01(\x05R\x19remainingPreparationSlots\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"O\n" +
	"\x15UnprepareSpellRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x19\n" +
	"\bspell_id\x18\x02 \x01(\tR\aspellId\"\xa3\x01\n" +
	"\x16UnprepareSpellResponse\x12!\n" +
	"\fwas_prepared\x18\x01 \x01(\bR\vwasPrepared\x12>\n" +
	"\x1bavailable_preparation_slots\x18\x02 \x01(\x05R\x19availablePreparationSlots\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"\x8e\x01\n" +
	"\x19StartConcentrationRequest\x12(\n" +
	"\x10caster_entity_id\x18\x01 \x01(\tR\x0ecasterEntityId\x12\"\n" +
	"\rspell_cast_id\x18\x02 \x01(\tR\vspellCastId\x12#\n" +
	"\x05spell\x18\x03 \x01(\v2\r.seshat.SpellR\x05spell\"\xd4\x01\n" +
	"\x1aStartConcentrationResponse\x12J\n" +
	"\x17concentration_condition\x18\x01 \x01(\v2\x11.seshat.ConditionR\x16concentrationCondition\x12B\n" +
	"\x13ended_concentration\x18\x02 \x01(\v2\x11.seshat.ConditionR\x12endedConcentration\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"N\n" +
	"\x17EndConcentrationRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"\xb8\x01\n" +
	"\x18EndConcentrationResponse\x12:\n" +
	"\x0fended_condition\x18\x01 \x01(\v2\x11.seshat.ConditionR\x0eendedCondition\x128\n" +
	"\rended_effects\x18\x02 \x03(\v2\x13.seshat.SpellEffectR\fendedEffects\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"<\n" +
	"\x1dGetConcentrationStatusRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\"\xb4\x02\n" +
	"\x1eGetConcentrationStatusResponse\x12)\n" +
	"\x10is_concentrating\x18\x01 \x01(\bR\x0fisConcentrating\x12J\n" +
	"\x17concentration_condition\x18\x02 \x01(\v2\x11.seshat.ConditionR\x16concentrationCondition\x12>\n" +
	"\x13concentration_spell\x18\x03 \x01(\v2\r.seshat.SpellR\x12concentrationSpell\x123\n" +
	"\x15concentration_started\x18\x04 \x01(\x03R\x14concentrationStarted\x12&\n" +
	"\x06status\x18\x05 \x01(\v2\x0e.seshat.ResultR\x06status\"\x92\x02\n" +
	"\x1dMakeConcentrationCheckRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12!\n" +
	"\fdamage_taken\x18\x02 \x01(\x05R\vdamageTaken\x12\x1f\n" +
	"\vdc_override\x18\x03 \x01(\x05R\n" +
	"dcOverride\x12R\n" +
	"\tmodifiers\x18\x04 \x03(\v24.seshat.MakeConcentrationCheckRequest.ModifiersEntryR\tmodifiers\x1a<\n" +
	"\x0eModifiersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xfe\x01\n" +
	"\x1eMakeConcentrationCheckResponse\x12!\n" +
	"\fcheck_passed\x18\x01 \x01(\bR\vcheckPassed\x12\x1f\n" +
	"\vroll_result\x18\x02 \x01(\x05R\n" +
	"rollResult\x12\x0e\n" +
	"\x02dc\x18\x03 \x01(\x05R\x02dc\x12%\n" +
	"\x0etotal_modifier\x18\x04 \x01(\x05R\rtotalModifier\x129\n" +
	"\x18concentration_maintained\x18\x05 \x01(\bR\x17concentrationMaintained\x12&\n" +
	"\x06status\x18\x06 \x01(\v2\x0e.seshat.ResultR\x06status\"\xd5\x01\n" +
	"\x16GetSpellTargetsRequest\x12\x19\n" +
	"\bspell_id\x18\x01 \x01(\tR\aspellId\x12(\n" +
	"\x10caster_entity_id\x18\x02 \x01(\tR\x0ecasterEntityId\x12;\n" +
	"\x10casting_position\x18\x03 \x01(\v2\x10.seshat.PositionR\x0fcastingPosition\x129\n" +
	"\x0ftarget_position\x18\x04 \x01(\v2\x10.seshat.PositionR\x0etargetPosition\"\xa2\x02\n" +
	"\x17GetSpellTargetsResponse\x125\n" +
	"\x17valid_target_entity_ids\x18\x01 \x03(\tR\x14validTargetEntityIds\x12?\n" +
	"\x12affected_positions\x18\x02 \x03(\v2\x10.seshat.PositionR\x11affectedPositions\x128\n" +
	"\x0eeffective_area\x18\x03 \x01(\v2\x11.seshat.SpellAreaR\reffectiveArea\x12-\n" +
	"\x12targeting_warnings\x18\x04 \x03(\tR\x11targetingWarnings\x12&\n" +
	"\x06status\x18\x05 \x01(\v2\x0e.seshat.ResultR\x06status\"\xc8\x01\n" +
	"\x18ApplySpellEffectsRequest\x12\"\n" +
	"\rspell_cast_id\x18\x01 \x01(\tR\vspellCastId\x12*\n" +
	"\x11target_entity_ids\x18\x02 \x03(\tR\x0ftargetEntityIds\x12=\n" +
	"\x10effects_to_apply\x18\x03 \x03(\v2\x13.seshat.SpellEffectR\x0eeffectsToApply\x12\x1d\n" +
	"\n" +
	"cast_level\x18\x04 \x01(\x05R\tcastLevel\"\x85\x01\n" +
	"\x19ApplySpellEffectsResponse\x12@\n" +
	"\x0eeffect_results\x18\x01 \x03(\v2\x19.seshat.SpellEffectResultR\reffectResults\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\xba\x03\n" +
	"\x11SpellEffectResult\x12(\n" +
	"\x10target_entity_id\x18\x01 \x01(\tR\x0etargetEntityId\x12+\n" +
	"\x06effect\x18\x02 \x01(\v2\x13.seshat.SpellEffectR\x06effect\x12)\n" +
	"\x10effect_succeeded\x18\x03 \x01(\bR\x0feffectSucceeded\x12!\n" +
	"\fdamage_dealt\x18\x04 \x01(\x05R\vdamageDealt\x12!\n" +
	"\fhealing_done\x18\x05 \x01(\x05R\vhealingDone\x12>\n" +
	"\x11condition_applied\x18\x06 \x01(\v2\x11.seshat.ConditionR\x10conditionApplied\x12\x1f\n" +
	"\vsave_result\x18\a \x01(\tR\n" +
	"saveResult\x12@\n" +
	"\adetails\x18\b \x03(\v2&.seshat.SpellEffectResult.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x85\x01\n" +
	"\x14GetSpellAreasRequest\x12\x19\n" +
	"\bspell_id\x18\x01 \x01(\tR\aspellId\x129\n" +
	"\x0fcenter_position\x18\x02 \x01(\v2\x10.seshat.PositionR\x0ecenterPosition\x12\x17\n" +
	"\aroom_id\x18\x03 \x01(\tR\x06roomId\"\xe6\x01\n" +
	"\x15GetSpellAreasResponse\x12?\n" +
	"\x12affected_positions\x18\x01 \x03(\v2\x10.seshat.PositionR\x11affectedPositions\x12%\n" +
	"\x04area\x18\x02 \x01(\v2\x11.seshat.SpellAreaR\x04area\x12=\n" +
	"\x11blocked_positions\x18\x03 \x03(\v2\x10.seshat.PositionR\x10blockedPositions\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"\x91\x01\n" +
	"\x16GetSpellHistoryRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x12'\n" +
	"\x0fsince_timestamp\x18\x03 \x01(\x03R\x0esinceTimestamp\x12\x1b\n" +
	"\tspell_ids\x18\x04 \x03(\tR\bspellIds\"\x95\x01\n" +
	"\x17GetSpellHistoryResponse\x121\n" +
	"\ahistory\x18\x01 \x03(\v2\x17.seshat.SpellCastRecordR\ahistory\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"\xe2\x02\n" +
	"\x0fSpellCastRecord\x12\x17\n" +
	"\acast_id\x18\x01 \x01(\tR\x06castId\x12#\n" +
	"\x05spell\x18\x02 \x01(\v2\r.seshat.SpellR\x05spell\x12(\n" +
	"\x10caster_entity_id\x18\x03 \x01(\tR\x0ecasterEntityId\x12\x1d\n" +
	"\n" +
	"cast_level\x18\x04 \x01(\x05R\tcastLevel\x12*\n" +
	"\x11target_entity_ids\x18\x05 \x03(\tR\x0ftargetEntityIds\x12%\n" +
	"\x0ewas_successful\x18\x06 \x01(\bR\rwasSuccessful\x12%\n" +
	"\x0ecast_timestamp\x18\a \x01(\x03R\rcastTimestamp\x124\n" +
	"\x16duration_end_timestamp\x18\b \x01(\x03R\x14durationEndTimestamp\x12\x18\n" +
	"\aoutcome\x18\t \x01(\tR\aoutcome\"V\n" +
	"\x16GetActiveSpellsRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x1f\n" +
	"\vcaster_only\x18\x02 \x01(\bR\n" +
	"casterOnly\"\xae\x01\n" +
	"\x17GetActiveSpellsResponse\x128\n" +
	"\ractive_spells\x18\x01 \x03(\v2\x13.seshat.ActiveSpellR\factiveSpells\x121\n" +
	"\x14concentration_spells\x18\x02 \x01(\x05R\x13concentrationSpells\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"\x84\x03\n" +
	"\vActiveSpell\x12\x17\n" +
	"\acast_id\x18\x01 \x01(\tR\x06castId\x12#\n" +
	"\x05spell\x18\x02 \x01(\v2\r.seshat.SpellR\x05spell\x12(\n" +
	"\x10caster_entity_id\x18\x03 \x01(\tR\x0ecasterEntityId\x12\x1d\n" +
	"\n" +
	"cast_level\x18\x04 \x01(\x05R\tcastLevel\x12%\n" +
	"\x0ecast_timestamp\x18\x05 \x01(\x03R\rcastTimestamp\x12+\n" +
	"\x11expires_timestamp\x18\x06 \x01(\x03R\x10expiresTimestamp\x125\n" +
	"\x16requires_concentration\x18\a \x01(\bR\x15requiresConcentration\x12<\n" +
	"\x0fongoing_effects\x18\b \x03(\v2\x13.seshat.SpellEffectR\x0eongoingEffects\x12%\n" +
	"\x04area\x18\t \x01(\v2\x11.seshat.SpellAreaR\x04area*\x95\x02\n" +
	"\vSpellSchool\x12\x1c\n" +
	"\x18SPELL_SCHOOL_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17SPELL_SCHOOL_ABJURATION\x10\x01\x12\x1c\n" +
	"\x18SPELL_SCHOOL_CONJURATION\x10\x02\x12\x1b\n" +
	"\x17SPELL_SCHOOL_DIVINATION\x10\x03\x12\x1c\n" +
	"\x18SPELL_SCHOOL_ENCHANTMENT\x10\x04\x12\x1a\n" +
	"\x16SPELL_SCHOOL_EVOCATION\x10\x05\x12\x19\n" +
	"\x15SPELL_SCHOOL_ILLUSION\x10\x06\x12\x1b\n" +
	"\x17SPELL_SCHOOL_NECROMANCY\x10\a\x12\x1e\n" +
	"\x1aSPELL_SCHOOL_TRANSMUTATION\x10\b*\x99\x01\n" +
	"\tRangeType\x12\x1a\n" +
	"\x16RANGE_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fRANGE_TYPE_SELF\x10\x01\x12\x14\n" +
	"\x10RANGE_TYPE_TOUCH\x10\x02\x12\x15\n" +
	"\x11RANGE_TYPE_RANGED\x10\x03\x12\x14\n" +
	"\x10RANGE_TYPE_SIGHT\x10\x04\x12\x18\n" +
	"\x14RANGE_TYPE_UNLIMITED\x10\x05*\xc6\x01\n" +
	"\bAreaType\x12\x19\n" +
	"\x15AREA_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17AREA_TYPE_SINGLE_TARGET\x10\x01\x12\x14\n" +
	"\x10AREA_TYPE_SPHERE\x10\x02\x12\x12\n" +
	"\x0eAREA_TYPE_CUBE\x10\x03\x12\x12\n" +
	"\x0eAREA_TYPE_CONE\x10\x04\x12\x12\n" +
	"\x0eAREA_TYPE_LINE\x10\x05\x12\x16\n" +
	"\x12AREA_TYPE_CYLINDER\x10\x06\x12\x18\n" +
	"\x14AREA_TYPE_HEMISPHERE\x10\a*\xc4\x01\n" +
	"\fEffectTiming\x12\x1d\n" +
	"\x19EFFECT_TIMING_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17EFFECT_TIMING_IMMEDIATE\x10\x01\x12\x1f\n" +
	"\x1bEFFECT_TIMING_START_OF_TURN\x10\x02\x12\x1d\n" +
	"\x19EFFECT_TIMING_END_OF_TURN\x10\x03\x12\x1c\n" +
	"\x18EFFECT_TIMING_ON_TRIGGER\x10\x04\x12\x1a\n" +
	"\x16EFFECT_TIMING_DURATION\x10\x052\x98\r\n" +
	"\fSpellService\x12=\n" +
	"\bGetSpell\x12\x17.seshat.GetSpellRequest\x1a\x18.seshat.GetSpellResponse\x12C\n" +
	"\n" +
	"ListSpells\x12\x19.seshat.ListSpellsRequest\x1a\x1a.seshat.ListSpellsResponse\x12X\n" +
	"\x11CreateCustomSpell\x12 .seshat.CreateCustomSpellRequest\x1a!.seshat.CreateCustomSpellResponse\x12@\n" +
	"\tCastSpell\x12\x18.seshat.CastSpellRequest\x1a\x19.seshat.CastSpellResponse\x12I\n" +
	"\fCanCastSpell\x12\x1b.seshat.CanCastSpellRequest\x1a\x1c.seshat.CanCastSpellResponse\x12X\n" +
	"\x11GetCastingOptions\x12 .seshat.GetCastingOptionsRequest\x1a!.seshat.GetCastingOptionsResponse\x12L\n" +
	"\rGetSpellSlots\x12\x1c.seshat.GetSpellSlotsRequest\x1a\x1d.seshat.GetSpellSlotsResponse\x12U\n" +
	"\x10UpdateSpellSlots\x12\x1f.seshat.UpdateSpellSlotsRequest\x1a .seshat.UpdateSpellSlotsResponse\x12X\n" +
	"\x11GetPreparedSpells\x12 .seshat.GetPreparedSpellsRequest\x1a!.seshat.GetPreparedSpellsResponse\x12I\n" +
	"\fPrepareSpell\x12\x1b.seshat.PrepareSpellRequest\x1a\x1c.seshat.PrepareSpellResponse\x12O\n" +
	"\x0eUnprepareSpell\x12\x1d.seshat.UnprepareSpellRequest\x1a\x1e.seshat.UnprepareSpellResponse\x12[\n" +
	"\x12StartConcentration\x12!.seshat.StartConcentrationRequest\x1a\".seshat.StartConcentrationResponse\x12U\n" +
	"\x10EndConcentration\x12\x1f.seshat.EndConcentrationRequest\x1a .seshat.EndConcentrationResponse\x12g\n" +
	"\x16GetConcentrationStatus\x12%.seshat.GetConcentrationStatusRequest\x1a&.seshat.GetConcentrationStatusResponse\x12g\n" +
	"\x16MakeConcentrationCheck\x12%.seshat.MakeConcentrationCheckRequest\x1a&.seshat.MakeConcentrationCheckResponse\x12R\n" +
	"\x0fGetSpellTargets\x12\x1e.seshat.GetSpellTargetsRequest\x1a\x1f.seshat.GetSpellTargetsResponse\x12X\n" +
	"\x11ApplySpellEffects\x12 .seshat.ApplySpellEffectsRequest\x1a!.seshat.ApplySpellEffectsResponse\x12L\n" +
	"\rGetSpellAreas\x12\x1c.seshat.GetSpellAreasRequest\x1a\x1d.seshat.GetSpellAreasResponse\x12R\n" +
	"\x0fGetSpellHistory\x12\x1e.seshat.GetSpellHistoryRequest\x1a\x1f.seshat.GetSpellHistoryResponse\x12R\n" +
	"\x0fGetActiveSpells\x12\x1e.seshat.GetActiveSpellsRequest\x1a\x1f.seshat.GetActiveSpellsResponseB!Z\x1fgithub.com/seshat/protos/seshatb\x06proto3"

var (
	file_seshat_spells_proto_rawDescOnce sync.Once
	file_seshat_spells_proto_rawDescData []byte
)

func file_seshat_spells_proto_rawDescGZIP() []byte {
	file_seshat_spells_proto_rawDescOnce.Do(func() {
		file_seshat_spells_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_seshat_spells_proto_rawDesc), len(file_seshat_spells_proto_rawDesc)))
	})
	return file_seshat_spells_proto_rawDescData
}

var file_seshat_spells_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_seshat_spells_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_seshat_spells_proto_goTypes = []any{
	(SpellSchool)(0),                       // 0: seshat.SpellSchool
	(RangeType)(0),                         // 1: seshat.RangeType
	(AreaType)(0),                          // 2: seshat.AreaType
	(EffectTiming)(0),                      // 3: seshat.EffectTiming
	(*Spell)(nil),                          // 4: seshat.Spell
	(*CastingRequirements)(nil),            // 5: seshat.CastingRequirements
	(*SpellRange)(nil),                     // 6: seshat.SpellRange
	(*SpellDuration)(nil),                  // 7: seshat.SpellDuration
	(*SpellArea)(nil),                      // 8: seshat.SpellArea
	(*SpellEffect)(nil),                    // 9: seshat.SpellEffect
	(*DamageEffect)(nil),                   // 10: seshat.DamageEffect
	(*HealingEffect)(nil),                  // 11: seshat.HealingEffect
	(*SpellConditionEffect)(nil),           // 12: seshat.SpellConditionEffect
	(*MovementEffect)(nil),                 // 13: seshat.MovementEffect
	(*SpellScaling)(nil),                   // 14: seshat.SpellScaling
	(*GetSpellRequest)(nil),                // 15: seshat.GetSpellRequest
	(*GetSpellResponse)(nil),               // 16: seshat.GetSpellResponse
	(*ListSpellsRequest)(nil),              // 17: seshat.ListSpellsRequest
	(*ListSpellsResponse)(nil),             // 18: seshat.ListSpellsResponse
	(*CreateCustomSpellRequest)(nil),       // 19: seshat.CreateCustomSpellRequest
	(*CreateCustomSpellResponse)(nil),      // 20: seshat.CreateCustomSpellResponse
	(*CastSpellRequest)(nil),               // 21: seshat.CastSpellRequest
	(*CastSpellResponse)(nil),              // 22: seshat.CastSpellResponse
	(*SpellCastResult)(nil),                // 23: seshat.SpellCastResult
	(*CanCastSpellRequest)(nil),            // 24: seshat.CanCastSpellRequest
	(*CanCastSpellResponse)(nil),           // 25: seshat.CanCastSpellResponse
	(*GetCastingOptionsRequest)(nil),       // 26: seshat.GetCastingOptionsRequest
	(*GetCastingOptionsResponse)(nil),      // 27: seshat.GetCastingOptionsResponse
	(*CastingOption)(nil),                  // 28: seshat.CastingOption
	(*GetSpellSlotsRequest)(nil),           // 29: seshat.GetSpellSlotsRequest
	(*GetSpellSlotsResponse)(nil),          // 30: seshat.GetSpellSlotsResponse
	(*SpellSlotTable)(nil),                 // 31: seshat.SpellSlotTable
	(*SpellSlotLevel)(nil),                 // 32: seshat.SpellSlotLevel
	(*UpdateSpellSlotsRequest)(nil),        // 33: seshat.UpdateSpellSlotsRequest
	(*UpdateSpellSlotsResponse)(nil),       // 34: seshat.UpdateSpellSlotsResponse
	(*SpellSlotUpdate)(nil),                // 35: seshat.SpellSlotUpdate
	(*GetPreparedSpellsRequest)(nil),       // 36: seshat.GetPreparedSpellsRequest
	(*GetPreparedSpellsResponse)(nil),      // 37: seshat.GetPreparedSpellsResponse
	(*PreparedSpell)(nil),                  // 38: seshat.PreparedSpell
	(*PrepareSpellRequest)(nil),            // 39: seshat.PrepareSpellRequest
	(*PrepareSpellResponse)(nil),           // 40: seshat.PrepareSpellResponse
	(*UnprepareSpellRequest)(nil),          // 41: seshat.UnprepareSpellRequest
	(*UnprepareSpellResponse)(nil),         // 42: seshat.UnprepareSpellResponse
	(*StartConcentrationRequest)(nil),      // 43: seshat.StartConcentrationRequest
	(*StartConcentrationResponse)(nil),     // 44: seshat.StartConcentrationResponse
	(*EndConcentrationRequest)(nil),        // 45: seshat.EndConcentrationRequest
	(*EndConcentrationResponse)(nil),       // 46: seshat.EndConcentrationResponse
	(*GetConcentrationStatusRequest)(nil),  // 47: seshat.GetConcentrationStatusRequest
	(*GetConcentrationStatusResponse)(nil), // 48: seshat.GetConcentrationStatusResponse
	(*MakeConcentrationCheckRequest)(nil),  // 49: seshat.MakeConcentrationCheckRequest
	(*MakeConcentrationCheckResponse)(nil), // 50: seshat.MakeConcentrationCheckResponse
	(*GetSpellTargetsRequest)(nil),         // 51: seshat.GetSpellTargetsRequest
	(*GetSpellTargetsResponse)(nil),        // 52: seshat.GetSpellTargetsResponse
	(*ApplySpellEffectsRequest)(nil),       // 53: seshat.ApplySpellEffectsRequest
	(*ApplySpellEffectsResponse)(nil),      // 54: seshat.ApplySpellEffectsResponse
	(*SpellEffectResult)(nil),              // 55: seshat.SpellEffectResult
	(*GetSpellAreasRequest)(nil),           // 56: seshat.GetSpellAreasRequest
	(*GetSpellAreasResponse)(nil),          // 57: seshat.GetSpellAreasResponse
	(*GetSpellHistoryRequest)(nil),         // 58: seshat.GetSpellHistoryRequest
	(*GetSpellHistoryResponse)(nil),        // 59: seshat.GetSpellHistoryResponse
	(*SpellCastRecord)(nil),                // 60: seshat.SpellCastRecord
	(*GetActiveSpellsRequest)(nil),         // 61: seshat.GetActiveSpellsRequest
	(*GetActiveSpellsResponse)(nil),        // 62: seshat.GetActiveSpellsResponse
	(*ActiveSpell)(nil),                    // 63: seshat.ActiveSpell
	nil,                                    // 64: seshat.Spell.PropertiesEntry
	nil,                                    // 65: seshat.SpellEffect.CustomParametersEntry
	nil,                                    // 66: seshat.CastSpellRequest.CastingOptionsEntry
	nil,                                    // 67: seshat.CastingOption.EffectsEntry
	nil,                                    // 68: seshat.MakeConcentrationCheckRequest.ModifiersEntry
	nil,                                    // 69: seshat.SpellEffectResult.DetailsEntry
	(DurationType)(0),                      // 70: seshat.DurationType
	(*ConditionDuration)(nil),              // 71: seshat.ConditionDuration
	(*Result)(nil),                         // 72: seshat.Result
	(*Position)(nil),                       // 73: seshat.Position
	(*ResourcePool)(nil),                   // 74: seshat.ResourcePool
	(*Condition)(nil),                      // 75: seshat.Condition
}
var file_seshat_spells_proto_depIdxs = []int32{
	0,   // 0: seshat.Spell.school:type_name -> seshat.SpellSchool
	5,   // 1: seshat.Spell.casting:type_name -> seshat.CastingRequirements
	6,   // 2: seshat.Spell.range:type_name -> seshat.SpellRange
	7,   // 3: seshat.Spell.duration:type_name -> seshat.SpellDuration
	8,   // 4: seshat.Spell.area:type_name -> seshat.SpellArea
	9,   // 5: seshat.Spell.effects:type_name -> seshat.SpellEffect
	64,  // 6: seshat.Spell.properties:type_name -> seshat.Spell.PropertiesEntry
	1,   // 7: seshat.SpellRange.type:type_name -> seshat.RangeType
	70,  // 8: seshat.SpellDuration.type:type_name -> seshat.DurationType
	2,   // 9: seshat.SpellArea.type:type_name -> seshat.AreaType
	3,   // 10: seshat.SpellEffect.timing:type_name -> seshat.EffectTiming
	10,  // 11: seshat.SpellEffect.damage:type_name -> seshat.DamageEffect
	11,  // 12: seshat.SpellEffect.healing:type_name -> seshat.HealingEffect
	12,  // 13: seshat.SpellEffect.condition:type_name -> seshat.SpellConditionEffect
	13,  // 14: seshat.SpellEffect.movement:type_name -> seshat.MovementEffect
	65,  // 15: seshat.SpellEffect.custom_parameters:type_name -> seshat.SpellEffect.CustomParametersEntry
	14,  // 16: seshat.SpellEffect.scaling:type_name -> seshat.SpellScaling
	71,  // 17: seshat.SpellConditionEffect.duration:type_name -> seshat.ConditionDuration
	4,   // 18: seshat.GetSpellResponse.spell:type_name -> seshat.Spell
	72,  // 19: seshat.GetSpellResponse.status:type_name -> seshat.Result
	0,   // 20: seshat.ListSpellsRequest.schools:type_name -> seshat.SpellSchool
	4,   // 21: seshat.ListSpellsResponse.spells:type_name -> seshat.Spell
	72,  // 22: seshat.ListSpellsResponse.status:type_name -> seshat.Result
	4,   // 23: seshat.CreateCustomSpellRequest.spell:type_name -> seshat.Spell
	4,   // 24: seshat.CreateCustomSpellResponse.created_spell:type_name -> seshat.Spell
	72,  // 25: seshat.CreateCustomSpellResponse.status:type_name -> seshat.Result
	73,  // 26: seshat.CastSpellRequest.target_position:type_name -> seshat.Position
	66,  // 27: seshat.CastSpellRequest.casting_options:type_name -> seshat.CastSpellRequest.CastingOptionsEntry
	23,  // 28: seshat.CastSpellResponse.result:type_name -> seshat.SpellCastResult
	9,   // 29: seshat.CastSpellResponse.applied_effects:type_name -> seshat.SpellEffect
	74,  // 30: seshat.CastSpellResponse.updated_spell_slots:type_name -> seshat.ResourcePool
	75,  // 31: seshat.CastSpellResponse.concentration_condition:type_name -> seshat.Condition
	72,  // 32: seshat.CastSpellResponse.status:type_name -> seshat.Result
	4,   // 33: seshat.SpellCastResult.spell_cast:type_name -> seshat.Spell
	73,  // 34: seshat.SpellCastResult.affected_positions:type_name -> seshat.Position
	72,  // 35: seshat.CanCastSpellResponse.status:type_name -> seshat.Result
	28,  // 36: seshat.GetCastingOptionsResponse.options:type_name -> seshat.CastingOption
	72,  // 37: seshat.GetCastingOptionsResponse.status:type_name -> seshat.Result
	67,  // 38: seshat.CastingOption.effects:type_name -> seshat.CastingOption.EffectsEntry
	31,  // 39: seshat.GetSpellSlotsResponse.slot_table:type_name -> seshat.SpellSlotTable
	72,  // 40: seshat.GetSpellSlotsResponse.status:type_name -> seshat.Result
	32,  // 41: seshat.SpellSlotTable.levels:type_name -> seshat.SpellSlotLevel
	35,  // 42: seshat.UpdateSpellSlotsRequest.updates:type_name -> seshat.SpellSlotUpdate
	31,  // 43: seshat.UpdateSpellSlotsResponse.updated_table:type_name -> seshat.SpellSlotTable
	72,  // 44: seshat.UpdateSpellSlotsResponse.status:type_name -> seshat.Result
	38,  // 45: seshat.GetPreparedSpellsResponse.prepared_spells:type_name -> seshat.PreparedSpell
	72,  // 46: seshat.GetPreparedSpellsResponse.status:type_name -> seshat.Result
	4,   // 47: seshat.PreparedSpell.spell:type_name -> seshat.Spell
	38,  // 48: seshat.PrepareSpellResponse.prepared_spell:type_name -> seshat.PreparedSpell
	72,  // 49: seshat.PrepareSpellResponse.status:type_name -> seshat.Result
	72,  // 50: seshat.UnprepareSpellResponse.status:type_name -> seshat.Result
	4,   // 51: seshat.StartConcentrationRequest.spell:type_name -> seshat.Spell
	75,  // 52: seshat.StartConcentrationResponse.concentration_condition:type_name -> seshat.Condition
	75,  // 53: seshat.StartConcentrationResponse.ended_concentration:type_name -> seshat.Condition
	72,  // 54: seshat.StartConcentrationResponse.status:type_name -> seshat.Result
	75,  // 55: seshat.EndConcentrationResponse.ended_condition:type_name -> seshat.Condition
	9,   // 56: seshat.EndConcentrationResponse.ended_effects:type_name -> seshat.SpellEffect
	72,  // 57: seshat.EndConcentrationResponse.status:type_name -> seshat.Result
	75,  // 58: seshat.GetConcentrationStatusResponse.concentration_condition:type_name -> seshat.Condition
	4,   // 59: seshat.GetConcentrationStatusResponse.concentration_spell:type_name -> seshat.Spell
	72,  // 60: seshat.GetConcentrationStatusResponse.status:type_name -> seshat.Result
	68,  // 61: seshat.MakeConcentrationCheckRequest.modifiers:type_name -> seshat.MakeConcentrationCheckRequest.ModifiersEntry
	72,  // 62: seshat.MakeConcentrationCheckResponse.status:type_name -> seshat.Result
	73,  // 63: seshat.GetSpellTargetsRequest.casting_position:type_name -> seshat.Position
	73,  // 64: seshat.GetSpellTargetsRequest.target_position:type_name -> seshat.Position
	73,  // 65: seshat.GetSpellTargetsResponse.affected_positions:type_name -> seshat.Position
	8,   // 66: seshat.GetSpellTargetsResponse.effective_area:type_name -> seshat.SpellArea
	72,  // 67: seshat.GetSpellTargetsResponse.status:type_name -> seshat.Result
	9,   // 68: seshat.ApplySpellEffectsRequest.effects_to_apply:type_name -> seshat.SpellEffect
	55,  // 69: seshat.ApplySpellEffectsResponse.effect_results:type_name -> seshat.SpellEffectResult
	72,  // 70: seshat.ApplySpellEffectsResponse.status:type_name -> seshat.Result
	9,   // 71: seshat.SpellEffectResult.effect:type_name -> seshat.SpellEffect
	75,  // 72: seshat.SpellEffectResult.condition_applied:type_name -> seshat.Condition
	69,  // 73: seshat.SpellEffectResult.details:type_name -> seshat.SpellEffectResult.DetailsEntry
	73,  // 74: seshat.GetSpellAreasRequest.center_position:type_name -> seshat.Position
	73,  // 75: seshat.GetSpellAreasResponse.affected_positions:type_name -> seshat.Position
	8,   // 76: seshat.GetSpellAreasResponse.area:type_name -> seshat.SpellArea
	73,  // 77: seshat.GetSpellAreasResponse.blocked_positions:type_name -> seshat.Position
	72,  // 78: seshat.GetSpellAreasResponse.status:type_name -> seshat.Result
	60,  // 79: seshat.GetSpellHistoryResponse.history:type_name -> seshat.SpellCastRecord
	72,  // 80: seshat.GetSpellHistoryResponse.status:type_name -> seshat.Result
	4,   // 81: seshat.SpellCastRecord.spell:type_name -> seshat.Spell
	63,  // 82: seshat.GetActiveSpellsResponse.active_spells:type_name -> seshat.ActiveSpell
	72,  // 83: seshat.GetActiveSpellsResponse.status:type_name -> seshat.Result
	4,   // 84: seshat.ActiveSpell.spell:type_name -> seshat.Spell
	9,   // 85: seshat.ActiveSpell.ongoing_effects:type_name -> seshat.SpellEffect
	8,   // 86: seshat.ActiveSpell.area:type_name -> seshat.SpellArea
	15,  // 87: seshat.SpellService.GetSpell:input_type -> seshat.GetSpellRequest
	17,  // 88: seshat.SpellService.ListSpells:input_type -> seshat.ListSpellsRequest
	19,  // 89: seshat.SpellService.CreateCustomSpell:input_type -> seshat.CreateCustomSpellRequest
	21,  // 90: seshat.SpellService.CastSpell:input_type -> seshat.CastSpellRequest
	24,  // 91: seshat.SpellService.CanCastSpell:input_type -> seshat.CanCastSpellRequest
	26,  // 92: seshat.SpellService.GetCastingOptions:input_type -> seshat.GetCastingOptionsRequest
	29,  // 93: seshat.SpellService.GetSpellSlots:input_type -> seshat.GetSpellSlotsRequest
	33,  // 94: seshat.SpellService.UpdateSpellSlots:input_type -> seshat.UpdateSpellSlotsRequest
	36,  // 95: seshat.SpellService.GetPreparedSpells:input_type -> seshat.GetPreparedSpellsRequest
	39,  // 96: seshat.SpellService.PrepareSpell:input_type -> seshat.PrepareSpellRequest
	41,  // 97: seshat.SpellService.UnprepareSpell:input_type -> seshat.UnprepareSpellRequest
	43,  // 98: seshat.SpellService.StartConcentration:input_type -> seshat.StartConcentrationRequest
	45,  // 99: seshat.SpellService.EndConcentration:input_type -> seshat.EndConcentrationRequest
	47,  // 100: seshat.SpellService.GetConcentrationStatus:input_type -> seshat.GetConcentrationStatusRequest
	49,  // 101: seshat.SpellService.MakeConcentrationCheck:input_type -> seshat.MakeConcentrationCheckRequest
	51,  // 102: seshat.SpellService.GetSpellTargets:input_type -> seshat.GetSpellTargetsRequest
	53,  // 103: seshat.SpellService.ApplySpellEffects:input_type -> seshat.ApplySpellEffectsRequest
	56,  // 104: seshat.SpellService.GetSpellAreas:input_type -> seshat.GetSpellAreasRequest
	58,  // 105: seshat.SpellService.GetSpellHistory:input_type -> seshat.GetSpellHistoryRequest
	61,  // 106: seshat.SpellService.GetActiveSpells:input_type -> seshat.GetActiveSpellsRequest
	16,  // 107: seshat.SpellService.GetSpell:output_type -> seshat.GetSpellResponse
	18,  // 108: seshat.SpellService.ListSpells:output_type -> seshat.ListSpellsResponse
	20,  // 109: seshat.SpellService.CreateCustomSpell:output_type -> seshat.CreateCustomSpellResponse
	22,  // 110: seshat.SpellService.CastSpell:output_type -> seshat.CastSpellResponse
	25,  // 111: seshat.SpellService.CanCastSpell:output_type -> seshat.CanCastSpellResponse
	27,  // 112: seshat.SpellService.GetCastingOptions:output_type -> seshat.GetCastingOptionsResponse
	30,  // 113: seshat.SpellService.GetSpellSlots:output_type -> seshat.GetSpellSlotsResponse
	34,  // 114: seshat.SpellService.UpdateSpellSlots:output_type -> seshat.UpdateSpellSlotsResponse
	37,  // 115: seshat.SpellService.GetPreparedSpells:output_type -> seshat.GetPreparedSpellsResponse
	40,  // 116: seshat.SpellService.PrepareSpell:output_type -> seshat.PrepareSpellResponse
	42,  // 117: seshat.SpellService.UnprepareSpell:output_type -> seshat.UnprepareSpellResponse
	44,  // 118: seshat.SpellService.StartConcentration:output_type -> seshat.StartConcentrationResponse
	46,  // 119: seshat.SpellService.EndConcentration:output_type -> seshat.EndConcentrationResponse
	48,  // 120: seshat.SpellService.GetConcentrationStatus:output_type -> seshat.GetConcentrationStatusResponse
	50,  // 121: seshat.SpellService.MakeConcentrationCheck:output_type -> seshat.MakeConcentrationCheckResponse
	52,  // 122: seshat.SpellService.GetSpellTargets:output_type -> seshat.GetSpellTargetsResponse
	54,  // 123: seshat.SpellService.ApplySpellEffects:output_type -> seshat.ApplySpellEffectsResponse
	57,  // 124: seshat.SpellService.GetSpellAreas:output_type -> seshat.GetSpellAreasResponse
	59,  // 125: seshat.SpellService.GetSpellHistory:output_type -> seshat.GetSpellHistoryResponse
	62,  // 126: seshat.SpellService.GetActiveSpells:output_type -> seshat.GetActiveSpellsResponse
	107, // [107:127] is the sub-list for method output_type
	87,  // [87:107] is the sub-list for method input_type
	87,  // [87:87] is the sub-list for extension type_name
	87,  // [87:87] is the sub-list for extension extendee
	0,   // [0:87] is the sub-list for field type_name
}

func init() { file_seshat_spells_proto_init() }
func file_seshat_spells_proto_init() {
	if File_seshat_spells_proto != nil {
		return
	}
	file_seshat_common_proto_init()
	file_seshat_resources_proto_init()
	file_seshat_conditions_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_seshat_spells_proto_rawDesc), len(file_seshat_spells_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_seshat_spells_proto_goTypes,
		DependencyIndexes: file_seshat_spells_proto_depIdxs,
		EnumInfos:         file_seshat_spells_proto_enumTypes,
		MessageInfos:      file_seshat_spells_proto_msgTypes,
	}.Build()
	File_seshat_spells_proto = out.File
	file_seshat_spells_proto_goTypes = nil
	file_seshat_spells_proto_depIdxs = nil
}

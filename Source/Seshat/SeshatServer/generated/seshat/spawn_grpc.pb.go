// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: seshat/spawn.proto

package seshat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpawnService_CreateSpawnEngine_FullMethodName        = "/seshat.SpawnService/CreateSpawnEngine"
	SpawnService_GetSpawnEngine_FullMethodName           = "/seshat.SpawnService/GetSpawnEngine"
	SpawnService_DeleteSpawnEngine_FullMethodName        = "/seshat.SpawnService/DeleteSpawnEngine"
	SpawnService_SpawnEntity_FullMethodName              = "/seshat.SpawnService/SpawnEntity"
	SpawnService_SpawnMultipleEntities_FullMethodName    = "/seshat.SpawnService/SpawnMultipleEntities"
	SpawnService_SpawnFromPattern_FullMethodName         = "/seshat.SpawnService/SpawnFromPattern"
	SpawnService_GetSpawnPatterns_FullMethodName         = "/seshat.SpawnService/GetSpawnPatterns"
	SpawnService_CreateSpawnPattern_FullMethodName       = "/seshat.SpawnService/CreateSpawnPattern"
	SpawnService_UpdateSpawnPattern_FullMethodName       = "/seshat.SpawnService/UpdateSpawnPattern"
	SpawnService_AddSpawnConstraint_FullMethodName       = "/seshat.SpawnService/AddSpawnConstraint"
	SpawnService_RemoveSpawnConstraint_FullMethodName    = "/seshat.SpawnService/RemoveSpawnConstraint"
	SpawnService_GetSpawnConstraints_FullMethodName      = "/seshat.SpawnService/GetSpawnConstraints"
	SpawnService_ValidateSpawnPosition_FullMethodName    = "/seshat.SpawnService/ValidateSpawnPosition"
	SpawnService_AnalyzeSpawnCapacity_FullMethodName     = "/seshat.SpawnService/AnalyzeSpawnCapacity"
	SpawnService_GetOptimalSpawnPositions_FullMethodName = "/seshat.SpawnService/GetOptimalSpawnPositions"
	SpawnService_RecommendRoomSplit_FullMethodName       = "/seshat.SpawnService/RecommendRoomSplit"
	SpawnService_GetSpawnHistory_FullMethodName          = "/seshat.SpawnService/GetSpawnHistory"
	SpawnService_GetActiveSpawns_FullMethodName          = "/seshat.SpawnService/GetActiveSpawns"
	SpawnService_DespawnEntity_FullMethodName            = "/seshat.SpawnService/DespawnEntity"
)

// SpawnServiceClient is the client API for SpawnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Spawn system service - exposes all spawn toolkit functionality
type SpawnServiceClient interface {
	// Spawn engine management
	CreateSpawnEngine(ctx context.Context, in *CreateSpawnEngineRequest, opts ...grpc.CallOption) (*CreateSpawnEngineResponse, error)
	GetSpawnEngine(ctx context.Context, in *GetSpawnEngineRequest, opts ...grpc.CallOption) (*GetSpawnEngineResponse, error)
	DeleteSpawnEngine(ctx context.Context, in *DeleteSpawnEngineRequest, opts ...grpc.CallOption) (*DeleteSpawnEngineResponse, error)
	// Entity spawning
	SpawnEntity(ctx context.Context, in *SpawnEntityRequest, opts ...grpc.CallOption) (*SpawnEntityResponse, error)
	SpawnMultipleEntities(ctx context.Context, in *SpawnMultipleEntitiesRequest, opts ...grpc.CallOption) (*SpawnMultipleEntitiesResponse, error)
	SpawnFromPattern(ctx context.Context, in *SpawnFromPatternRequest, opts ...grpc.CallOption) (*SpawnFromPatternResponse, error)
	// Spawn patterns and configurations
	GetSpawnPatterns(ctx context.Context, in *GetSpawnPatternsRequest, opts ...grpc.CallOption) (*GetSpawnPatternsResponse, error)
	CreateSpawnPattern(ctx context.Context, in *CreateSpawnPatternRequest, opts ...grpc.CallOption) (*CreateSpawnPatternResponse, error)
	UpdateSpawnPattern(ctx context.Context, in *UpdateSpawnPatternRequest, opts ...grpc.CallOption) (*UpdateSpawnPatternResponse, error)
	// Constraint management
	AddSpawnConstraint(ctx context.Context, in *AddSpawnConstraintRequest, opts ...grpc.CallOption) (*AddSpawnConstraintResponse, error)
	RemoveSpawnConstraint(ctx context.Context, in *RemoveSpawnConstraintRequest, opts ...grpc.CallOption) (*RemoveSpawnConstraintResponse, error)
	GetSpawnConstraints(ctx context.Context, in *GetSpawnConstraintsRequest, opts ...grpc.CallOption) (*GetSpawnConstraintsResponse, error)
	ValidateSpawnPosition(ctx context.Context, in *ValidateSpawnPositionRequest, opts ...grpc.CallOption) (*ValidateSpawnPositionResponse, error)
	// Capacity analysis and optimization
	AnalyzeSpawnCapacity(ctx context.Context, in *AnalyzeSpawnCapacityRequest, opts ...grpc.CallOption) (*AnalyzeSpawnCapacityResponse, error)
	GetOptimalSpawnPositions(ctx context.Context, in *GetOptimalSpawnPositionsRequest, opts ...grpc.CallOption) (*GetOptimalSpawnPositionsResponse, error)
	RecommendRoomSplit(ctx context.Context, in *RecommendRoomSplitRequest, opts ...grpc.CallOption) (*RecommendRoomSplitResponse, error)
	// Spawn history and tracking
	GetSpawnHistory(ctx context.Context, in *GetSpawnHistoryRequest, opts ...grpc.CallOption) (*GetSpawnHistoryResponse, error)
	GetActiveSpawns(ctx context.Context, in *GetActiveSpawnsRequest, opts ...grpc.CallOption) (*GetActiveSpawnsResponse, error)
	DespawnEntity(ctx context.Context, in *DespawnEntityRequest, opts ...grpc.CallOption) (*DespawnEntityResponse, error)
}

type spawnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpawnServiceClient(cc grpc.ClientConnInterface) SpawnServiceClient {
	return &spawnServiceClient{cc}
}

func (c *spawnServiceClient) CreateSpawnEngine(ctx context.Context, in *CreateSpawnEngineRequest, opts ...grpc.CallOption) (*CreateSpawnEngineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSpawnEngineResponse)
	err := c.cc.Invoke(ctx, SpawnService_CreateSpawnEngine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) GetSpawnEngine(ctx context.Context, in *GetSpawnEngineRequest, opts ...grpc.CallOption) (*GetSpawnEngineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpawnEngineResponse)
	err := c.cc.Invoke(ctx, SpawnService_GetSpawnEngine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) DeleteSpawnEngine(ctx context.Context, in *DeleteSpawnEngineRequest, opts ...grpc.CallOption) (*DeleteSpawnEngineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSpawnEngineResponse)
	err := c.cc.Invoke(ctx, SpawnService_DeleteSpawnEngine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) SpawnEntity(ctx context.Context, in *SpawnEntityRequest, opts ...grpc.CallOption) (*SpawnEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpawnEntityResponse)
	err := c.cc.Invoke(ctx, SpawnService_SpawnEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) SpawnMultipleEntities(ctx context.Context, in *SpawnMultipleEntitiesRequest, opts ...grpc.CallOption) (*SpawnMultipleEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpawnMultipleEntitiesResponse)
	err := c.cc.Invoke(ctx, SpawnService_SpawnMultipleEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) SpawnFromPattern(ctx context.Context, in *SpawnFromPatternRequest, opts ...grpc.CallOption) (*SpawnFromPatternResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpawnFromPatternResponse)
	err := c.cc.Invoke(ctx, SpawnService_SpawnFromPattern_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) GetSpawnPatterns(ctx context.Context, in *GetSpawnPatternsRequest, opts ...grpc.CallOption) (*GetSpawnPatternsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpawnPatternsResponse)
	err := c.cc.Invoke(ctx, SpawnService_GetSpawnPatterns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) CreateSpawnPattern(ctx context.Context, in *CreateSpawnPatternRequest, opts ...grpc.CallOption) (*CreateSpawnPatternResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSpawnPatternResponse)
	err := c.cc.Invoke(ctx, SpawnService_CreateSpawnPattern_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) UpdateSpawnPattern(ctx context.Context, in *UpdateSpawnPatternRequest, opts ...grpc.CallOption) (*UpdateSpawnPatternResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSpawnPatternResponse)
	err := c.cc.Invoke(ctx, SpawnService_UpdateSpawnPattern_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) AddSpawnConstraint(ctx context.Context, in *AddSpawnConstraintRequest, opts ...grpc.CallOption) (*AddSpawnConstraintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSpawnConstraintResponse)
	err := c.cc.Invoke(ctx, SpawnService_AddSpawnConstraint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) RemoveSpawnConstraint(ctx context.Context, in *RemoveSpawnConstraintRequest, opts ...grpc.CallOption) (*RemoveSpawnConstraintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSpawnConstraintResponse)
	err := c.cc.Invoke(ctx, SpawnService_RemoveSpawnConstraint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) GetSpawnConstraints(ctx context.Context, in *GetSpawnConstraintsRequest, opts ...grpc.CallOption) (*GetSpawnConstraintsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpawnConstraintsResponse)
	err := c.cc.Invoke(ctx, SpawnService_GetSpawnConstraints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) ValidateSpawnPosition(ctx context.Context, in *ValidateSpawnPositionRequest, opts ...grpc.CallOption) (*ValidateSpawnPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSpawnPositionResponse)
	err := c.cc.Invoke(ctx, SpawnService_ValidateSpawnPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) AnalyzeSpawnCapacity(ctx context.Context, in *AnalyzeSpawnCapacityRequest, opts ...grpc.CallOption) (*AnalyzeSpawnCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeSpawnCapacityResponse)
	err := c.cc.Invoke(ctx, SpawnService_AnalyzeSpawnCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) GetOptimalSpawnPositions(ctx context.Context, in *GetOptimalSpawnPositionsRequest, opts ...grpc.CallOption) (*GetOptimalSpawnPositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOptimalSpawnPositionsResponse)
	err := c.cc.Invoke(ctx, SpawnService_GetOptimalSpawnPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) RecommendRoomSplit(ctx context.Context, in *RecommendRoomSplitRequest, opts ...grpc.CallOption) (*RecommendRoomSplitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendRoomSplitResponse)
	err := c.cc.Invoke(ctx, SpawnService_RecommendRoomSplit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) GetSpawnHistory(ctx context.Context, in *GetSpawnHistoryRequest, opts ...grpc.CallOption) (*GetSpawnHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpawnHistoryResponse)
	err := c.cc.Invoke(ctx, SpawnService_GetSpawnHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) GetActiveSpawns(ctx context.Context, in *GetActiveSpawnsRequest, opts ...grpc.CallOption) (*GetActiveSpawnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveSpawnsResponse)
	err := c.cc.Invoke(ctx, SpawnService_GetActiveSpawns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spawnServiceClient) DespawnEntity(ctx context.Context, in *DespawnEntityRequest, opts ...grpc.CallOption) (*DespawnEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DespawnEntityResponse)
	err := c.cc.Invoke(ctx, SpawnService_DespawnEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpawnServiceServer is the server API for SpawnService service.
// All implementations must embed UnimplementedSpawnServiceServer
// for forward compatibility.
//
// Spawn system service - exposes all spawn toolkit functionality
type SpawnServiceServer interface {
	// Spawn engine management
	CreateSpawnEngine(context.Context, *CreateSpawnEngineRequest) (*CreateSpawnEngineResponse, error)
	GetSpawnEngine(context.Context, *GetSpawnEngineRequest) (*GetSpawnEngineResponse, error)
	DeleteSpawnEngine(context.Context, *DeleteSpawnEngineRequest) (*DeleteSpawnEngineResponse, error)
	// Entity spawning
	SpawnEntity(context.Context, *SpawnEntityRequest) (*SpawnEntityResponse, error)
	SpawnMultipleEntities(context.Context, *SpawnMultipleEntitiesRequest) (*SpawnMultipleEntitiesResponse, error)
	SpawnFromPattern(context.Context, *SpawnFromPatternRequest) (*SpawnFromPatternResponse, error)
	// Spawn patterns and configurations
	GetSpawnPatterns(context.Context, *GetSpawnPatternsRequest) (*GetSpawnPatternsResponse, error)
	CreateSpawnPattern(context.Context, *CreateSpawnPatternRequest) (*CreateSpawnPatternResponse, error)
	UpdateSpawnPattern(context.Context, *UpdateSpawnPatternRequest) (*UpdateSpawnPatternResponse, error)
	// Constraint management
	AddSpawnConstraint(context.Context, *AddSpawnConstraintRequest) (*AddSpawnConstraintResponse, error)
	RemoveSpawnConstraint(context.Context, *RemoveSpawnConstraintRequest) (*RemoveSpawnConstraintResponse, error)
	GetSpawnConstraints(context.Context, *GetSpawnConstraintsRequest) (*GetSpawnConstraintsResponse, error)
	ValidateSpawnPosition(context.Context, *ValidateSpawnPositionRequest) (*ValidateSpawnPositionResponse, error)
	// Capacity analysis and optimization
	AnalyzeSpawnCapacity(context.Context, *AnalyzeSpawnCapacityRequest) (*AnalyzeSpawnCapacityResponse, error)
	GetOptimalSpawnPositions(context.Context, *GetOptimalSpawnPositionsRequest) (*GetOptimalSpawnPositionsResponse, error)
	RecommendRoomSplit(context.Context, *RecommendRoomSplitRequest) (*RecommendRoomSplitResponse, error)
	// Spawn history and tracking
	GetSpawnHistory(context.Context, *GetSpawnHistoryRequest) (*GetSpawnHistoryResponse, error)
	GetActiveSpawns(context.Context, *GetActiveSpawnsRequest) (*GetActiveSpawnsResponse, error)
	DespawnEntity(context.Context, *DespawnEntityRequest) (*DespawnEntityResponse, error)
	mustEmbedUnimplementedSpawnServiceServer()
}

// UnimplementedSpawnServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpawnServiceServer struct{}

func (UnimplementedSpawnServiceServer) CreateSpawnEngine(context.Context, *CreateSpawnEngineRequest) (*CreateSpawnEngineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpawnEngine not implemented")
}
func (UnimplementedSpawnServiceServer) GetSpawnEngine(context.Context, *GetSpawnEngineRequest) (*GetSpawnEngineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpawnEngine not implemented")
}
func (UnimplementedSpawnServiceServer) DeleteSpawnEngine(context.Context, *DeleteSpawnEngineRequest) (*DeleteSpawnEngineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpawnEngine not implemented")
}
func (UnimplementedSpawnServiceServer) SpawnEntity(context.Context, *SpawnEntityRequest) (*SpawnEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnEntity not implemented")
}
func (UnimplementedSpawnServiceServer) SpawnMultipleEntities(context.Context, *SpawnMultipleEntitiesRequest) (*SpawnMultipleEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnMultipleEntities not implemented")
}
func (UnimplementedSpawnServiceServer) SpawnFromPattern(context.Context, *SpawnFromPatternRequest) (*SpawnFromPatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnFromPattern not implemented")
}
func (UnimplementedSpawnServiceServer) GetSpawnPatterns(context.Context, *GetSpawnPatternsRequest) (*GetSpawnPatternsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpawnPatterns not implemented")
}
func (UnimplementedSpawnServiceServer) CreateSpawnPattern(context.Context, *CreateSpawnPatternRequest) (*CreateSpawnPatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpawnPattern not implemented")
}
func (UnimplementedSpawnServiceServer) UpdateSpawnPattern(context.Context, *UpdateSpawnPatternRequest) (*UpdateSpawnPatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpawnPattern not implemented")
}
func (UnimplementedSpawnServiceServer) AddSpawnConstraint(context.Context, *AddSpawnConstraintRequest) (*AddSpawnConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSpawnConstraint not implemented")
}
func (UnimplementedSpawnServiceServer) RemoveSpawnConstraint(context.Context, *RemoveSpawnConstraintRequest) (*RemoveSpawnConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSpawnConstraint not implemented")
}
func (UnimplementedSpawnServiceServer) GetSpawnConstraints(context.Context, *GetSpawnConstraintsRequest) (*GetSpawnConstraintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpawnConstraints not implemented")
}
func (UnimplementedSpawnServiceServer) ValidateSpawnPosition(context.Context, *ValidateSpawnPositionRequest) (*ValidateSpawnPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSpawnPosition not implemented")
}
func (UnimplementedSpawnServiceServer) AnalyzeSpawnCapacity(context.Context, *AnalyzeSpawnCapacityRequest) (*AnalyzeSpawnCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeSpawnCapacity not implemented")
}
func (UnimplementedSpawnServiceServer) GetOptimalSpawnPositions(context.Context, *GetOptimalSpawnPositionsRequest) (*GetOptimalSpawnPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptimalSpawnPositions not implemented")
}
func (UnimplementedSpawnServiceServer) RecommendRoomSplit(context.Context, *RecommendRoomSplitRequest) (*RecommendRoomSplitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendRoomSplit not implemented")
}
func (UnimplementedSpawnServiceServer) GetSpawnHistory(context.Context, *GetSpawnHistoryRequest) (*GetSpawnHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpawnHistory not implemented")
}
func (UnimplementedSpawnServiceServer) GetActiveSpawns(context.Context, *GetActiveSpawnsRequest) (*GetActiveSpawnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSpawns not implemented")
}
func (UnimplementedSpawnServiceServer) DespawnEntity(context.Context, *DespawnEntityRequest) (*DespawnEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DespawnEntity not implemented")
}
func (UnimplementedSpawnServiceServer) mustEmbedUnimplementedSpawnServiceServer() {}
func (UnimplementedSpawnServiceServer) testEmbeddedByValue()                      {}

// UnsafeSpawnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpawnServiceServer will
// result in compilation errors.
type UnsafeSpawnServiceServer interface {
	mustEmbedUnimplementedSpawnServiceServer()
}

func RegisterSpawnServiceServer(s grpc.ServiceRegistrar, srv SpawnServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpawnServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpawnService_ServiceDesc, srv)
}

func _SpawnService_CreateSpawnEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpawnEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).CreateSpawnEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_CreateSpawnEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).CreateSpawnEngine(ctx, req.(*CreateSpawnEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_GetSpawnEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpawnEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).GetSpawnEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_GetSpawnEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).GetSpawnEngine(ctx, req.(*GetSpawnEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_DeleteSpawnEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpawnEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).DeleteSpawnEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_DeleteSpawnEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).DeleteSpawnEngine(ctx, req.(*DeleteSpawnEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_SpawnEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).SpawnEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_SpawnEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).SpawnEntity(ctx, req.(*SpawnEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_SpawnMultipleEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnMultipleEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).SpawnMultipleEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_SpawnMultipleEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).SpawnMultipleEntities(ctx, req.(*SpawnMultipleEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_SpawnFromPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnFromPatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).SpawnFromPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_SpawnFromPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).SpawnFromPattern(ctx, req.(*SpawnFromPatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_GetSpawnPatterns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpawnPatternsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).GetSpawnPatterns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_GetSpawnPatterns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).GetSpawnPatterns(ctx, req.(*GetSpawnPatternsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_CreateSpawnPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpawnPatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).CreateSpawnPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_CreateSpawnPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).CreateSpawnPattern(ctx, req.(*CreateSpawnPatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_UpdateSpawnPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpawnPatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).UpdateSpawnPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_UpdateSpawnPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).UpdateSpawnPattern(ctx, req.(*UpdateSpawnPatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_AddSpawnConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSpawnConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).AddSpawnConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_AddSpawnConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).AddSpawnConstraint(ctx, req.(*AddSpawnConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_RemoveSpawnConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSpawnConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).RemoveSpawnConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_RemoveSpawnConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).RemoveSpawnConstraint(ctx, req.(*RemoveSpawnConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_GetSpawnConstraints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpawnConstraintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).GetSpawnConstraints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_GetSpawnConstraints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).GetSpawnConstraints(ctx, req.(*GetSpawnConstraintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_ValidateSpawnPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSpawnPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).ValidateSpawnPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_ValidateSpawnPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).ValidateSpawnPosition(ctx, req.(*ValidateSpawnPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_AnalyzeSpawnCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeSpawnCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).AnalyzeSpawnCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_AnalyzeSpawnCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).AnalyzeSpawnCapacity(ctx, req.(*AnalyzeSpawnCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_GetOptimalSpawnPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOptimalSpawnPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).GetOptimalSpawnPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_GetOptimalSpawnPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).GetOptimalSpawnPositions(ctx, req.(*GetOptimalSpawnPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_RecommendRoomSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendRoomSplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).RecommendRoomSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_RecommendRoomSplit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).RecommendRoomSplit(ctx, req.(*RecommendRoomSplitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_GetSpawnHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpawnHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).GetSpawnHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_GetSpawnHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).GetSpawnHistory(ctx, req.(*GetSpawnHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_GetActiveSpawns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSpawnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).GetActiveSpawns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_GetActiveSpawns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).GetActiveSpawns(ctx, req.(*GetActiveSpawnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpawnService_DespawnEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DespawnEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnServiceServer).DespawnEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpawnService_DespawnEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnServiceServer).DespawnEntity(ctx, req.(*DespawnEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpawnService_ServiceDesc is the grpc.ServiceDesc for SpawnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpawnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seshat.SpawnService",
	HandlerType: (*SpawnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpawnEngine",
			Handler:    _SpawnService_CreateSpawnEngine_Handler,
		},
		{
			MethodName: "GetSpawnEngine",
			Handler:    _SpawnService_GetSpawnEngine_Handler,
		},
		{
			MethodName: "DeleteSpawnEngine",
			Handler:    _SpawnService_DeleteSpawnEngine_Handler,
		},
		{
			MethodName: "SpawnEntity",
			Handler:    _SpawnService_SpawnEntity_Handler,
		},
		{
			MethodName: "SpawnMultipleEntities",
			Handler:    _SpawnService_SpawnMultipleEntities_Handler,
		},
		{
			MethodName: "SpawnFromPattern",
			Handler:    _SpawnService_SpawnFromPattern_Handler,
		},
		{
			MethodName: "GetSpawnPatterns",
			Handler:    _SpawnService_GetSpawnPatterns_Handler,
		},
		{
			MethodName: "CreateSpawnPattern",
			Handler:    _SpawnService_CreateSpawnPattern_Handler,
		},
		{
			MethodName: "UpdateSpawnPattern",
			Handler:    _SpawnService_UpdateSpawnPattern_Handler,
		},
		{
			MethodName: "AddSpawnConstraint",
			Handler:    _SpawnService_AddSpawnConstraint_Handler,
		},
		{
			MethodName: "RemoveSpawnConstraint",
			Handler:    _SpawnService_RemoveSpawnConstraint_Handler,
		},
		{
			MethodName: "GetSpawnConstraints",
			Handler:    _SpawnService_GetSpawnConstraints_Handler,
		},
		{
			MethodName: "ValidateSpawnPosition",
			Handler:    _SpawnService_ValidateSpawnPosition_Handler,
		},
		{
			MethodName: "AnalyzeSpawnCapacity",
			Handler:    _SpawnService_AnalyzeSpawnCapacity_Handler,
		},
		{
			MethodName: "GetOptimalSpawnPositions",
			Handler:    _SpawnService_GetOptimalSpawnPositions_Handler,
		},
		{
			MethodName: "RecommendRoomSplit",
			Handler:    _SpawnService_RecommendRoomSplit_Handler,
		},
		{
			MethodName: "GetSpawnHistory",
			Handler:    _SpawnService_GetSpawnHistory_Handler,
		},
		{
			MethodName: "GetActiveSpawns",
			Handler:    _SpawnService_GetActiveSpawns_Handler,
		},
		{
			MethodName: "DespawnEntity",
			Handler:    _SpawnService_DespawnEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seshat/spawn.proto",
}

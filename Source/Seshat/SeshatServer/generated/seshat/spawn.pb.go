// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: seshat/spawn.proto

package seshat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpawnTiming int32

const (
	SpawnTiming_SPAWN_TIMING_UNSPECIFIED SpawnTiming = 0
	SpawnTiming_SPAWN_TIMING_IMMEDIATE   SpawnTiming = 1 // Spawn right away
	SpawnTiming_SPAWN_TIMING_DELAYED     SpawnTiming = 2 // Wait for interval
	SpawnTiming_SPAWN_TIMING_TRIGGERED   SpawnTiming = 3 // Wait for specific trigger
	SpawnTiming_SPAWN_TIMING_CONDITIONAL SpawnTiming = 4 // Based on conditions
)

// Enum value maps for SpawnTiming.
var (
	SpawnTiming_name = map[int32]string{
		0: "SPAWN_TIMING_UNSPECIFIED",
		1: "SPAWN_TIMING_IMMEDIATE",
		2: "SPAWN_TIMING_DELAYED",
		3: "SPAWN_TIMING_TRIGGERED",
		4: "SPAWN_TIMING_CONDITIONAL",
	}
	SpawnTiming_value = map[string]int32{
		"SPAWN_TIMING_UNSPECIFIED": 0,
		"SPAWN_TIMING_IMMEDIATE":   1,
		"SPAWN_TIMING_DELAYED":     2,
		"SPAWN_TIMING_TRIGGERED":   3,
		"SPAWN_TIMING_CONDITIONAL": 4,
	}
)

func (x SpawnTiming) Enum() *SpawnTiming {
	p := new(SpawnTiming)
	*p = x
	return p
}

func (x SpawnTiming) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpawnTiming) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_spawn_proto_enumTypes[0].Descriptor()
}

func (SpawnTiming) Type() protoreflect.EnumType {
	return &file_seshat_spawn_proto_enumTypes[0]
}

func (x SpawnTiming) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpawnTiming.Descriptor instead.
func (SpawnTiming) EnumDescriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{0}
}

type PatternType int32

const (
	PatternType_PATTERN_TYPE_UNSPECIFIED   PatternType = 0
	PatternType_PATTERN_TYPE_SCATTERED     PatternType = 1 // Random positions
	PatternType_PATTERN_TYPE_CLUSTERED     PatternType = 2 // Groups near each other
	PatternType_PATTERN_TYPE_FORMATION     PatternType = 3 // Specific formation (line, circle, etc.)
	PatternType_PATTERN_TYPE_PERIMETER     PatternType = 4 // Around room edges
	PatternType_PATTERN_TYPE_CENTRAL       PatternType = 5 // Near room center
	PatternType_PATTERN_TYPE_TEAM_BASED    PatternType = 6 // Teams with internal formations
	PatternType_PATTERN_TYPE_PLAYER_CHOICE PatternType = 7 // Let player choose positions
	PatternType_PATTERN_TYPE_ENVIRONMENTAL PatternType = 8 // Based on room features
)

// Enum value maps for PatternType.
var (
	PatternType_name = map[int32]string{
		0: "PATTERN_TYPE_UNSPECIFIED",
		1: "PATTERN_TYPE_SCATTERED",
		2: "PATTERN_TYPE_CLUSTERED",
		3: "PATTERN_TYPE_FORMATION",
		4: "PATTERN_TYPE_PERIMETER",
		5: "PATTERN_TYPE_CENTRAL",
		6: "PATTERN_TYPE_TEAM_BASED",
		7: "PATTERN_TYPE_PLAYER_CHOICE",
		8: "PATTERN_TYPE_ENVIRONMENTAL",
	}
	PatternType_value = map[string]int32{
		"PATTERN_TYPE_UNSPECIFIED":   0,
		"PATTERN_TYPE_SCATTERED":     1,
		"PATTERN_TYPE_CLUSTERED":     2,
		"PATTERN_TYPE_FORMATION":     3,
		"PATTERN_TYPE_PERIMETER":     4,
		"PATTERN_TYPE_CENTRAL":       5,
		"PATTERN_TYPE_TEAM_BASED":    6,
		"PATTERN_TYPE_PLAYER_CHOICE": 7,
		"PATTERN_TYPE_ENVIRONMENTAL": 8,
	}
)

func (x PatternType) Enum() *PatternType {
	p := new(PatternType)
	*p = x
	return p
}

func (x PatternType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternType) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_spawn_proto_enumTypes[1].Descriptor()
}

func (PatternType) Type() protoreflect.EnumType {
	return &file_seshat_spawn_proto_enumTypes[1]
}

func (x PatternType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternType.Descriptor instead.
func (PatternType) EnumDescriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{1}
}

type ConstraintType int32

const (
	ConstraintType_CONSTRAINT_TYPE_UNSPECIFIED    ConstraintType = 0
	ConstraintType_CONSTRAINT_TYPE_SPATIAL        ConstraintType = 1 // Position-based constraints
	ConstraintType_CONSTRAINT_TYPE_LINE_OF_SIGHT  ConstraintType = 2 // Visibility requirements
	ConstraintType_CONSTRAINT_TYPE_DISTANCE       ConstraintType = 3 // Distance from other entities/features
	ConstraintType_CONSTRAINT_TYPE_AREA_OF_EFFECT ConstraintType = 4 // Avoid AoE spell areas
	ConstraintType_CONSTRAINT_TYPE_WALL_PROXIMITY ConstraintType = 5 // Near/far from walls
	ConstraintType_CONSTRAINT_TYPE_ENTITY_TYPE    ConstraintType = 6 // Based on other entity types present
	ConstraintType_CONSTRAINT_TYPE_ENVIRONMENTAL  ConstraintType = 7 // Based on room features
	ConstraintType_CONSTRAINT_TYPE_CUSTOM         ConstraintType = 8 // User-defined constraints
)

// Enum value maps for ConstraintType.
var (
	ConstraintType_name = map[int32]string{
		0: "CONSTRAINT_TYPE_UNSPECIFIED",
		1: "CONSTRAINT_TYPE_SPATIAL",
		2: "CONSTRAINT_TYPE_LINE_OF_SIGHT",
		3: "CONSTRAINT_TYPE_DISTANCE",
		4: "CONSTRAINT_TYPE_AREA_OF_EFFECT",
		5: "CONSTRAINT_TYPE_WALL_PROXIMITY",
		6: "CONSTRAINT_TYPE_ENTITY_TYPE",
		7: "CONSTRAINT_TYPE_ENVIRONMENTAL",
		8: "CONSTRAINT_TYPE_CUSTOM",
	}
	ConstraintType_value = map[string]int32{
		"CONSTRAINT_TYPE_UNSPECIFIED":    0,
		"CONSTRAINT_TYPE_SPATIAL":        1,
		"CONSTRAINT_TYPE_LINE_OF_SIGHT":  2,
		"CONSTRAINT_TYPE_DISTANCE":       3,
		"CONSTRAINT_TYPE_AREA_OF_EFFECT": 4,
		"CONSTRAINT_TYPE_WALL_PROXIMITY": 5,
		"CONSTRAINT_TYPE_ENTITY_TYPE":    6,
		"CONSTRAINT_TYPE_ENVIRONMENTAL":  7,
		"CONSTRAINT_TYPE_CUSTOM":         8,
	}
)

func (x ConstraintType) Enum() *ConstraintType {
	p := new(ConstraintType)
	*p = x
	return p
}

func (x ConstraintType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintType) Descriptor() protoreflect.EnumDescriptor {
	return file_seshat_spawn_proto_enumTypes[2].Descriptor()
}

func (ConstraintType) Type() protoreflect.EnumType {
	return &file_seshat_spawn_proto_enumTypes[2]
}

func (x ConstraintType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintType.Descriptor instead.
func (ConstraintType) EnumDescriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{2}
}

// Core spawn engine structure
type SpawnEngine struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	RoomId             string                 `protobuf:"bytes,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // Room this engine operates in
	Config             *SpawnConfiguration    `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	Constraints        []*SpawnConstraint     `protobuf:"bytes,6,rep,name=constraints,proto3" json:"constraints,omitempty"`
	Patterns           []*SpawnPattern        `protobuf:"bytes,7,rep,name=patterns,proto3" json:"patterns,omitempty"`
	EntityTable        *SelectionTable        `protobuf:"bytes,8,opt,name=entity_table,json=entityTable,proto3" json:"entity_table,omitempty"` // What entities can be spawned
	Properties         map[string]string      `protobuf:"bytes,9,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreatedTimestamp   int64                  `protobuf:"varint,10,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	LastSpawnTimestamp int64                  `protobuf:"varint,11,opt,name=last_spawn_timestamp,json=lastSpawnTimestamp,proto3" json:"last_spawn_timestamp,omitempty"`
	TotalSpawns        int32                  `protobuf:"varint,12,opt,name=total_spawns,json=totalSpawns,proto3" json:"total_spawns,omitempty"`
	IsActive           bool                   `protobuf:"varint,13,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SpawnEngine) Reset() {
	*x = SpawnEngine{}
	mi := &file_seshat_spawn_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnEngine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnEngine) ProtoMessage() {}

func (x *SpawnEngine) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnEngine.ProtoReflect.Descriptor instead.
func (*SpawnEngine) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{0}
}

func (x *SpawnEngine) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SpawnEngine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpawnEngine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpawnEngine) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *SpawnEngine) GetConfig() *SpawnConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SpawnEngine) GetConstraints() []*SpawnConstraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *SpawnEngine) GetPatterns() []*SpawnPattern {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *SpawnEngine) GetEntityTable() *SelectionTable {
	if x != nil {
		return x.EntityTable
	}
	return nil
}

func (x *SpawnEngine) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SpawnEngine) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

func (x *SpawnEngine) GetLastSpawnTimestamp() int64 {
	if x != nil {
		return x.LastSpawnTimestamp
	}
	return 0
}

func (x *SpawnEngine) GetTotalSpawns() int32 {
	if x != nil {
		return x.TotalSpawns
	}
	return 0
}

func (x *SpawnEngine) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SpawnConfiguration struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MaxEntities     int32                  `protobuf:"varint,1,opt,name=max_entities,json=maxEntities,proto3" json:"max_entities,omitempty"`             // Maximum entities this engine can spawn
	SpawnRate       int32                  `protobuf:"varint,2,opt,name=spawn_rate,json=spawnRate,proto3" json:"spawn_rate,omitempty"`                   // Entities per minute/turn/etc.
	SpawnInterval   *Duration              `protobuf:"bytes,3,opt,name=spawn_interval,json=spawnInterval,proto3" json:"spawn_interval,omitempty"`        // How often to attempt spawning
	RespectCapacity bool                   `protobuf:"varint,4,opt,name=respect_capacity,json=respectCapacity,proto3" json:"respect_capacity,omitempty"` // Honor room capacity limits
	AllowOverlap    bool                   `protobuf:"varint,5,opt,name=allow_overlap,json=allowOverlap,proto3" json:"allow_overlap,omitempty"`          // Allow entities on same position
	AutoDespawn     bool                   `protobuf:"varint,6,opt,name=auto_despawn,json=autoDespawn,proto3" json:"auto_despawn,omitempty"`             // Remove entities when room is full
	Timing          SpawnTiming            `protobuf:"varint,7,opt,name=timing,proto3,enum=seshat.SpawnTiming" json:"timing,omitempty"`
	SpawnTriggers   []string               `protobuf:"bytes,8,rep,name=spawn_triggers,json=spawnTriggers,proto3" json:"spawn_triggers,omitempty"` // "player_enter", "combat_start", etc.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SpawnConfiguration) Reset() {
	*x = SpawnConfiguration{}
	mi := &file_seshat_spawn_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnConfiguration) ProtoMessage() {}

func (x *SpawnConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnConfiguration.ProtoReflect.Descriptor instead.
func (*SpawnConfiguration) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{1}
}

func (x *SpawnConfiguration) GetMaxEntities() int32 {
	if x != nil {
		return x.MaxEntities
	}
	return 0
}

func (x *SpawnConfiguration) GetSpawnRate() int32 {
	if x != nil {
		return x.SpawnRate
	}
	return 0
}

func (x *SpawnConfiguration) GetSpawnInterval() *Duration {
	if x != nil {
		return x.SpawnInterval
	}
	return nil
}

func (x *SpawnConfiguration) GetRespectCapacity() bool {
	if x != nil {
		return x.RespectCapacity
	}
	return false
}

func (x *SpawnConfiguration) GetAllowOverlap() bool {
	if x != nil {
		return x.AllowOverlap
	}
	return false
}

func (x *SpawnConfiguration) GetAutoDespawn() bool {
	if x != nil {
		return x.AutoDespawn
	}
	return false
}

func (x *SpawnConfiguration) GetTiming() SpawnTiming {
	if x != nil {
		return x.Timing
	}
	return SpawnTiming_SPAWN_TIMING_UNSPECIFIED
}

func (x *SpawnConfiguration) GetSpawnTriggers() []string {
	if x != nil {
		return x.SpawnTriggers
	}
	return nil
}

// Spawn patterns define HOW entities are placed
type SpawnPattern struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Type               PatternType            `protobuf:"varint,4,opt,name=type,proto3,enum=seshat.PatternType" json:"type,omitempty"`
	Parameters         *PatternParameters     `protobuf:"bytes,5,opt,name=parameters,proto3" json:"parameters,omitempty"`
	PatternConstraints []*SpawnConstraint     `protobuf:"bytes,6,rep,name=pattern_constraints,json=patternConstraints,proto3" json:"pattern_constraints,omitempty"`
	MinEntities        int32                  `protobuf:"varint,7,opt,name=min_entities,json=minEntities,proto3" json:"min_entities,omitempty"` // Minimum to spawn with this pattern
	MaxEntities        int32                  `protobuf:"varint,8,opt,name=max_entities,json=maxEntities,proto3" json:"max_entities,omitempty"` // Maximum to spawn with this pattern
	Weight             float32                `protobuf:"fixed32,9,opt,name=weight,proto3" json:"weight,omitempty"`                             // Selection weight vs other patterns
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SpawnPattern) Reset() {
	*x = SpawnPattern{}
	mi := &file_seshat_spawn_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnPattern) ProtoMessage() {}

func (x *SpawnPattern) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnPattern.ProtoReflect.Descriptor instead.
func (*SpawnPattern) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{2}
}

func (x *SpawnPattern) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SpawnPattern) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpawnPattern) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpawnPattern) GetType() PatternType {
	if x != nil {
		return x.Type
	}
	return PatternType_PATTERN_TYPE_UNSPECIFIED
}

func (x *SpawnPattern) GetParameters() *PatternParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SpawnPattern) GetPatternConstraints() []*SpawnConstraint {
	if x != nil {
		return x.PatternConstraints
	}
	return nil
}

func (x *SpawnPattern) GetMinEntities() int32 {
	if x != nil {
		return x.MinEntities
	}
	return 0
}

func (x *SpawnPattern) GetMaxEntities() int32 {
	if x != nil {
		return x.MaxEntities
	}
	return 0
}

func (x *SpawnPattern) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type PatternParameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Scattered parameters
	MinDistance int32 `protobuf:"varint,1,opt,name=min_distance,json=minDistance,proto3" json:"min_distance,omitempty"` // Minimum distance between entities
	MaxDistance int32 `protobuf:"varint,2,opt,name=max_distance,json=maxDistance,proto3" json:"max_distance,omitempty"` // Maximum distance between entities
	// Clustered parameters
	ClusterSize       int32 `protobuf:"varint,3,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`                   // Entities per cluster
	ClusterRadius     int32 `protobuf:"varint,4,opt,name=cluster_radius,json=clusterRadius,proto3" json:"cluster_radius,omitempty"`             // Size of each cluster
	ClusterSeparation int32 `protobuf:"varint,5,opt,name=cluster_separation,json=clusterSeparation,proto3" json:"cluster_separation,omitempty"` // Distance between clusters
	// Formation parameters
	FormationShape   string `protobuf:"bytes,6,opt,name=formation_shape,json=formationShape,proto3" json:"formation_shape,omitempty"`        // "line", "circle", "triangle", "wedge"
	FormationSpacing int32  `protobuf:"varint,7,opt,name=formation_spacing,json=formationSpacing,proto3" json:"formation_spacing,omitempty"` // Distance between formation positions
	FormationFacing  string `protobuf:"bytes,8,opt,name=formation_facing,json=formationFacing,proto3" json:"formation_facing,omitempty"`     // "north", "player", "center", etc.
	// Team-based parameters
	TeamCount      int32 `protobuf:"varint,9,opt,name=team_count,json=teamCount,proto3" json:"team_count,omitempty"`                 // Number of teams
	TeamSize       int32 `protobuf:"varint,10,opt,name=team_size,json=teamSize,proto3" json:"team_size,omitempty"`                   // Entities per team
	TeamSeparation int32 `protobuf:"varint,11,opt,name=team_separation,json=teamSeparation,proto3" json:"team_separation,omitempty"` // Distance between teams
	// Environmental parameters
	PreferredFeatures []string          `protobuf:"bytes,12,rep,name=preferred_features,json=preferredFeatures,proto3" json:"preferred_features,omitempty"` // "walls", "corners", "open_space"
	AvoidedFeatures   []string          `protobuf:"bytes,13,rep,name=avoided_features,json=avoidedFeatures,proto3" json:"avoided_features,omitempty"`       // Features to avoid
	CustomParameters  map[string]string `protobuf:"bytes,14,rep,name=custom_parameters,json=customParameters,proto3" json:"custom_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PatternParameters) Reset() {
	*x = PatternParameters{}
	mi := &file_seshat_spawn_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatternParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternParameters) ProtoMessage() {}

func (x *PatternParameters) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternParameters.ProtoReflect.Descriptor instead.
func (*PatternParameters) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{3}
}

func (x *PatternParameters) GetMinDistance() int32 {
	if x != nil {
		return x.MinDistance
	}
	return 0
}

func (x *PatternParameters) GetMaxDistance() int32 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *PatternParameters) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *PatternParameters) GetClusterRadius() int32 {
	if x != nil {
		return x.ClusterRadius
	}
	return 0
}

func (x *PatternParameters) GetClusterSeparation() int32 {
	if x != nil {
		return x.ClusterSeparation
	}
	return 0
}

func (x *PatternParameters) GetFormationShape() string {
	if x != nil {
		return x.FormationShape
	}
	return ""
}

func (x *PatternParameters) GetFormationSpacing() int32 {
	if x != nil {
		return x.FormationSpacing
	}
	return 0
}

func (x *PatternParameters) GetFormationFacing() string {
	if x != nil {
		return x.FormationFacing
	}
	return ""
}

func (x *PatternParameters) GetTeamCount() int32 {
	if x != nil {
		return x.TeamCount
	}
	return 0
}

func (x *PatternParameters) GetTeamSize() int32 {
	if x != nil {
		return x.TeamSize
	}
	return 0
}

func (x *PatternParameters) GetTeamSeparation() int32 {
	if x != nil {
		return x.TeamSeparation
	}
	return 0
}

func (x *PatternParameters) GetPreferredFeatures() []string {
	if x != nil {
		return x.PreferredFeatures
	}
	return nil
}

func (x *PatternParameters) GetAvoidedFeatures() []string {
	if x != nil {
		return x.AvoidedFeatures
	}
	return nil
}

func (x *PatternParameters) GetCustomParameters() map[string]string {
	if x != nil {
		return x.CustomParameters
	}
	return nil
}

// Spawn constraints limit WHERE entities can be placed
type SpawnConstraint struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type             ConstraintType         `protobuf:"varint,3,opt,name=type,proto3,enum=seshat.ConstraintType" json:"type,omitempty"`
	Parameters       *ConstraintParameters  `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	IsHardConstraint bool                   `protobuf:"varint,5,opt,name=is_hard_constraint,json=isHardConstraint,proto3" json:"is_hard_constraint,omitempty"` // Must be satisfied vs nice-to-have
	ViolationPenalty float32                `protobuf:"fixed32,6,opt,name=violation_penalty,json=violationPenalty,proto3" json:"violation_penalty,omitempty"`  // Cost of violating soft constraints
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SpawnConstraint) Reset() {
	*x = SpawnConstraint{}
	mi := &file_seshat_spawn_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnConstraint) ProtoMessage() {}

func (x *SpawnConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnConstraint.ProtoReflect.Descriptor instead.
func (*SpawnConstraint) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{4}
}

func (x *SpawnConstraint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SpawnConstraint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpawnConstraint) GetType() ConstraintType {
	if x != nil {
		return x.Type
	}
	return ConstraintType_CONSTRAINT_TYPE_UNSPECIFIED
}

func (x *SpawnConstraint) GetParameters() *ConstraintParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SpawnConstraint) GetIsHardConstraint() bool {
	if x != nil {
		return x.IsHardConstraint
	}
	return false
}

func (x *SpawnConstraint) GetViolationPenalty() float32 {
	if x != nil {
		return x.ViolationPenalty
	}
	return 0
}

type ConstraintParameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Spatial constraints
	MinPosition        *Position   `protobuf:"bytes,1,opt,name=min_position,json=minPosition,proto3" json:"min_position,omitempty"`
	MaxPosition        *Position   `protobuf:"bytes,2,opt,name=max_position,json=maxPosition,proto3" json:"max_position,omitempty"`
	ForbiddenPositions []*Position `protobuf:"bytes,3,rep,name=forbidden_positions,json=forbiddenPositions,proto3" json:"forbidden_positions,omitempty"`
	RequiredPositions  []*Position `protobuf:"bytes,4,rep,name=required_positions,json=requiredPositions,proto3" json:"required_positions,omitempty"`
	// Line of sight constraints
	RequiresLineOfSightToPlayer bool     `protobuf:"varint,5,opt,name=requires_line_of_sight_to_player,json=requiresLineOfSightToPlayer,proto3" json:"requires_line_of_sight_to_player,omitempty"`
	RequiresLineOfSightToCenter bool     `protobuf:"varint,6,opt,name=requires_line_of_sight_to_center,json=requiresLineOfSightToCenter,proto3" json:"requires_line_of_sight_to_center,omitempty"`
	LineOfSightTargets          []string `protobuf:"bytes,7,rep,name=line_of_sight_targets,json=lineOfSightTargets,proto3" json:"line_of_sight_targets,omitempty"` // Entity IDs
	// Distance constraints
	MinDistanceFromPlayer   int32    `protobuf:"varint,8,opt,name=min_distance_from_player,json=minDistanceFromPlayer,proto3" json:"min_distance_from_player,omitempty"`
	MaxDistanceFromPlayer   int32    `protobuf:"varint,9,opt,name=max_distance_from_player,json=maxDistanceFromPlayer,proto3" json:"max_distance_from_player,omitempty"`
	MinDistanceFromEntities int32    `protobuf:"varint,10,opt,name=min_distance_from_entities,json=minDistanceFromEntities,proto3" json:"min_distance_from_entities,omitempty"`
	MaxDistanceFromEntities int32    `protobuf:"varint,11,opt,name=max_distance_from_entities,json=maxDistanceFromEntities,proto3" json:"max_distance_from_entities,omitempty"`
	DistanceEntityTypes     []string `protobuf:"bytes,12,rep,name=distance_entity_types,json=distanceEntityTypes,proto3" json:"distance_entity_types,omitempty"`
	// Wall proximity constraints
	MinDistanceFromWalls int32 `protobuf:"varint,13,opt,name=min_distance_from_walls,json=minDistanceFromWalls,proto3" json:"min_distance_from_walls,omitempty"`
	MaxDistanceFromWalls int32 `protobuf:"varint,14,opt,name=max_distance_from_walls,json=maxDistanceFromWalls,proto3" json:"max_distance_from_walls,omitempty"`
	// Environmental constraints
	RequiredFeatures []string          `protobuf:"bytes,15,rep,name=required_features,json=requiredFeatures,proto3" json:"required_features,omitempty"` // Must be near these features
	AvoidedFeatures  []string          `protobuf:"bytes,16,rep,name=avoided_features,json=avoidedFeatures,proto3" json:"avoided_features,omitempty"`    // Must avoid these features
	CustomParameters map[string]string `protobuf:"bytes,17,rep,name=custom_parameters,json=customParameters,proto3" json:"custom_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConstraintParameters) Reset() {
	*x = ConstraintParameters{}
	mi := &file_seshat_spawn_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstraintParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintParameters) ProtoMessage() {}

func (x *ConstraintParameters) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintParameters.ProtoReflect.Descriptor instead.
func (*ConstraintParameters) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{5}
}

func (x *ConstraintParameters) GetMinPosition() *Position {
	if x != nil {
		return x.MinPosition
	}
	return nil
}

func (x *ConstraintParameters) GetMaxPosition() *Position {
	if x != nil {
		return x.MaxPosition
	}
	return nil
}

func (x *ConstraintParameters) GetForbiddenPositions() []*Position {
	if x != nil {
		return x.ForbiddenPositions
	}
	return nil
}

func (x *ConstraintParameters) GetRequiredPositions() []*Position {
	if x != nil {
		return x.RequiredPositions
	}
	return nil
}

func (x *ConstraintParameters) GetRequiresLineOfSightToPlayer() bool {
	if x != nil {
		return x.RequiresLineOfSightToPlayer
	}
	return false
}

func (x *ConstraintParameters) GetRequiresLineOfSightToCenter() bool {
	if x != nil {
		return x.RequiresLineOfSightToCenter
	}
	return false
}

func (x *ConstraintParameters) GetLineOfSightTargets() []string {
	if x != nil {
		return x.LineOfSightTargets
	}
	return nil
}

func (x *ConstraintParameters) GetMinDistanceFromPlayer() int32 {
	if x != nil {
		return x.MinDistanceFromPlayer
	}
	return 0
}

func (x *ConstraintParameters) GetMaxDistanceFromPlayer() int32 {
	if x != nil {
		return x.MaxDistanceFromPlayer
	}
	return 0
}

func (x *ConstraintParameters) GetMinDistanceFromEntities() int32 {
	if x != nil {
		return x.MinDistanceFromEntities
	}
	return 0
}

func (x *ConstraintParameters) GetMaxDistanceFromEntities() int32 {
	if x != nil {
		return x.MaxDistanceFromEntities
	}
	return 0
}

func (x *ConstraintParameters) GetDistanceEntityTypes() []string {
	if x != nil {
		return x.DistanceEntityTypes
	}
	return nil
}

func (x *ConstraintParameters) GetMinDistanceFromWalls() int32 {
	if x != nil {
		return x.MinDistanceFromWalls
	}
	return 0
}

func (x *ConstraintParameters) GetMaxDistanceFromWalls() int32 {
	if x != nil {
		return x.MaxDistanceFromWalls
	}
	return 0
}

func (x *ConstraintParameters) GetRequiredFeatures() []string {
	if x != nil {
		return x.RequiredFeatures
	}
	return nil
}

func (x *ConstraintParameters) GetAvoidedFeatures() []string {
	if x != nil {
		return x.AvoidedFeatures
	}
	return nil
}

func (x *ConstraintParameters) GetCustomParameters() map[string]string {
	if x != nil {
		return x.CustomParameters
	}
	return nil
}

// Spawn operations
type CreateSpawnEngineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        string                 `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Config        *SpawnConfiguration    `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	EntityTable   *SelectionTable        `protobuf:"bytes,5,opt,name=entity_table,json=entityTable,proto3" json:"entity_table,omitempty"` // What entities can be spawned
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSpawnEngineRequest) Reset() {
	*x = CreateSpawnEngineRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSpawnEngineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSpawnEngineRequest) ProtoMessage() {}

func (x *CreateSpawnEngineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSpawnEngineRequest.ProtoReflect.Descriptor instead.
func (*CreateSpawnEngineRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSpawnEngineRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *CreateSpawnEngineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSpawnEngineRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSpawnEngineRequest) GetConfig() *SpawnConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateSpawnEngineRequest) GetEntityTable() *SelectionTable {
	if x != nil {
		return x.EntityTable
	}
	return nil
}

type CreateSpawnEngineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Engine        *SpawnEngine           `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSpawnEngineResponse) Reset() {
	*x = CreateSpawnEngineResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSpawnEngineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSpawnEngineResponse) ProtoMessage() {}

func (x *CreateSpawnEngineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSpawnEngineResponse.ProtoReflect.Descriptor instead.
func (*CreateSpawnEngineResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{7}
}

func (x *CreateSpawnEngineResponse) GetEngine() *SpawnEngine {
	if x != nil {
		return x.Engine
	}
	return nil
}

func (x *CreateSpawnEngineResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetSpawnEngineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	RoomId        string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // Alternative: get by room
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpawnEngineRequest) Reset() {
	*x = GetSpawnEngineRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpawnEngineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpawnEngineRequest) ProtoMessage() {}

func (x *GetSpawnEngineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpawnEngineRequest.ProtoReflect.Descriptor instead.
func (*GetSpawnEngineRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{8}
}

func (x *GetSpawnEngineRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *GetSpawnEngineRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type GetSpawnEngineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Engine        *SpawnEngine           `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpawnEngineResponse) Reset() {
	*x = GetSpawnEngineResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpawnEngineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpawnEngineResponse) ProtoMessage() {}

func (x *GetSpawnEngineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpawnEngineResponse.ProtoReflect.Descriptor instead.
func (*GetSpawnEngineResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{9}
}

func (x *GetSpawnEngineResponse) GetEngine() *SpawnEngine {
	if x != nil {
		return x.Engine
	}
	return nil
}

func (x *GetSpawnEngineResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteSpawnEngineRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EngineId        string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	DespawnEntities bool                   `protobuf:"varint,2,opt,name=despawn_entities,json=despawnEntities,proto3" json:"despawn_entities,omitempty"` // Remove spawned entities too
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeleteSpawnEngineRequest) Reset() {
	*x = DeleteSpawnEngineRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSpawnEngineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSpawnEngineRequest) ProtoMessage() {}

func (x *DeleteSpawnEngineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSpawnEngineRequest.ProtoReflect.Descriptor instead.
func (*DeleteSpawnEngineRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteSpawnEngineRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *DeleteSpawnEngineRequest) GetDespawnEntities() bool {
	if x != nil {
		return x.DespawnEntities
	}
	return false
}

type DeleteSpawnEngineResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DespawnedEntities int32                  `protobuf:"varint,1,opt,name=despawned_entities,json=despawnedEntities,proto3" json:"despawned_entities,omitempty"`
	Status            *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeleteSpawnEngineResponse) Reset() {
	*x = DeleteSpawnEngineResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSpawnEngineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSpawnEngineResponse) ProtoMessage() {}

func (x *DeleteSpawnEngineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSpawnEngineResponse.ProtoReflect.Descriptor instead.
func (*DeleteSpawnEngineResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteSpawnEngineResponse) GetDespawnedEntities() int32 {
	if x != nil {
		return x.DespawnedEntities
	}
	return 0
}

func (x *DeleteSpawnEngineResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Entity spawning
type SpawnEntityRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EngineId          string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	EntityType        string                 `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`                      // Override engine's entity table
	PreferredPosition *Position              `protobuf:"bytes,3,opt,name=preferred_position,json=preferredPosition,proto3" json:"preferred_position,omitempty"` // Suggestion, may be adjusted
	PatternId         string                 `protobuf:"bytes,4,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"`                         // Use specific pattern
	SpawnOptions      map[string]string      `protobuf:"bytes,5,rep,name=spawn_options,json=spawnOptions,proto3" json:"spawn_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SpawnEntityRequest) Reset() {
	*x = SpawnEntityRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnEntityRequest) ProtoMessage() {}

func (x *SpawnEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnEntityRequest.ProtoReflect.Descriptor instead.
func (*SpawnEntityRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{12}
}

func (x *SpawnEntityRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *SpawnEntityRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *SpawnEntityRequest) GetPreferredPosition() *Position {
	if x != nil {
		return x.PreferredPosition
	}
	return nil
}

func (x *SpawnEntityRequest) GetPatternId() string {
	if x != nil {
		return x.PatternId
	}
	return ""
}

func (x *SpawnEntityRequest) GetSpawnOptions() map[string]string {
	if x != nil {
		return x.SpawnOptions
	}
	return nil
}

type SpawnEntityResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SpawnedEntity        *SpawnedEntity         `protobuf:"bytes,1,opt,name=spawned_entity,json=spawnedEntity,proto3" json:"spawned_entity,omitempty"`
	ConstraintViolations []string               `protobuf:"bytes,2,rep,name=constraint_violations,json=constraintViolations,proto3" json:"constraint_violations,omitempty"` // Soft constraints that were violated
	Status               *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SpawnEntityResponse) Reset() {
	*x = SpawnEntityResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnEntityResponse) ProtoMessage() {}

func (x *SpawnEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnEntityResponse.ProtoReflect.Descriptor instead.
func (*SpawnEntityResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{13}
}

func (x *SpawnEntityResponse) GetSpawnedEntity() *SpawnedEntity {
	if x != nil {
		return x.SpawnedEntity
	}
	return nil
}

func (x *SpawnEntityResponse) GetConstraintViolations() []string {
	if x != nil {
		return x.ConstraintViolations
	}
	return nil
}

func (x *SpawnEntityResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type SpawnMultipleEntitiesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	EntityTypes   []string               `protobuf:"bytes,3,rep,name=entity_types,json=entityTypes,proto3" json:"entity_types,omitempty"` // Specific types to spawn
	PatternId     string                 `protobuf:"bytes,4,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"`
	SpawnOptions  map[string]string      `protobuf:"bytes,5,rep,name=spawn_options,json=spawnOptions,proto3" json:"spawn_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpawnMultipleEntitiesRequest) Reset() {
	*x = SpawnMultipleEntitiesRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnMultipleEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnMultipleEntitiesRequest) ProtoMessage() {}

func (x *SpawnMultipleEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnMultipleEntitiesRequest.ProtoReflect.Descriptor instead.
func (*SpawnMultipleEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{14}
}

func (x *SpawnMultipleEntitiesRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *SpawnMultipleEntitiesRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SpawnMultipleEntitiesRequest) GetEntityTypes() []string {
	if x != nil {
		return x.EntityTypes
	}
	return nil
}

func (x *SpawnMultipleEntitiesRequest) GetPatternId() string {
	if x != nil {
		return x.PatternId
	}
	return ""
}

func (x *SpawnMultipleEntitiesRequest) GetSpawnOptions() map[string]string {
	if x != nil {
		return x.SpawnOptions
	}
	return nil
}

type SpawnMultipleEntitiesResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SpawnedEntities []*SpawnedEntity       `protobuf:"bytes,1,rep,name=spawned_entities,json=spawnedEntities,proto3" json:"spawned_entities,omitempty"`
	Warnings        []string               `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"` // Capacity warnings, etc.
	AttemptResult   *SpawnAttemptResult    `protobuf:"bytes,3,opt,name=attempt_result,json=attemptResult,proto3" json:"attempt_result,omitempty"`
	Status          *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SpawnMultipleEntitiesResponse) Reset() {
	*x = SpawnMultipleEntitiesResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnMultipleEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnMultipleEntitiesResponse) ProtoMessage() {}

func (x *SpawnMultipleEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnMultipleEntitiesResponse.ProtoReflect.Descriptor instead.
func (*SpawnMultipleEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{15}
}

func (x *SpawnMultipleEntitiesResponse) GetSpawnedEntities() []*SpawnedEntity {
	if x != nil {
		return x.SpawnedEntities
	}
	return nil
}

func (x *SpawnMultipleEntitiesResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *SpawnMultipleEntitiesResponse) GetAttemptResult() *SpawnAttemptResult {
	if x != nil {
		return x.AttemptResult
	}
	return nil
}

func (x *SpawnMultipleEntitiesResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type SpawnFromPatternRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EngineId       string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	PatternId      string                 `protobuf:"bytes,2,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"`
	PatternOptions map[string]string      `protobuf:"bytes,3,rep,name=pattern_options,json=patternOptions,proto3" json:"pattern_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Override pattern parameters
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SpawnFromPatternRequest) Reset() {
	*x = SpawnFromPatternRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnFromPatternRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnFromPatternRequest) ProtoMessage() {}

func (x *SpawnFromPatternRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnFromPatternRequest.ProtoReflect.Descriptor instead.
func (*SpawnFromPatternRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{16}
}

func (x *SpawnFromPatternRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *SpawnFromPatternRequest) GetPatternId() string {
	if x != nil {
		return x.PatternId
	}
	return ""
}

func (x *SpawnFromPatternRequest) GetPatternOptions() map[string]string {
	if x != nil {
		return x.PatternOptions
	}
	return nil
}

type SpawnFromPatternResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SpawnedEntities []*SpawnedEntity       `protobuf:"bytes,1,rep,name=spawned_entities,json=spawnedEntities,proto3" json:"spawned_entities,omitempty"`
	PatternUsed     *SpawnPattern          `protobuf:"bytes,2,opt,name=pattern_used,json=patternUsed,proto3" json:"pattern_used,omitempty"`
	AttemptResult   *SpawnAttemptResult    `protobuf:"bytes,3,opt,name=attempt_result,json=attemptResult,proto3" json:"attempt_result,omitempty"`
	Status          *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SpawnFromPatternResponse) Reset() {
	*x = SpawnFromPatternResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnFromPatternResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnFromPatternResponse) ProtoMessage() {}

func (x *SpawnFromPatternResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnFromPatternResponse.ProtoReflect.Descriptor instead.
func (*SpawnFromPatternResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{17}
}

func (x *SpawnFromPatternResponse) GetSpawnedEntities() []*SpawnedEntity {
	if x != nil {
		return x.SpawnedEntities
	}
	return nil
}

func (x *SpawnFromPatternResponse) GetPatternUsed() *SpawnPattern {
	if x != nil {
		return x.PatternUsed
	}
	return nil
}

func (x *SpawnFromPatternResponse) GetAttemptResult() *SpawnAttemptResult {
	if x != nil {
		return x.AttemptResult
	}
	return nil
}

func (x *SpawnFromPatternResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type SpawnedEntity struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Entity         *Entity                `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Position       *Position              `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	SpawnEngineId  string                 `protobuf:"bytes,3,opt,name=spawn_engine_id,json=spawnEngineId,proto3" json:"spawn_engine_id,omitempty"`
	PatternId      string                 `protobuf:"bytes,4,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"` // Pattern that spawned this entity
	SpawnTimestamp int64                  `protobuf:"varint,5,opt,name=spawn_timestamp,json=spawnTimestamp,proto3" json:"spawn_timestamp,omitempty"`
	SpawnMetadata  map[string]string      `protobuf:"bytes,6,rep,name=spawn_metadata,json=spawnMetadata,proto3" json:"spawn_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional spawn-specific data
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SpawnedEntity) Reset() {
	*x = SpawnedEntity{}
	mi := &file_seshat_spawn_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnedEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnedEntity) ProtoMessage() {}

func (x *SpawnedEntity) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnedEntity.ProtoReflect.Descriptor instead.
func (*SpawnedEntity) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{18}
}

func (x *SpawnedEntity) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SpawnedEntity) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SpawnedEntity) GetSpawnEngineId() string {
	if x != nil {
		return x.SpawnEngineId
	}
	return ""
}

func (x *SpawnedEntity) GetPatternId() string {
	if x != nil {
		return x.PatternId
	}
	return ""
}

func (x *SpawnedEntity) GetSpawnTimestamp() int64 {
	if x != nil {
		return x.SpawnTimestamp
	}
	return 0
}

func (x *SpawnedEntity) GetSpawnMetadata() map[string]string {
	if x != nil {
		return x.SpawnMetadata
	}
	return nil
}

type SpawnAttemptResult struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RequestedCount         int32                  `protobuf:"varint,1,opt,name=requested_count,json=requestedCount,proto3" json:"requested_count,omitempty"`
	SuccessfulSpawns       int32                  `protobuf:"varint,2,opt,name=successful_spawns,json=successfulSpawns,proto3" json:"successful_spawns,omitempty"`
	FailedSpawns           int32                  `protobuf:"varint,3,opt,name=failed_spawns,json=failedSpawns,proto3" json:"failed_spawns,omitempty"`
	FailureReasons         []string               `protobuf:"bytes,4,rep,name=failure_reasons,json=failureReasons,proto3" json:"failure_reasons,omitempty"`
	ConstraintSatisfaction float32                `protobuf:"fixed32,5,opt,name=constraint_satisfaction,json=constraintSatisfaction,proto3" json:"constraint_satisfaction,omitempty"` // 0.0 to 1.0, how well constraints were met
	SpawnDuration          *Duration              `protobuf:"bytes,6,opt,name=spawn_duration,json=spawnDuration,proto3" json:"spawn_duration,omitempty"`                              // How long spawning took
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SpawnAttemptResult) Reset() {
	*x = SpawnAttemptResult{}
	mi := &file_seshat_spawn_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnAttemptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnAttemptResult) ProtoMessage() {}

func (x *SpawnAttemptResult) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnAttemptResult.ProtoReflect.Descriptor instead.
func (*SpawnAttemptResult) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{19}
}

func (x *SpawnAttemptResult) GetRequestedCount() int32 {
	if x != nil {
		return x.RequestedCount
	}
	return 0
}

func (x *SpawnAttemptResult) GetSuccessfulSpawns() int32 {
	if x != nil {
		return x.SuccessfulSpawns
	}
	return 0
}

func (x *SpawnAttemptResult) GetFailedSpawns() int32 {
	if x != nil {
		return x.FailedSpawns
	}
	return 0
}

func (x *SpawnAttemptResult) GetFailureReasons() []string {
	if x != nil {
		return x.FailureReasons
	}
	return nil
}

func (x *SpawnAttemptResult) GetConstraintSatisfaction() float32 {
	if x != nil {
		return x.ConstraintSatisfaction
	}
	return 0
}

func (x *SpawnAttemptResult) GetSpawnDuration() *Duration {
	if x != nil {
		return x.SpawnDuration
	}
	return nil
}

// Pattern management
type GetSpawnPatternsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`  // Get patterns for specific engine
	Type          PatternType            `protobuf:"varint,2,opt,name=type,proto3,enum=seshat.PatternType" json:"type,omitempty"` // Filter by pattern type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpawnPatternsRequest) Reset() {
	*x = GetSpawnPatternsRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpawnPatternsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpawnPatternsRequest) ProtoMessage() {}

func (x *GetSpawnPatternsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpawnPatternsRequest.ProtoReflect.Descriptor instead.
func (*GetSpawnPatternsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{20}
}

func (x *GetSpawnPatternsRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *GetSpawnPatternsRequest) GetType() PatternType {
	if x != nil {
		return x.Type
	}
	return PatternType_PATTERN_TYPE_UNSPECIFIED
}

type GetSpawnPatternsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Patterns      []*SpawnPattern        `protobuf:"bytes,1,rep,name=patterns,proto3" json:"patterns,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpawnPatternsResponse) Reset() {
	*x = GetSpawnPatternsResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpawnPatternsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpawnPatternsResponse) ProtoMessage() {}

func (x *GetSpawnPatternsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpawnPatternsResponse.ProtoReflect.Descriptor instead.
func (*GetSpawnPatternsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{21}
}

func (x *GetSpawnPatternsResponse) GetPatterns() []*SpawnPattern {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *GetSpawnPatternsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateSpawnPatternRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	Pattern       *SpawnPattern          `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSpawnPatternRequest) Reset() {
	*x = CreateSpawnPatternRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSpawnPatternRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSpawnPatternRequest) ProtoMessage() {}

func (x *CreateSpawnPatternRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSpawnPatternRequest.ProtoReflect.Descriptor instead.
func (*CreateSpawnPatternRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{22}
}

func (x *CreateSpawnPatternRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *CreateSpawnPatternRequest) GetPattern() *SpawnPattern {
	if x != nil {
		return x.Pattern
	}
	return nil
}

type CreateSpawnPatternResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CreatedPattern *SpawnPattern          `protobuf:"bytes,1,opt,name=created_pattern,json=createdPattern,proto3" json:"created_pattern,omitempty"`
	Status         *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateSpawnPatternResponse) Reset() {
	*x = CreateSpawnPatternResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSpawnPatternResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSpawnPatternResponse) ProtoMessage() {}

func (x *CreateSpawnPatternResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSpawnPatternResponse.ProtoReflect.Descriptor instead.
func (*CreateSpawnPatternResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{23}
}

func (x *CreateSpawnPatternResponse) GetCreatedPattern() *SpawnPattern {
	if x != nil {
		return x.CreatedPattern
	}
	return nil
}

func (x *CreateSpawnPatternResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateSpawnPatternRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PatternId      string                 `protobuf:"bytes,1,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"`
	UpdatedPattern *SpawnPattern          `protobuf:"bytes,2,opt,name=updated_pattern,json=updatedPattern,proto3" json:"updated_pattern,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateSpawnPatternRequest) Reset() {
	*x = UpdateSpawnPatternRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSpawnPatternRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSpawnPatternRequest) ProtoMessage() {}

func (x *UpdateSpawnPatternRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSpawnPatternRequest.ProtoReflect.Descriptor instead.
func (*UpdateSpawnPatternRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateSpawnPatternRequest) GetPatternId() string {
	if x != nil {
		return x.PatternId
	}
	return ""
}

func (x *UpdateSpawnPatternRequest) GetUpdatedPattern() *SpawnPattern {
	if x != nil {
		return x.UpdatedPattern
	}
	return nil
}

type UpdateSpawnPatternResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pattern       *SpawnPattern          `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSpawnPatternResponse) Reset() {
	*x = UpdateSpawnPatternResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSpawnPatternResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSpawnPatternResponse) ProtoMessage() {}

func (x *UpdateSpawnPatternResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSpawnPatternResponse.ProtoReflect.Descriptor instead.
func (*UpdateSpawnPatternResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateSpawnPatternResponse) GetPattern() *SpawnPattern {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *UpdateSpawnPatternResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Constraint management
type AddSpawnConstraintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	Constraint    *SpawnConstraint       `protobuf:"bytes,2,opt,name=constraint,proto3" json:"constraint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddSpawnConstraintRequest) Reset() {
	*x = AddSpawnConstraintRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSpawnConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSpawnConstraintRequest) ProtoMessage() {}

func (x *AddSpawnConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSpawnConstraintRequest.ProtoReflect.Descriptor instead.
func (*AddSpawnConstraintRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{26}
}

func (x *AddSpawnConstraintRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *AddSpawnConstraintRequest) GetConstraint() *SpawnConstraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

type AddSpawnConstraintResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AddedConstraint *SpawnConstraint       `protobuf:"bytes,1,opt,name=added_constraint,json=addedConstraint,proto3" json:"added_constraint,omitempty"`
	Status          *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddSpawnConstraintResponse) Reset() {
	*x = AddSpawnConstraintResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSpawnConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSpawnConstraintResponse) ProtoMessage() {}

func (x *AddSpawnConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSpawnConstraintResponse.ProtoReflect.Descriptor instead.
func (*AddSpawnConstraintResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{27}
}

func (x *AddSpawnConstraintResponse) GetAddedConstraint() *SpawnConstraint {
	if x != nil {
		return x.AddedConstraint
	}
	return nil
}

func (x *AddSpawnConstraintResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type RemoveSpawnConstraintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	ConstraintId  string                 `protobuf:"bytes,2,opt,name=constraint_id,json=constraintId,proto3" json:"constraint_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveSpawnConstraintRequest) Reset() {
	*x = RemoveSpawnConstraintRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveSpawnConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSpawnConstraintRequest) ProtoMessage() {}

func (x *RemoveSpawnConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSpawnConstraintRequest.ProtoReflect.Descriptor instead.
func (*RemoveSpawnConstraintRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{28}
}

func (x *RemoveSpawnConstraintRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *RemoveSpawnConstraintRequest) GetConstraintId() string {
	if x != nil {
		return x.ConstraintId
	}
	return ""
}

type RemoveSpawnConstraintResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Result                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveSpawnConstraintResponse) Reset() {
	*x = RemoveSpawnConstraintResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveSpawnConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSpawnConstraintResponse) ProtoMessage() {}

func (x *RemoveSpawnConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSpawnConstraintResponse.ProtoReflect.Descriptor instead.
func (*RemoveSpawnConstraintResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{29}
}

func (x *RemoveSpawnConstraintResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetSpawnConstraintsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	Type          ConstraintType         `protobuf:"varint,2,opt,name=type,proto3,enum=seshat.ConstraintType" json:"type,omitempty"` // Filter by constraint type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpawnConstraintsRequest) Reset() {
	*x = GetSpawnConstraintsRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpawnConstraintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpawnConstraintsRequest) ProtoMessage() {}

func (x *GetSpawnConstraintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpawnConstraintsRequest.ProtoReflect.Descriptor instead.
func (*GetSpawnConstraintsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{30}
}

func (x *GetSpawnConstraintsRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *GetSpawnConstraintsRequest) GetType() ConstraintType {
	if x != nil {
		return x.Type
	}
	return ConstraintType_CONSTRAINT_TYPE_UNSPECIFIED
}

type GetSpawnConstraintsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Constraints   []*SpawnConstraint     `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpawnConstraintsResponse) Reset() {
	*x = GetSpawnConstraintsResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpawnConstraintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpawnConstraintsResponse) ProtoMessage() {}

func (x *GetSpawnConstraintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpawnConstraintsResponse.ProtoReflect.Descriptor instead.
func (*GetSpawnConstraintsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{31}
}

func (x *GetSpawnConstraintsResponse) GetConstraints() []*SpawnConstraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *GetSpawnConstraintsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type ValidateSpawnPositionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	Position      *Position              `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	EntityType    string                 `protobuf:"bytes,3,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSpawnPositionRequest) Reset() {
	*x = ValidateSpawnPositionRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSpawnPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSpawnPositionRequest) ProtoMessage() {}

func (x *ValidateSpawnPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSpawnPositionRequest.ProtoReflect.Descriptor instead.
func (*ValidateSpawnPositionRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{32}
}

func (x *ValidateSpawnPositionRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *ValidateSpawnPositionRequest) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ValidateSpawnPositionRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

type ValidateSpawnPositionResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	IsValid         bool                   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Violations      []string               `protobuf:"bytes,2,rep,name=violations,proto3" json:"violations,omitempty"`                                    // Which constraints are violated
	ConstraintScore float32                `protobuf:"fixed32,3,opt,name=constraint_score,json=constraintScore,proto3" json:"constraint_score,omitempty"` // 0.0 to 1.0, higher is better
	Suggestions     []string               `protobuf:"bytes,4,rep,name=suggestions,proto3" json:"suggestions,omitempty"`                                  // How to make position valid
	Status          *Result                `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ValidateSpawnPositionResponse) Reset() {
	*x = ValidateSpawnPositionResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSpawnPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSpawnPositionResponse) ProtoMessage() {}

func (x *ValidateSpawnPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSpawnPositionResponse.ProtoReflect.Descriptor instead.
func (*ValidateSpawnPositionResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{33}
}

func (x *ValidateSpawnPositionResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ValidateSpawnPositionResponse) GetViolations() []string {
	if x != nil {
		return x.Violations
	}
	return nil
}

func (x *ValidateSpawnPositionResponse) GetConstraintScore() float32 {
	if x != nil {
		return x.ConstraintScore
	}
	return 0
}

func (x *ValidateSpawnPositionResponse) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

func (x *ValidateSpawnPositionResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

// Capacity analysis
type AnalyzeSpawnCapacityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	EntityTypes   []string               `protobuf:"bytes,2,rep,name=entity_types,json=entityTypes,proto3" json:"entity_types,omitempty"` // Types to analyze capacity for
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeSpawnCapacityRequest) Reset() {
	*x = AnalyzeSpawnCapacityRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeSpawnCapacityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeSpawnCapacityRequest) ProtoMessage() {}

func (x *AnalyzeSpawnCapacityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeSpawnCapacityRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeSpawnCapacityRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{34}
}

func (x *AnalyzeSpawnCapacityRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *AnalyzeSpawnCapacityRequest) GetEntityTypes() []string {
	if x != nil {
		return x.EntityTypes
	}
	return nil
}

type AnalyzeSpawnCapacityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Analysis      *SpawnCapacityAnalysis `protobuf:"bytes,1,opt,name=analysis,proto3" json:"analysis,omitempty"`
	Status        *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeSpawnCapacityResponse) Reset() {
	*x = AnalyzeSpawnCapacityResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeSpawnCapacityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeSpawnCapacityResponse) ProtoMessage() {}

func (x *AnalyzeSpawnCapacityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeSpawnCapacityResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeSpawnCapacityResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{35}
}

func (x *AnalyzeSpawnCapacityResponse) GetAnalysis() *SpawnCapacityAnalysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

func (x *AnalyzeSpawnCapacityResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type SpawnCapacityAnalysis struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	TotalPositions          int32                  `protobuf:"varint,1,opt,name=total_positions,json=totalPositions,proto3" json:"total_positions,omitempty"`
	ValidPositions          int32                  `protobuf:"varint,2,opt,name=valid_positions,json=validPositions,proto3" json:"valid_positions,omitempty"`
	ConstrainedPositions    int32                  `protobuf:"varint,3,opt,name=constrained_positions,json=constrainedPositions,proto3" json:"constrained_positions,omitempty"` // Positions that violate constraints
	OccupiedPositions       int32                  `protobuf:"varint,4,opt,name=occupied_positions,json=occupiedPositions,proto3" json:"occupied_positions,omitempty"`
	TypeCapacities          []*EntityTypeCapacity  `protobuf:"bytes,5,rep,name=type_capacities,json=typeCapacities,proto3" json:"type_capacities,omitempty"`
	OverallUtilization      float32                `protobuf:"fixed32,6,opt,name=overall_utilization,json=overallUtilization,proto3" json:"overall_utilization,omitempty"` // 0.0 to 1.0
	IsOverCapacity          bool                   `protobuf:"varint,7,opt,name=is_over_capacity,json=isOverCapacity,proto3" json:"is_over_capacity,omitempty"`
	CapacityWarnings        []string               `protobuf:"bytes,8,rep,name=capacity_warnings,json=capacityWarnings,proto3" json:"capacity_warnings,omitempty"`
	OptimizationSuggestions []string               `protobuf:"bytes,9,rep,name=optimization_suggestions,json=optimizationSuggestions,proto3" json:"optimization_suggestions,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SpawnCapacityAnalysis) Reset() {
	*x = SpawnCapacityAnalysis{}
	mi := &file_seshat_spawn_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnCapacityAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnCapacityAnalysis) ProtoMessage() {}

func (x *SpawnCapacityAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnCapacityAnalysis.ProtoReflect.Descriptor instead.
func (*SpawnCapacityAnalysis) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{36}
}

func (x *SpawnCapacityAnalysis) GetTotalPositions() int32 {
	if x != nil {
		return x.TotalPositions
	}
	return 0
}

func (x *SpawnCapacityAnalysis) GetValidPositions() int32 {
	if x != nil {
		return x.ValidPositions
	}
	return 0
}

func (x *SpawnCapacityAnalysis) GetConstrainedPositions() int32 {
	if x != nil {
		return x.ConstrainedPositions
	}
	return 0
}

func (x *SpawnCapacityAnalysis) GetOccupiedPositions() int32 {
	if x != nil {
		return x.OccupiedPositions
	}
	return 0
}

func (x *SpawnCapacityAnalysis) GetTypeCapacities() []*EntityTypeCapacity {
	if x != nil {
		return x.TypeCapacities
	}
	return nil
}

func (x *SpawnCapacityAnalysis) GetOverallUtilization() float32 {
	if x != nil {
		return x.OverallUtilization
	}
	return 0
}

func (x *SpawnCapacityAnalysis) GetIsOverCapacity() bool {
	if x != nil {
		return x.IsOverCapacity
	}
	return false
}

func (x *SpawnCapacityAnalysis) GetCapacityWarnings() []string {
	if x != nil {
		return x.CapacityWarnings
	}
	return nil
}

func (x *SpawnCapacityAnalysis) GetOptimizationSuggestions() []string {
	if x != nil {
		return x.OptimizationSuggestions
	}
	return nil
}

type EntityTypeCapacity struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	EntityType         string                 `protobuf:"bytes,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	CurrentCount       int32                  `protobuf:"varint,2,opt,name=current_count,json=currentCount,proto3" json:"current_count,omitempty"`
	MaxCapacity        int32                  `protobuf:"varint,3,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	RecommendedMax     int32                  `protobuf:"varint,4,opt,name=recommended_max,json=recommendedMax,proto3" json:"recommended_max,omitempty"` // Considering comfort/gameplay
	AvailablePositions []*Position            `protobuf:"bytes,5,rep,name=available_positions,json=availablePositions,proto3" json:"available_positions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EntityTypeCapacity) Reset() {
	*x = EntityTypeCapacity{}
	mi := &file_seshat_spawn_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityTypeCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityTypeCapacity) ProtoMessage() {}

func (x *EntityTypeCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityTypeCapacity.ProtoReflect.Descriptor instead.
func (*EntityTypeCapacity) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{37}
}

func (x *EntityTypeCapacity) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *EntityTypeCapacity) GetCurrentCount() int32 {
	if x != nil {
		return x.CurrentCount
	}
	return 0
}

func (x *EntityTypeCapacity) GetMaxCapacity() int32 {
	if x != nil {
		return x.MaxCapacity
	}
	return 0
}

func (x *EntityTypeCapacity) GetRecommendedMax() int32 {
	if x != nil {
		return x.RecommendedMax
	}
	return 0
}

func (x *EntityTypeCapacity) GetAvailablePositions() []*Position {
	if x != nil {
		return x.AvailablePositions
	}
	return nil
}

type GetOptimalSpawnPositionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	EntityType    string                 `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                         // How many positions needed
	PatternId     string                 `protobuf:"bytes,4,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"` // Use specific pattern
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOptimalSpawnPositionsRequest) Reset() {
	*x = GetOptimalSpawnPositionsRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOptimalSpawnPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptimalSpawnPositionsRequest) ProtoMessage() {}

func (x *GetOptimalSpawnPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptimalSpawnPositionsRequest.ProtoReflect.Descriptor instead.
func (*GetOptimalSpawnPositionsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{38}
}

func (x *GetOptimalSpawnPositionsRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *GetOptimalSpawnPositionsRequest) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *GetOptimalSpawnPositionsRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetOptimalSpawnPositionsRequest) GetPatternId() string {
	if x != nil {
		return x.PatternId
	}
	return ""
}

type GetOptimalSpawnPositionsResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Positions         []*OptimalPosition     `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
	OverallScore      float32                `protobuf:"fixed32,2,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"` // Quality of position set
	OptimizationNotes []string               `protobuf:"bytes,3,rep,name=optimization_notes,json=optimizationNotes,proto3" json:"optimization_notes,omitempty"`
	Status            *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetOptimalSpawnPositionsResponse) Reset() {
	*x = GetOptimalSpawnPositionsResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOptimalSpawnPositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptimalSpawnPositionsResponse) ProtoMessage() {}

func (x *GetOptimalSpawnPositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptimalSpawnPositionsResponse.ProtoReflect.Descriptor instead.
func (*GetOptimalSpawnPositionsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{39}
}

func (x *GetOptimalSpawnPositionsResponse) GetPositions() []*OptimalPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *GetOptimalSpawnPositionsResponse) GetOverallScore() float32 {
	if x != nil {
		return x.OverallScore
	}
	return 0
}

func (x *GetOptimalSpawnPositionsResponse) GetOptimizationNotes() []string {
	if x != nil {
		return x.OptimizationNotes
	}
	return nil
}

func (x *GetOptimalSpawnPositionsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type OptimalPosition struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Position         *Position              `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Score            float32                `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`                                                                                                                         // Quality score for this position
	ConstraintScores map[string]float32     `protobuf:"bytes,3,rep,name=constraint_scores,json=constraintScores,proto3" json:"constraint_scores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"` // Per-constraint satisfaction
	Benefits         []string               `protobuf:"bytes,4,rep,name=benefits,proto3" json:"benefits,omitempty"`                                                                                                                     // Why this position is good
	Drawbacks        []string               `protobuf:"bytes,5,rep,name=drawbacks,proto3" json:"drawbacks,omitempty"`                                                                                                                   // Why this position has issues
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OptimalPosition) Reset() {
	*x = OptimalPosition{}
	mi := &file_seshat_spawn_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptimalPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimalPosition) ProtoMessage() {}

func (x *OptimalPosition) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimalPosition.ProtoReflect.Descriptor instead.
func (*OptimalPosition) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{40}
}

func (x *OptimalPosition) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *OptimalPosition) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *OptimalPosition) GetConstraintScores() map[string]float32 {
	if x != nil {
		return x.ConstraintScores
	}
	return nil
}

func (x *OptimalPosition) GetBenefits() []string {
	if x != nil {
		return x.Benefits
	}
	return nil
}

func (x *OptimalPosition) GetDrawbacks() []string {
	if x != nil {
		return x.Drawbacks
	}
	return nil
}

type RecommendRoomSplitRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EngineId          string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	TargetEntityCount int32                  `protobuf:"varint,2,opt,name=target_entity_count,json=targetEntityCount,proto3" json:"target_entity_count,omitempty"` // How many entities need to fit
	EntityTypes       []string               `protobuf:"bytes,3,rep,name=entity_types,json=entityTypes,proto3" json:"entity_types,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RecommendRoomSplitRequest) Reset() {
	*x = RecommendRoomSplitRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecommendRoomSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendRoomSplitRequest) ProtoMessage() {}

func (x *RecommendRoomSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendRoomSplitRequest.ProtoReflect.Descriptor instead.
func (*RecommendRoomSplitRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{41}
}

func (x *RecommendRoomSplitRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *RecommendRoomSplitRequest) GetTargetEntityCount() int32 {
	if x != nil {
		return x.TargetEntityCount
	}
	return 0
}

func (x *RecommendRoomSplitRequest) GetEntityTypes() []string {
	if x != nil {
		return x.EntityTypes
	}
	return nil
}

type RecommendRoomSplitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShouldSplit   bool                   `protobuf:"varint,1,opt,name=should_split,json=shouldSplit,proto3" json:"should_split,omitempty"`
	Options       []*RoomSplitOption     `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	Reasoning     string                 `protobuf:"bytes,3,opt,name=reasoning,proto3" json:"reasoning,omitempty"`
	Status        *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecommendRoomSplitResponse) Reset() {
	*x = RecommendRoomSplitResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecommendRoomSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendRoomSplitResponse) ProtoMessage() {}

func (x *RecommendRoomSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendRoomSplitResponse.ProtoReflect.Descriptor instead.
func (*RecommendRoomSplitResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{42}
}

func (x *RecommendRoomSplitResponse) GetShouldSplit() bool {
	if x != nil {
		return x.ShouldSplit
	}
	return false
}

func (x *RecommendRoomSplitResponse) GetOptions() []*RoomSplitOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RecommendRoomSplitResponse) GetReasoning() string {
	if x != nil {
		return x.Reasoning
	}
	return ""
}

func (x *RecommendRoomSplitResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type RoomSplitOption struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SplitType         string                 `protobuf:"bytes,1,opt,name=split_type,json=splitType,proto3" json:"split_type,omitempty"`                          // "horizontal", "vertical", "quadrant"
	SuggestedRooms    []*Room                `protobuf:"bytes,2,rep,name=suggested_rooms,json=suggestedRooms,proto3" json:"suggested_rooms,omitempty"`           // How to divide the space
	EstimatedCapacity int32                  `protobuf:"varint,3,opt,name=estimated_capacity,json=estimatedCapacity,proto3" json:"estimated_capacity,omitempty"` // Total capacity after split
	ComplexityScore   float32                `protobuf:"fixed32,4,opt,name=complexity_score,json=complexityScore,proto3" json:"complexity_score,omitempty"`      // How complex this split is
	Advantages        []string               `protobuf:"bytes,5,rep,name=advantages,proto3" json:"advantages,omitempty"`
	Disadvantages     []string               `protobuf:"bytes,6,rep,name=disadvantages,proto3" json:"disadvantages,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RoomSplitOption) Reset() {
	*x = RoomSplitOption{}
	mi := &file_seshat_spawn_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomSplitOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSplitOption) ProtoMessage() {}

func (x *RoomSplitOption) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSplitOption.ProtoReflect.Descriptor instead.
func (*RoomSplitOption) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{43}
}

func (x *RoomSplitOption) GetSplitType() string {
	if x != nil {
		return x.SplitType
	}
	return ""
}

func (x *RoomSplitOption) GetSuggestedRooms() []*Room {
	if x != nil {
		return x.SuggestedRooms
	}
	return nil
}

func (x *RoomSplitOption) GetEstimatedCapacity() int32 {
	if x != nil {
		return x.EstimatedCapacity
	}
	return 0
}

func (x *RoomSplitOption) GetComplexityScore() float32 {
	if x != nil {
		return x.ComplexityScore
	}
	return 0
}

func (x *RoomSplitOption) GetAdvantages() []string {
	if x != nil {
		return x.Advantages
	}
	return nil
}

func (x *RoomSplitOption) GetDisadvantages() []string {
	if x != nil {
		return x.Disadvantages
	}
	return nil
}

// Spawn tracking and history
type GetSpawnHistoryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EngineId       string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	RoomId         string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // Alternative: get for entire room
	Limit          int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	SinceTimestamp int64                  `protobuf:"varint,4,opt,name=since_timestamp,json=sinceTimestamp,proto3" json:"since_timestamp,omitempty"`
	EntityTypes    []string               `protobuf:"bytes,5,rep,name=entity_types,json=entityTypes,proto3" json:"entity_types,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSpawnHistoryRequest) Reset() {
	*x = GetSpawnHistoryRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpawnHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpawnHistoryRequest) ProtoMessage() {}

func (x *GetSpawnHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpawnHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetSpawnHistoryRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{44}
}

func (x *GetSpawnHistoryRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *GetSpawnHistoryRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GetSpawnHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSpawnHistoryRequest) GetSinceTimestamp() int64 {
	if x != nil {
		return x.SinceTimestamp
	}
	return 0
}

func (x *GetSpawnHistoryRequest) GetEntityTypes() []string {
	if x != nil {
		return x.EntityTypes
	}
	return nil
}

type GetSpawnHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	History       []*SpawnHistoryEntry   `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Status        *Result                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpawnHistoryResponse) Reset() {
	*x = GetSpawnHistoryResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpawnHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpawnHistoryResponse) ProtoMessage() {}

func (x *GetSpawnHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpawnHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetSpawnHistoryResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{45}
}

func (x *GetSpawnHistoryResponse) GetHistory() []*SpawnHistoryEntry {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *GetSpawnHistoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetSpawnHistoryResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type SpawnHistoryEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *SpawnedEntity         `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Action        string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"` // "spawned", "despawned", "moved"
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Reason        string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`                                    // Why this action occurred
	AttemptResult *SpawnAttemptResult    `protobuf:"bytes,5,opt,name=attempt_result,json=attemptResult,proto3" json:"attempt_result,omitempty"` // For spawn actions
	Details       map[string]string      `protobuf:"bytes,6,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpawnHistoryEntry) Reset() {
	*x = SpawnHistoryEntry{}
	mi := &file_seshat_spawn_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnHistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnHistoryEntry) ProtoMessage() {}

func (x *SpawnHistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnHistoryEntry.ProtoReflect.Descriptor instead.
func (*SpawnHistoryEntry) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{46}
}

func (x *SpawnHistoryEntry) GetEntity() *SpawnedEntity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SpawnHistoryEntry) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SpawnHistoryEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SpawnHistoryEntry) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SpawnHistoryEntry) GetAttemptResult() *SpawnAttemptResult {
	if x != nil {
		return x.AttemptResult
	}
	return nil
}

func (x *SpawnHistoryEntry) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetActiveSpawnsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EngineId      string                 `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	RoomId        string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                // Alternative: get for entire room
	EntityTypes   []string               `protobuf:"bytes,3,rep,name=entity_types,json=entityTypes,proto3" json:"entity_types,omitempty"` // Filter by entity types
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveSpawnsRequest) Reset() {
	*x = GetActiveSpawnsRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveSpawnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveSpawnsRequest) ProtoMessage() {}

func (x *GetActiveSpawnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveSpawnsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveSpawnsRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{47}
}

func (x *GetActiveSpawnsRequest) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *GetActiveSpawnsRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GetActiveSpawnsRequest) GetEntityTypes() []string {
	if x != nil {
		return x.EntityTypes
	}
	return nil
}

type GetActiveSpawnsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ActiveSpawns    []*SpawnedEntity       `protobuf:"bytes,1,rep,name=active_spawns,json=activeSpawns,proto3" json:"active_spawns,omitempty"`
	TotalCount      int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	CurrentCapacity *SpawnCapacityAnalysis `protobuf:"bytes,3,opt,name=current_capacity,json=currentCapacity,proto3" json:"current_capacity,omitempty"`
	Status          *Result                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetActiveSpawnsResponse) Reset() {
	*x = GetActiveSpawnsResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveSpawnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveSpawnsResponse) ProtoMessage() {}

func (x *GetActiveSpawnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveSpawnsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveSpawnsResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{48}
}

func (x *GetActiveSpawnsResponse) GetActiveSpawns() []*SpawnedEntity {
	if x != nil {
		return x.ActiveSpawns
	}
	return nil
}

func (x *GetActiveSpawnsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetActiveSpawnsResponse) GetCurrentCapacity() *SpawnCapacityAnalysis {
	if x != nil {
		return x.CurrentCapacity
	}
	return nil
}

func (x *GetActiveSpawnsResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

type DespawnEntityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"` // "manual", "capacity", "timeout", etc.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DespawnEntityRequest) Reset() {
	*x = DespawnEntityRequest{}
	mi := &file_seshat_spawn_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespawnEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespawnEntityRequest) ProtoMessage() {}

func (x *DespawnEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespawnEntityRequest.ProtoReflect.Descriptor instead.
func (*DespawnEntityRequest) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{49}
}

func (x *DespawnEntityRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *DespawnEntityRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DespawnEntityResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DespawnedEntity *SpawnedEntity         `protobuf:"bytes,1,opt,name=despawned_entity,json=despawnedEntity,proto3" json:"despawned_entity,omitempty"`
	Status          *Result                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DespawnEntityResponse) Reset() {
	*x = DespawnEntityResponse{}
	mi := &file_seshat_spawn_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DespawnEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DespawnEntityResponse) ProtoMessage() {}

func (x *DespawnEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seshat_spawn_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DespawnEntityResponse.ProtoReflect.Descriptor instead.
func (*DespawnEntityResponse) Descriptor() ([]byte, []int) {
	return file_seshat_spawn_proto_rawDescGZIP(), []int{50}
}

func (x *DespawnEntityResponse) GetDespawnedEntity() *SpawnedEntity {
	if x != nil {
		return x.DespawnedEntity
	}
	return nil
}

func (x *DespawnEntityResponse) GetStatus() *Result {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_seshat_spawn_proto protoreflect.FileDescriptor

const file_seshat_spawn_proto_rawDesc = "" +
	"\n" +
	"\x12seshat/spawn.proto\x12\x06seshat\x1a\x13seshat/common.proto\x1a\x14seshat/spatial.proto\x1a\x18seshat/selectables.proto\"\xeb\x04\n" +
	"\vSpawnEngine\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x17\n" +
	"\aroom_id\x18\x04 \x01(\tR\x06roomId\x122\n" +
	"\x06config\x18\x05 \x01(\v2\x1a.seshat.SpawnConfigurationR\x06config\x129\n" +
	"\vconstraints\x18\x06 \x03(\v2\x17.seshat.SpawnConstraintR\vconstraints\x120\n" +
	"\bpatterns\x18\a \x03(\v2\x14.seshat.SpawnPatternR\bpatterns\x129\n" +
	"\fentity_table\x18\b \x01(\v2\x16.seshat.SelectionTableR\ventityTable\x12C\n" +
	"\n" +
	"properties\x18\t \x03(\v2#.seshat.SpawnEngine.PropertiesEntryR\n" +
	"properties\x12+\n" +
	"\x11created_timestamp\x18\n" +
	" \x01(\x03R\x10createdTimestamp\x120\n" +
	"\x14last_spawn_timestamp\x18\v \x01(\x03R\x12lastSpawnTimestamp\x12!\n" +
	"\ftotal_spawns\x18\f \x01(\x05R\vtotalSpawns\x12\x1b\n" +
	"\tis_active\x18\r \x01(\bR\bisActive\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd6\x02\n" +
	"\x12SpawnConfiguration\x12!\n" +
	"\fmax_entities\x18\x01 \x01(\x05R\vmaxEntities\x12\x1d\n" +
	"\n" +
	"spawn_rate\x18\x02 \x01(\x05R\tspawnRate\x127\n" +
	"\x0espawn_interval\x18\x03 \x01(\v2\x10.seshat.DurationR\rspawnInterval\x12)\n" +
	"\x10respect_capacity\x18\x04 \x01(\bR\x0frespectCapacity\x12#\n" +
	"\rallow_overlap\x18\x05 \x01(\bR\fallowOverlap\x12!\n" +
	"\fauto_despawn\x18\x06 \x01(\bR\vautoDespawn\x12+\n" +
	"\x06timing\x18\a \x01(\x0e2\x13.seshat.SpawnTimingR\x06timing\x12%\n" +
	"\x0espawn_triggers\x18\b \x03(\tR\rspawnTriggers\"\xe0\x02\n" +
	"\fSpawnPattern\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12'\n" +
	"\x04type\x18\x04 \x01(\x0e2\x13.seshat.PatternTypeR\x04type\x129\n" +
	"\n" +
	"parameters\x18\x05 \x01(\v2\x19.seshat.PatternParametersR\n" +
	"parameters\x12H\n" +
	"\x13pattern_constraints\x18\x06 \x03(\v2\x17.seshat.SpawnConstraintR\x12patternConstraints\x12!\n" +
	"\fmin_entities\x18\a \x01(\x05R\vminEntities\x12!\n" +
	"\fmax_entities\x18\b \x01(\x05R\vmaxEntities\x12\x16\n" +
	"\x06weight\x18\t \x01(\x02R\x06weight\"\xb5\x05\n" +
	"\x11PatternParameters\x12!\n" +
	"\fmin_distance\x18\x01 \x01(\x05R\vminDistance\x12!\n" +
	"\fmax_distance\x18\x02 \x01(\x05R\vmaxDistance\x12!\n" +
	"\fcluster_size\x18\x03 \x01(\x05R\vclusterSize\x12%\n" +
	"\x0ecluster_radius\x18\x04 \x01(\x05R\rclusterRadius\x12-\n" +
	"\x12cluster_separation\x18\x05 \x01(\x05R\x11clusterSeparation\x12'\n" +
	"\x0fformation_shape\x18\x06 \x01(\tR\x0eformationShape\x12+\n" +
	"\x11formation_spacing\x18\a \x01(\x05R\x10formationSpacing\x12)\n" +
	"\x10formation_facing\x18\b \x01(\tR\x0fformationFacing\x12\x1d\n" +
	"\n" +
	"team_count\x18\t \x01(\x05R\tteamCount\x12\x1b\n" +
	"\tteam_size\x18\n" +
	" \x01(\x05R\bteamSize\x12'\n" +
	"\x0fteam_separation\x18\v \x01(\x05R\x0eteamSeparation\x12-\n" +
	"\x12preferred_features\x18\f \x03(\tR\x11preferredFeatures\x12)\n" +
	"\x10avoided_features\x18\r \x03(\tR\x0favoidedFeatures\x12\\\n" +
	"\x11custom_parameters\x18\x0e \x03(\v2/.seshat.PatternParameters.CustomParametersEntryR\x10customParameters\x1aC\n" +
	"\x15CustomParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xfa\x01\n" +
	"\x0fSpawnConstraint\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12*\n" +
	"\x04type\x18\x03 \x01(\x0e2\x16.seshat.ConstraintTypeR\x04type\x12<\n" +
	"\n" +
	"parameters\x18\x04 \x01(\v2\x1c.seshat.ConstraintParametersR\n" +
	"parameters\x12,\n" +
	"\x12is_hard_constraint\x18\x05 \x01(\bR\x10isHardConstraint\x12+\n" +
	"\x11violation_penalty\x18\x06 \x01(\x02R\x10violationPenalty\"\xd1\b\n" +
	"\x14ConstraintParameters\x123\n" +
	"\fmin_position\x18\x01 \x01(\v2\x10.seshat.PositionR\vminPosition\x123\n" +
	"\fmax_position\x18\x02 \x01(\v2\x10.seshat.PositionR\vmaxPosition\x12A\n" +
	"\x13forbidden_positions\x18\x03 \x03(\v2\x10.seshat.PositionR\x12forbiddenPositions\x12?\n" +
	"\x12required_positions\x18\x04 \x03(\v2\x10.seshat.PositionR\x11requiredPositions\x12E\n" +
	" requires_line_of_sight_to_player\x18\x05 \x01(\bR\x1brequiresLineOfSightToPlayer\x12E\n" +
	" requires_line_of_sight_to_center\x18\x06 \x01(\bR\x1brequiresLineOfSightToCenter\x121\n" +
	"\x15line_of_sight_targets\x18\a \x03(\tR\x12lineOfSightTargets\x127\n" +
	"\x18min_distance_from_player\x18\b \x01(\x05R\x15minDistanceFromPlayer\x127\n" +
	"\x18max_distance_from_player\x18\t \x01(\x05R\x15maxDistanceFromPlayer\x12;\n" +
	"\x1amin_distance_from_entities\x18\n" +
	" \x01(\x05R\x17minDistanceFromEntities\x12;\n" +
	"\x1amax_distance_from_entities\x18\v \x01(\x05R\x17maxDistanceFromEntities\x122\n" +
	"\x15distance_entity_types\x18\f \x03(\tR\x13distanceEntityTypes\x125\n" +
	"\x17min_distance_from_walls\x18\r \x01(\x05R\x14minDistanceFromWalls\x125\n" +
	"\x17max_distance_from_walls\x18\x0e \x01(\x05R\x14maxDistanceFromWalls\x12+\n" +
	"\x11required_features\x18\x0f \x03(\tR\x10requiredFeatures\x12)\n" +
	"\x10avoided_features\x18\x10 \x03(\tR\x0favoidedFeatures\x12_\n" +
	"\x11custom_parameters\x18\x11 \x03(\v22.seshat.ConstraintParameters.CustomParametersEntryR\x10customParameters\x1aC\n" +
	"\x15CustomParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd8\x01\n" +
	"\x18CreateSpawnEngineRequest\x12\x17\n" +
	"\aroom_id\x18\x01 \x01(\tR\x06roomId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x122\n" +
	"\x06config\x18\x04 \x01(\v2\x1a.seshat.SpawnConfigurationR\x06config\x129\n" +
	"\fentity_table\x18\x05 \x01(\v2\x16.seshat.SelectionTableR\ventityTable\"p\n" +
	"\x19CreateSpawnEngineResponse\x12+\n" +
	"\x06engine\x18\x01 \x01(\v2\x13.seshat.SpawnEngineR\x06engine\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"M\n" +
	"\x15GetSpawnEngineRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12\x17\n" +
	"\aroom_id\x18\x02 \x01(\tR\x06roomId\"m\n" +
	"\x16GetSpawnEngineResponse\x12+\n" +
	"\x06engine\x18\x01 \x01(\v2\x13.seshat.SpawnEngineR\x06engine\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"b\n" +
	"\x18DeleteSpawnEngineRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12)\n" +
	"\x10despawn_entities\x18\x02 \x01(\bR\x0fdespawnEntities\"r\n" +
	"\x19DeleteSpawnEngineResponse\x12-\n" +
	"\x12despawned_entities\x18\x01 \x01(\x05R\x11despawnedEntities\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\xc6\x02\n" +
	"\x12SpawnEntityRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12\x1f\n" +
	"\ventity_type\x18\x02 \x01(\tR\n" +
	"entityType\x12?\n" +
	"\x12preferred_position\x18\x03 \x01(\v2\x10.seshat.PositionR\x11preferredPosition\x12\x1d\n" +
	"\n" +
	"pattern_id\x18\x04 \x01(\tR\tpatternId\x12Q\n" +
	"\rspawn_options\x18\x05 \x03(\v2,.seshat.SpawnEntityRequest.SpawnOptionsEntryR\fspawnOptions\x1a?\n" +
	"\x11SpawnOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb0\x01\n" +
	"\x13SpawnEntityResponse\x12<\n" +
	"\x0espawned_entity\x18\x01 \x01(\v2\x15.seshat.SpawnedEntityR\rspawnedEntity\x123\n" +
	"\x15constraint_violations\x18\x02 \x03(\tR\x14constraintViolations\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"\xb1\x02\n" +
	"\x1cSpawnMultipleEntitiesRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12!\n" +
	"\fentity_types\x18\x03 \x03(\tR\ventityTypes\x12\x1d\n" +
	"\n" +
	"pattern_id\x18\x04 \x01(\tR\tpatternId\x12[\n" +
	"\rspawn_options\x18\x05 \x03(\v26.seshat.SpawnMultipleEntitiesRequest.SpawnOptionsEntryR\fspawnOptions\x1a?\n" +
	"\x11SpawnOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe8\x01\n" +
	"\x1dSpawnMultipleEntitiesResponse\x12@\n" +
	"\x10spawned_entities\x18\x01 \x03(\v2\x15.seshat.SpawnedEntityR\x0fspawnedEntities\x12\x1a\n" +
	"\bwarnings\x18\x02 \x03(\tR\bwarnings\x12A\n" +
	"\x0eattempt_result\x18\x03 \x01(\v2\x1a.seshat.SpawnAttemptResultR\rattemptResult\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"\xf6\x01\n" +
	"\x17SpawnFromPatternRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12\x1d\n" +
	"\n" +
	"pattern_id\x18\x02 \x01(\tR\tpatternId\x12\\\n" +
	"\x0fpattern_options\x18\x03 \x03(\v23.seshat.SpawnFromPatternRequest.PatternOptionsEntryR\x0epatternOptions\x1aA\n" +
	"\x13PatternOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x80\x02\n" +
	"\x18SpawnFromPatternResponse\x12@\n" +
	"\x10spawned_entities\x18\x01 \x03(\v2\x15.seshat.SpawnedEntityR\x0fspawnedEntities\x127\n" +
	"\fpattern_used\x18\x02 \x01(\v2\x14.seshat.SpawnPatternR\vpatternUsed\x12A\n" +
	"\x0eattempt_result\x18\x03 \x01(\v2\x1a.seshat.SpawnAttemptResultR\rattemptResult\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"\xe8\x02\n" +
	"\rSpawnedEntity\x12&\n" +
	"\x06entity\x18\x01 \x01(\v2\x0e.seshat.EntityR\x06entity\x12,\n" +
	"\bposition\x18\x02 \x01(\v2\x10.seshat.PositionR\bposition\x12&\n" +
	"\x0fspawn_engine_id\x18\x03 \x01(\tR\rspawnEngineId\x12\x1d\n" +
	"\n" +
	"pattern_id\x18\x04 \x01(\tR\tpatternId\x12'\n" +
	"\x0fspawn_timestamp\x18\x05 \x01(\x03R\x0espawnTimestamp\x12O\n" +
	"\x0espawn_metadata\x18\x06 \x03(\v2(.seshat.SpawnedEntity.SpawnMetadataEntryR\rspawnMetadata\x1a@\n" +
	"\x12SpawnMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xaa\x02\n" +
	"\x12SpawnAttemptResult\x12'\n" +
	"\x0frequested_count\x18\x01 \x01(\x05R\x0erequestedCount\x12+\n" +
	"\x11successful_spawns\x18\x02 \x01(\x05R\x10successfulSpawns\x12#\n" +
	"\rfailed_spawns\x18\x03 \x01(\x05R\ffailedSpawns\x12'\n" +
	"\x0ffailure_reasons\x18\x04 \x03(\tR\x0efailureReasons\x127\n" +
	"\x17constraint_satisfaction\x18\x05 \x01(\x02R\x16constraintSatisfaction\x127\n" +
	"\x0espawn_duration\x18\x06 \x01(\v2\x10.seshat.DurationR\rspawnDuration\"_\n" +
	"\x17GetSpawnPatternsRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12'\n" +
	"\x04type\x18\x02 \x01(\x0e2\x13.seshat.PatternTypeR\x04type\"t\n" +
	"\x18GetSpawnPatternsResponse\x120\n" +
	"\bpatterns\x18\x01 \x03(\v2\x14.seshat.SpawnPatternR\bpatterns\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"h\n" +
	"\x19CreateSpawnPatternRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12.\n" +
	"\apattern\x18\x02 \x01(\v2\x14.seshat.SpawnPatternR\apattern\"\x83\x01\n" +
	"\x1aCreateSpawnPatternResponse\x12=\n" +
	"\x0fcreated_pattern\x18\x01 \x01(\v2\x14.seshat.SpawnPatternR\x0ecreatedPattern\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"y\n" +
	"\x19UpdateSpawnPatternRequest\x12\x1d\n" +
	"\n" +
	"pattern_id\x18\x01 \x01(\tR\tpatternId\x12=\n" +
	"\x0fupdated_pattern\x18\x02 \x01(\v2\x14.seshat.SpawnPatternR\x0eupdatedPattern\"t\n" +
	"\x1aUpdateSpawnPatternResponse\x12.\n" +
	"\apattern\x18\x01 \x01(\v2\x14.seshat.SpawnPatternR\apattern\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"q\n" +
	"\x19AddSpawnConstraintRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x127\n" +
	"\n" +
	"constraint\x18\x02 \x01(\v2\x17.seshat.SpawnConstraintR\n" +
	"constraint\"\x88\x01\n" +
	"\x1aAddSpawnConstraintResponse\x12B\n" +
	"\x10added_constraint\x18\x01 \x01(\v2\x17.seshat.SpawnConstraintR\x0faddedConstraint\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"`\n" +
	"\x1cRemoveSpawnConstraintRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12#\n" +
	"\rconstraint_id\x18\x02 \x01(\tR\fconstraintId\"G\n" +
	"\x1dRemoveSpawnConstraintResponse\x12&\n" +
	"\x06status\x18\x01 \x01(\v2\x0e.seshat.ResultR\x06status\"e\n" +
	"\x1aGetSpawnConstraintsRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12*\n" +
	"\x04type\x18\x02 \x01(\x0e2\x16.seshat.ConstraintTypeR\x04type\"\x80\x01\n" +
	"\x1bGetSpawnConstraintsResponse\x129\n" +
	"\vconstraints\x18\x01 \x03(\v2\x17.seshat.SpawnConstraintR\vconstraints\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\x8a\x01\n" +
	"\x1cValidateSpawnPositionRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12,\n" +
	"\bposition\x18\x02 \x01(\v2\x10.seshat.PositionR\bposition\x12\x1f\n" +
	"\ventity_type\x18\x03 \x01(\tR\n" +
	"entityType\"\xcf\x01\n" +
	"\x1dValidateSpawnPositionResponse\x12\x19\n" +
	"\bis_valid\x18\x01 \x01(\bR\aisValid\x12\x1e\n" +
	"\n" +
	"violations\x18\x02 \x03(\tR\n" +
	"violations\x12)\n" +
	"\x10constraint_score\x18\x03 \x01(\x02R\x0fconstraintScore\x12 \n" +
	"\vsuggestions\x18\x04 \x03(\tR\vsuggestions\x12&\n" +
	"\x06status\x18\x05 \x01(\v2\x0e.seshat.ResultR\x06status\"]\n" +
	"\x1bAnalyzeSpawnCapacityRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12!\n" +
	"\fentity_types\x18\x02 \x03(\tR\ventityTypes\"\x81\x01\n" +
	"\x1cAnalyzeSpawnCapacityResponse\x129\n" +
	"\banalysis\x18\x01 \x01(\v2\x1d.seshat.SpawnCapacityAnalysisR\banalysis\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status\"\xd5\x03\n" +
	"\x15SpawnCapacityAnalysis\x12'\n" +
	"\x0ftotal_positions\x18\x01 \x01(\x05R\x0etotalPositions\x12'\n" +
	"\x0fvalid_positions\x18\x02 \x01(\x05R\x0evalidPositions\x123\n" +
	"\x15constrained_positions\x18\x03 \x01(\x05R\x14constrainedPositions\x12-\n" +
	"\x12occupied_positions\x18\x04 \x01(\x05R\x11occupiedPositions\x12C\n" +
	"\x0ftype_capacities\x18\x05 \x03(\v2\x1a.seshat.EntityTypeCapacityR\x0etypeCapacities\x12/\n" +
	"\x13overall_utilization\x18\x06 \x01(\x02R\x12overallUtilization\x12(\n" +
	"\x10is_over_capacity\x18\a \x01(\bR\x0eisOverCapacity\x12+\n" +
	"\x11capacity_warnings\x18\b \x03(\tR\x10capacityWarnings\x129\n" +
	"\x18optimization_suggestions\x18\t \x03(\tR\x17optimizationSuggestions\"\xe9\x01\n" +
	"\x12EntityTypeCapacity\x12\x1f\n" +
	"\ventity_type\x18\x01 \x01(\tR\n" +
	"entityType\x12#\n" +
	"\rcurrent_count\x18\x02 \x01(\x05R\fcurrentCount\x12!\n" +
	"\fmax_capacity\x18\x03 \x01(\x05R\vmaxCapacity\x12'\n" +
	"\x0frecommended_max\x18\x04 \x01(\x05R\x0erecommendedMax\x12A\n" +
	"\x13available_positions\x18\x05 \x03(\v2\x10.seshat.PositionR\x12availablePositions\"\x94\x01\n" +
	"\x1fGetOptimalSpawnPositionsRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12\x1f\n" +
	"\ventity_type\x18\x02 \x01(\tR\n" +
	"entityType\x12\x14\n" +
	"\x05count\x18\x03 \x01(\x05R\x05count\x12\x1d\n" +
	"\n" +
	"pattern_id\x18\x04 \x01(\tR\tpatternId\"\xd5\x01\n" +
	" GetOptimalSpawnPositionsResponse\x125\n" +
	"\tpositions\x18\x01 \x03(\v2\x17.seshat.OptimalPositionR\tpositions\x12#\n" +
	"\roverall_score\x18\x02 \x01(\x02R\foverallScore\x12-\n" +
	"\x12optimization_notes\x18\x03 \x03(\tR\x11optimizationNotes\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"\xb0\x02\n" +
	"\x0fOptimalPosition\x12,\n" +
	"\bposition\x18\x01 \x01(\v2\x10.seshat.PositionR\bposition\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x02R\x05score\x12Z\n" +
	"\x11constraint_scores\x18\x03 \x03(\v2-.seshat.OptimalPosition.ConstraintScoresEntryR\x10constraintScores\x12\x1a\n" +
	"\bbenefits\x18\x04 \x03(\tR\bbenefits\x12\x1c\n" +
	"\tdrawbacks\x18\x05 \x03(\tR\tdrawbacks\x1aC\n" +
	"\x15ConstraintScoresEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\"\x8b\x01\n" +
	"\x19RecommendRoomSplitRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12.\n" +
	"\x13target_entity_count\x18\x02 \x01(\x05R\x11targetEntityCount\x12!\n" +
	"\fentity_types\x18\x03 \x03(\tR\ventityTypes\"\xb8\x01\n" +
	"\x1aRecommendRoomSplitResponse\x12!\n" +
	"\fshould_split\x18\x01 \x01(\bR\vshouldSplit\x121\n" +
	"\aoptions\x18\x02 \x03(\v2\x17.seshat.RoomSplitOptionR\aoptions\x12\x1c\n" +
	"\treasoning\x18\x03 \x01(\tR\treasoning\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"\x87\x02\n" +
	"\x0fRoomSplitOption\x12\x1d\n" +
	"\n" +
	"split_type\x18\x01 \x01(\tR\tsplitType\x125\n" +
	"\x0fsuggested_rooms\x18\x02 \x03(\v2\f.seshat.RoomR\x0esuggestedRooms\x12-\n" +
	"\x12estimated_capacity\x18\x03 \x01(\x05R\x11estimatedCapacity\x12)\n" +
	"\x10complexity_score\x18\x04 \x01(\x02R\x0fcomplexityScore\x12\x1e\n" +
	"\n" +
	"advantages\x18\x05 \x03(\tR\n" +
	"advantages\x12$\n" +
	"\rdisadvantages\x18\x06 \x03(\tR\rdisadvantages\"\xb0\x01\n" +
	"\x16GetSpawnHistoryRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12\x17\n" +
	"\aroom_id\x18\x02 \x01(\tR\x06roomId\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12'\n" +
	"\x0fsince_timestamp\x18\x04 \x01(\x03R\x0esinceTimestamp\x12!\n" +
	"\fentity_types\x18\x05 \x03(\tR\ventityTypes\"\x97\x01\n" +
	"\x17GetSpawnHistoryResponse\x123\n" +
	"\ahistory\x18\x01 \x03(\v2\x19.seshat.SpawnHistoryEntryR\ahistory\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12&\n" +
	"\x06status\x18\x03 \x01(\v2\x0e.seshat.ResultR\x06status\"\xd1\x02\n" +
	"\x11SpawnHistoryEntry\x12-\n" +
	"\x06entity\x18\x01 \x01(\v2\x15.seshat.SpawnedEntityR\x06entity\x12\x16\n" +
	"\x06action\x18\x02 \x01(\tR\x06action\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\x12A\n" +
	"\x0eattempt_result\x18\x05 \x01(\v2\x1a.seshat.SpawnAttemptResultR\rattemptResult\x12@\n" +
	"\adetails\x18\x06 \x03(\v2&.seshat.SpawnHistoryEntry.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"q\n" +
	"\x16GetActiveSpawnsRequest\x12\x1b\n" +
	"\tengine_id\x18\x01 \x01(\tR\bengineId\x12\x17\n" +
	"\aroom_id\x18\x02 \x01(\tR\x06roomId\x12!\n" +
	"\fentity_types\x18\x03 \x03(\tR\ventityTypes\"\xe8\x01\n" +
	"\x17GetActiveSpawnsResponse\x12:\n" +
	"\ractive_spawns\x18\x01 \x03(\v2\x15.seshat.SpawnedEntityR\factiveSpawns\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12H\n" +
	"\x10current_capacity\x18\x03 \x01(\v2\x1d.seshat.SpawnCapacityAnalysisR\x0fcurrentCapacity\x12&\n" +
	"\x06status\x18\x04 \x01(\v2\x0e.seshat.ResultR\x06status\"K\n" +
	"\x14DespawnEntityRequest\x12\x1b\n" +
	"\tentity_id\x18\x01 \x01(\tR\bentityId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"\x81\x01\n" +
	"\x15DespawnEntityResponse\x12@\n" +
	"\x10despawned_entity\x18\x01 \x01(\v2\x15.seshat.SpawnedEntityR\x0fdespawnedEntity\x12&\n" +
	"\x06status\x18\x02 \x01(\v2\x0e.seshat.ResultR\x06status*\x9b\x01\n" +
	"\vSpawnTiming\x12\x1c\n" +
	"\x18SPAWN_TIMING_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16SPAWN_TIMING_IMMEDIATE\x10\x01\x12\x18\n" +
	"\x14SPAWN_TIMING_DELAYED\x10\x02\x12\x1a\n" +
	"\x16SPAWN_TIMING_TRIGGERED\x10\x03\x12\x1c\n" +
	"\x18SPAWN_TIMING_CONDITIONAL\x10\x04*\x92\x02\n" +
	"\vPatternType\x12\x1c\n" +
	"\x18PATTERN_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16PATTERN_TYPE_SCATTERED\x10\x01\x12\x1a\n" +
	"\x16PATTERN_TYPE_CLUSTERED\x10\x02\x12\x1a\n" +
	"\x16PATTERN_TYPE_FORMATION\x10\x03\x12\x1a\n" +
	"\x16PATTERN_TYPE_PERIMETER\x10\x04\x12\x18\n" +
	"\x14PATTERN_TYPE_CENTRAL\x10\x05\x12\x1b\n" +
	"\x17PATTERN_TYPE_TEAM_BASED\x10\x06\x12\x1e\n" +
	"\x1aPATTERN_TYPE_PLAYER_CHOICE\x10\a\x12\x1e\n" +
	"\x1aPATTERN_TYPE_ENVIRONMENTAL\x10\b*\xb7\x02\n" +
	"\x0eConstraintType\x12\x1f\n" +
	"\x1bCONSTRAINT_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17CONSTRAINT_TYPE_SPATIAL\x10\x01\x12!\n" +
	"\x1dCONSTRAINT_TYPE_LINE_OF_SIGHT\x10\x02\x12\x1c\n" +
	"\x18CONSTRAINT_TYPE_DISTANCE\x10\x03\x12\"\n" +
	"\x1eCONSTRAINT_TYPE_AREA_OF_EFFECT\x10\x04\x12\"\n" +
	"\x1eCONSTRAINT_TYPE_WALL_PROXIMITY\x10\x05\x12\x1f\n" +
	"\x1bCONSTRAINT_TYPE_ENTITY_TYPE\x10\x06\x12!\n" +
	"\x1dCONSTRAINT_TYPE_ENVIRONMENTAL\x10\a\x12\x1a\n" +
	"\x16CONSTRAINT_TYPE_CUSTOM\x10\b2\xd7\r\n" +
	"\fSpawnService\x12X\n" +
	"\x11CreateSpawnEngine\x12 .seshat.CreateSpawnEngineRequest\x1a!.seshat.CreateSpawnEngineResponse\x12O\n" +
	"\x0eGetSpawnEngine\x12\x1d.seshat.GetSpawnEngineRequest\x1a\x1e.seshat.GetSpawnEngineResponse\x12X\n" +
	"\x11DeleteSpawnEngine\x12 .seshat.DeleteSpawnEngineRequest\x1a!.seshat.DeleteSpawnEngineResponse\x12F\n" +
	"\vSpawnEntity\x12\x1a.seshat.SpawnEntityRequest\x1a\x1b.seshat.SpawnEntityResponse\x12d\n" +
	"\x15SpawnMultipleEntities\x12$.seshat.SpawnMultipleEntitiesRequest\x1a%.seshat.SpawnMultipleEntitiesResponse\x12U\n" +
	"\x10SpawnFromPattern\x12\x1f.seshat.SpawnFromPatternRequest\x1a .seshat.SpawnFromPatternResponse\x12U\n" +
	"\x10GetSpawnPatterns\x12\x1f.seshat.GetSpawnPatternsRequest\x1a .seshat.GetSpawnPatternsResponse\x12[\n" +
	"\x12CreateSpawnPattern\x12!.seshat.CreateSpawnPatternRequest\x1a\".seshat.CreateSpawnPatternResponse\x12[\n" +
	"\x12UpdateSpawnPattern\x12!.seshat.UpdateSpawnPatternRequest\x1a\".seshat.UpdateSpawnPatternResponse\x12[\n" +
	"\x12AddSpawnConstraint\x12!.seshat.AddSpawnConstraintRequest\x1a\".seshat.AddSpawnConstraintResponse\x12d\n" +
	"\x15RemoveSpawnConstraint\x12$.seshat.RemoveSpawnConstraintRequest\x1a%.seshat.RemoveSpawnConstraintResponse\x12^\n" +
	"\x13GetSpawnConstraints\x12\".seshat.GetSpawnConstraintsRequest\x1a#.seshat.GetSpawnConstraintsResponse\x12d\n" +
	"\x15ValidateSpawnPosition\x12$.seshat.ValidateSpawnPositionRequest\x1a%.seshat.ValidateSpawnPositionResponse\x12a\n" +
	"\x14AnalyzeSpawnCapacity\x12#.seshat.AnalyzeSpawnCapacityRequest\x1a$.seshat.AnalyzeSpawnCapacityResponse\x12m\n" +
	"\x18GetOptimalSpawnPositions\x12'.seshat.GetOptimalSpawnPositionsRequest\x1a(.seshat.GetOptimalSpawnPositionsResponse\x12[\n" +
	"\x12RecommendRoomSplit\x12!.seshat.RecommendRoomSplitRequest\x1a\".seshat.RecommendRoomSplitResponse\x12R\n" +
	"\x0fGetSpawnHistory\x12\x1e.seshat.GetSpawnHistoryRequest\x1a\x1f.seshat.GetSpawnHistoryResponse\x12R\n" +
	"\x0fGetActiveSpawns\x12\x1e.seshat.GetActiveSpawnsRequest\x1a\x1f.seshat.GetActiveSpawnsResponse\x12L\n" +
	"\rDespawnEntity\x12\x1c.seshat.DespawnEntityRequest\x1a\x1d.seshat.DespawnEntityResponseB!Z\x1fgithub.com/seshat/protos/seshatb\x06proto3"

var (
	file_seshat_spawn_proto_rawDescOnce sync.Once
	file_seshat_spawn_proto_rawDescData []byte
)

func file_seshat_spawn_proto_rawDescGZIP() []byte {
	file_seshat_spawn_proto_rawDescOnce.Do(func() {
		file_seshat_spawn_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_seshat_spawn_proto_rawDesc), len(file_seshat_spawn_proto_rawDesc)))
	})
	return file_seshat_spawn_proto_rawDescData
}

var file_seshat_spawn_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_seshat_spawn_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_seshat_spawn_proto_goTypes = []any{
	(SpawnTiming)(0),                         // 0: seshat.SpawnTiming
	(PatternType)(0),                         // 1: seshat.PatternType
	(ConstraintType)(0),                      // 2: seshat.ConstraintType
	(*SpawnEngine)(nil),                      // 3: seshat.SpawnEngine
	(*SpawnConfiguration)(nil),               // 4: seshat.SpawnConfiguration
	(*SpawnPattern)(nil),                     // 5: seshat.SpawnPattern
	(*PatternParameters)(nil),                // 6: seshat.PatternParameters
	(*SpawnConstraint)(nil),                  // 7: seshat.SpawnConstraint
	(*ConstraintParameters)(nil),             // 8: seshat.ConstraintParameters
	(*CreateSpawnEngineRequest)(nil),         // 9: seshat.CreateSpawnEngineRequest
	(*CreateSpawnEngineResponse)(nil),        // 10: seshat.CreateSpawnEngineResponse
	(*GetSpawnEngineRequest)(nil),            // 11: seshat.GetSpawnEngineRequest
	(*GetSpawnEngineResponse)(nil),           // 12: seshat.GetSpawnEngineResponse
	(*DeleteSpawnEngineRequest)(nil),         // 13: seshat.DeleteSpawnEngineRequest
	(*DeleteSpawnEngineResponse)(nil),        // 14: seshat.DeleteSpawnEngineResponse
	(*SpawnEntityRequest)(nil),               // 15: seshat.SpawnEntityRequest
	(*SpawnEntityResponse)(nil),              // 16: seshat.SpawnEntityResponse
	(*SpawnMultipleEntitiesRequest)(nil),     // 17: seshat.SpawnMultipleEntitiesRequest
	(*SpawnMultipleEntitiesResponse)(nil),    // 18: seshat.SpawnMultipleEntitiesResponse
	(*SpawnFromPatternRequest)(nil),          // 19: seshat.SpawnFromPatternRequest
	(*SpawnFromPatternResponse)(nil),         // 20: seshat.SpawnFromPatternResponse
	(*SpawnedEntity)(nil),                    // 21: seshat.SpawnedEntity
	(*SpawnAttemptResult)(nil),               // 22: seshat.SpawnAttemptResult
	(*GetSpawnPatternsRequest)(nil),          // 23: seshat.GetSpawnPatternsRequest
	(*GetSpawnPatternsResponse)(nil),         // 24: seshat.GetSpawnPatternsResponse
	(*CreateSpawnPatternRequest)(nil),        // 25: seshat.CreateSpawnPatternRequest
	(*CreateSpawnPatternResponse)(nil),       // 26: seshat.CreateSpawnPatternResponse
	(*UpdateSpawnPatternRequest)(nil),        // 27: seshat.UpdateSpawnPatternRequest
	(*UpdateSpawnPatternResponse)(nil),       // 28: seshat.UpdateSpawnPatternResponse
	(*AddSpawnConstraintRequest)(nil),        // 29: seshat.AddSpawnConstraintRequest
	(*AddSpawnConstraintResponse)(nil),       // 30: seshat.AddSpawnConstraintResponse
	(*RemoveSpawnConstraintRequest)(nil),     // 31: seshat.RemoveSpawnConstraintRequest
	(*RemoveSpawnConstraintResponse)(nil),    // 32: seshat.RemoveSpawnConstraintResponse
	(*GetSpawnConstraintsRequest)(nil),       // 33: seshat.GetSpawnConstraintsRequest
	(*GetSpawnConstraintsResponse)(nil),      // 34: seshat.GetSpawnConstraintsResponse
	(*ValidateSpawnPositionRequest)(nil),     // 35: seshat.ValidateSpawnPositionRequest
	(*ValidateSpawnPositionResponse)(nil),    // 36: seshat.ValidateSpawnPositionResponse
	(*AnalyzeSpawnCapacityRequest)(nil),      // 37: seshat.AnalyzeSpawnCapacityRequest
	(*AnalyzeSpawnCapacityResponse)(nil),     // 38: seshat.AnalyzeSpawnCapacityResponse
	(*SpawnCapacityAnalysis)(nil),            // 39: seshat.SpawnCapacityAnalysis
	(*EntityTypeCapacity)(nil),               // 40: seshat.EntityTypeCapacity
	(*GetOptimalSpawnPositionsRequest)(nil),  // 41: seshat.GetOptimalSpawnPositionsRequest
	(*GetOptimalSpawnPositionsResponse)(nil), // 42: seshat.GetOptimalSpawnPositionsResponse
	(*OptimalPosition)(nil),                  // 43: seshat.OptimalPosition
	(*RecommendRoomSplitRequest)(nil),        // 44: seshat.RecommendRoomSplitRequest
	(*RecommendRoomSplitResponse)(nil),       // 45: seshat.RecommendRoomSplitResponse
	(*RoomSplitOption)(nil),                  // 46: seshat.RoomSplitOption
	(*GetSpawnHistoryRequest)(nil),           // 47: seshat.GetSpawnHistoryRequest
	(*GetSpawnHistoryResponse)(nil),          // 48: seshat.GetSpawnHistoryResponse
	(*SpawnHistoryEntry)(nil),                // 49: seshat.SpawnHistoryEntry
	(*GetActiveSpawnsRequest)(nil),           // 50: seshat.GetActiveSpawnsRequest
	(*GetActiveSpawnsResponse)(nil),          // 51: seshat.GetActiveSpawnsResponse
	(*DespawnEntityRequest)(nil),             // 52: seshat.DespawnEntityRequest
	(*DespawnEntityResponse)(nil),            // 53: seshat.DespawnEntityResponse
	nil,                                      // 54: seshat.SpawnEngine.PropertiesEntry
	nil,                                      // 55: seshat.PatternParameters.CustomParametersEntry
	nil,                                      // 56: seshat.ConstraintParameters.CustomParametersEntry
	nil,                                      // 57: seshat.SpawnEntityRequest.SpawnOptionsEntry
	nil,                                      // 58: seshat.SpawnMultipleEntitiesRequest.SpawnOptionsEntry
	nil,                                      // 59: seshat.SpawnFromPatternRequest.PatternOptionsEntry
	nil,                                      // 60: seshat.SpawnedEntity.SpawnMetadataEntry
	nil,                                      // 61: seshat.OptimalPosition.ConstraintScoresEntry
	nil,                                      // 62: seshat.SpawnHistoryEntry.DetailsEntry
	(*SelectionTable)(nil),                   // 63: seshat.SelectionTable
	(*Duration)(nil),                         // 64: seshat.Duration
	(*Position)(nil),                         // 65: seshat.Position
	(*Result)(nil),                           // 66: seshat.Result
	(*Entity)(nil),                           // 67: seshat.Entity
	(*Room)(nil),                             // 68: seshat.Room
}
var file_seshat_spawn_proto_depIdxs = []int32{
	4,   // 0: seshat.SpawnEngine.config:type_name -> seshat.SpawnConfiguration
	7,   // 1: seshat.SpawnEngine.constraints:type_name -> seshat.SpawnConstraint
	5,   // 2: seshat.SpawnEngine.patterns:type_name -> seshat.SpawnPattern
	63,  // 3: seshat.SpawnEngine.entity_table:type_name -> seshat.SelectionTable
	54,  // 4: seshat.SpawnEngine.properties:type_name -> seshat.SpawnEngine.PropertiesEntry
	64,  // 5: seshat.SpawnConfiguration.spawn_interval:type_name -> seshat.Duration
	0,   // 6: seshat.SpawnConfiguration.timing:type_name -> seshat.SpawnTiming
	1,   // 7: seshat.SpawnPattern.type:type_name -> seshat.PatternType
	6,   // 8: seshat.SpawnPattern.parameters:type_name -> seshat.PatternParameters
	7,   // 9: seshat.SpawnPattern.pattern_constraints:type_name -> seshat.SpawnConstraint
	55,  // 10: seshat.PatternParameters.custom_parameters:type_name -> seshat.PatternParameters.CustomParametersEntry
	2,   // 11: seshat.SpawnConstraint.type:type_name -> seshat.ConstraintType
	8,   // 12: seshat.SpawnConstraint.parameters:type_name -> seshat.ConstraintParameters
	65,  // 13: seshat.ConstraintParameters.min_position:type_name -> seshat.Position
	65,  // 14: seshat.ConstraintParameters.max_position:type_name -> seshat.Position
	65,  // 15: seshat.ConstraintParameters.forbidden_positions:type_name -> seshat.Position
	65,  // 16: seshat.ConstraintParameters.required_positions:type_name -> seshat.Position
	56,  // 17: seshat.ConstraintParameters.custom_parameters:type_name -> seshat.ConstraintParameters.CustomParametersEntry
	4,   // 18: seshat.CreateSpawnEngineRequest.config:type_name -> seshat.SpawnConfiguration
	63,  // 19: seshat.CreateSpawnEngineRequest.entity_table:type_name -> seshat.SelectionTable
	3,   // 20: seshat.CreateSpawnEngineResponse.engine:type_name -> seshat.SpawnEngine
	66,  // 21: seshat.CreateSpawnEngineResponse.status:type_name -> seshat.Result
	3,   // 22: seshat.GetSpawnEngineResponse.engine:type_name -> seshat.SpawnEngine
	66,  // 23: seshat.GetSpawnEngineResponse.status:type_name -> seshat.Result
	66,  // 24: seshat.DeleteSpawnEngineResponse.status:type_name -> seshat.Result
	65,  // 25: seshat.SpawnEntityRequest.preferred_position:type_name -> seshat.Position
	57,  // 26: seshat.SpawnEntityRequest.spawn_options:type_name -> seshat.SpawnEntityRequest.SpawnOptionsEntry
	21,  // 27: seshat.SpawnEntityResponse.spawned_entity:type_name -> seshat.SpawnedEntity
	66,  // 28: seshat.SpawnEntityResponse.status:type_name -> seshat.Result
	58,  // 29: seshat.SpawnMultipleEntitiesRequest.spawn_options:type_name -> seshat.SpawnMultipleEntitiesRequest.SpawnOptionsEntry
	21,  // 30: seshat.SpawnMultipleEntitiesResponse.spawned_entities:type_name -> seshat.SpawnedEntity
	22,  // 31: seshat.SpawnMultipleEntitiesResponse.attempt_result:type_name -> seshat.SpawnAttemptResult
	66,  // 32: seshat.SpawnMultipleEntitiesResponse.status:type_name -> seshat.Result
	59,  // 33: seshat.SpawnFromPatternRequest.pattern_options:type_name -> seshat.SpawnFromPatternRequest.PatternOptionsEntry
	21,  // 34: seshat.SpawnFromPatternResponse.spawned_entities:type_name -> seshat.SpawnedEntity
	5,   // 35: seshat.SpawnFromPatternResponse.pattern_used:type_name -> seshat.SpawnPattern
	22,  // 36: seshat.SpawnFromPatternResponse.attempt_result:type_name -> seshat.SpawnAttemptResult
	66,  // 37: seshat.SpawnFromPatternResponse.status:type_name -> seshat.Result
	67,  // 38: seshat.SpawnedEntity.entity:type_name -> seshat.Entity
	65,  // 39: seshat.SpawnedEntity.position:type_name -> seshat.Position
	60,  // 40: seshat.SpawnedEntity.spawn_metadata:type_name -> seshat.SpawnedEntity.SpawnMetadataEntry
	64,  // 41: seshat.SpawnAttemptResult.spawn_duration:type_name -> seshat.Duration
	1,   // 42: seshat.GetSpawnPatternsRequest.type:type_name -> seshat.PatternType
	5,   // 43: seshat.GetSpawnPatternsResponse.patterns:type_name -> seshat.SpawnPattern
	66,  // 44: seshat.GetSpawnPatternsResponse.status:type_name -> seshat.Result
	5,   // 45: seshat.CreateSpawnPatternRequest.pattern:type_name -> seshat.SpawnPattern
	5,   // 46: seshat.CreateSpawnPatternResponse.created_pattern:type_name -> seshat.SpawnPattern
	66,  // 47: seshat.CreateSpawnPatternResponse.status:type_name -> seshat.Result
	5,   // 48: seshat.UpdateSpawnPatternRequest.updated_pattern:type_name -> seshat.SpawnPattern
	5,   // 49: seshat.UpdateSpawnPatternResponse.pattern:type_name -> seshat.SpawnPattern
	66,  // 50: seshat.UpdateSpawnPatternResponse.status:type_name -> seshat.Result
	7,   // 51: seshat.AddSpawnConstraintRequest.constraint:type_name -> seshat.SpawnConstraint
	7,   // 52: seshat.AddSpawnConstraintResponse.added_constraint:type_name -> seshat.SpawnConstraint
	66,  // 53: seshat.AddSpawnConstraintResponse.status:type_name -> seshat.Result
	66,  // 54: seshat.RemoveSpawnConstraintResponse.status:type_name -> seshat.Result
	2,   // 55: seshat.GetSpawnConstraintsRequest.type:type_name -> seshat.ConstraintType
	7,   // 56: seshat.GetSpawnConstraintsResponse.constraints:type_name -> seshat.SpawnConstraint
	66,  // 57: seshat.GetSpawnConstraintsResponse.status:type_name -> seshat.Result
	65,  // 58: seshat.ValidateSpawnPositionRequest.position:type_name -> seshat.Position
	66,  // 59: seshat.ValidateSpawnPositionResponse.status:type_name -> seshat.Result
	39,  // 60: seshat.AnalyzeSpawnCapacityResponse.analysis:type_name -> seshat.SpawnCapacityAnalysis
	66,  // 61: seshat.AnalyzeSpawnCapacityResponse.status:type_name -> seshat.Result
	40,  // 62: seshat.SpawnCapacityAnalysis.type_capacities:type_name -> seshat.EntityTypeCapacity
	65,  // 63: seshat.EntityTypeCapacity.available_positions:type_name -> seshat.Position
	43,  // 64: seshat.GetOptimalSpawnPositionsResponse.positions:type_name -> seshat.OptimalPosition
	66,  // 65: seshat.GetOptimalSpawnPositionsResponse.status:type_name -> seshat.Result
	65,  // 66: seshat.OptimalPosition.position:type_name -> seshat.Position
	61,  // 67: seshat.OptimalPosition.constraint_scores:type_name -> seshat.OptimalPosition.ConstraintScoresEntry
	46,  // 68: seshat.RecommendRoomSplitResponse.options:type_name -> seshat.RoomSplitOption
	66,  // 69: seshat.RecommendRoomSplitResponse.status:type_name -> seshat.Result
	68,  // 70: seshat.RoomSplitOption.suggested_rooms:type_name -> seshat.Room
	49,  // 71: seshat.GetSpawnHistoryResponse.history:type_name -> seshat.SpawnHistoryEntry
	66,  // 72: seshat.GetSpawnHistoryResponse.status:type_name -> seshat.Result
	21,  // 73: seshat.SpawnHistoryEntry.entity:type_name -> seshat.SpawnedEntity
	22,  // 74: seshat.SpawnHistoryEntry.attempt_result:type_name -> seshat.SpawnAttemptResult
	62,  // 75: seshat.SpawnHistoryEntry.details:type_name -> seshat.SpawnHistoryEntry.DetailsEntry
	21,  // 76: seshat.GetActiveSpawnsResponse.active_spawns:type_name -> seshat.SpawnedEntity
	39,  // 77: seshat.GetActiveSpawnsResponse.current_capacity:type_name -> seshat.SpawnCapacityAnalysis
	66,  // 78: seshat.GetActiveSpawnsResponse.status:type_name -> seshat.Result
	21,  // 79: seshat.DespawnEntityResponse.despawned_entity:type_name -> seshat.SpawnedEntity
	66,  // 80: seshat.DespawnEntityResponse.status:type_name -> seshat.Result
	9,   // 81: seshat.SpawnService.CreateSpawnEngine:input_type -> seshat.CreateSpawnEngineRequest
	11,  // 82: seshat.SpawnService.GetSpawnEngine:input_type -> seshat.GetSpawnEngineRequest
	13,  // 83: seshat.SpawnService.DeleteSpawnEngine:input_type -> seshat.DeleteSpawnEngineRequest
	15,  // 84: seshat.SpawnService.SpawnEntity:input_type -> seshat.SpawnEntityRequest
	17,  // 85: seshat.SpawnService.SpawnMultipleEntities:input_type -> seshat.SpawnMultipleEntitiesRequest
	19,  // 86: seshat.SpawnService.SpawnFromPattern:input_type -> seshat.SpawnFromPatternRequest
	23,  // 87: seshat.SpawnService.GetSpawnPatterns:input_type -> seshat.GetSpawnPatternsRequest
	25,  // 88: seshat.SpawnService.CreateSpawnPattern:input_type -> seshat.CreateSpawnPatternRequest
	27,  // 89: seshat.SpawnService.UpdateSpawnPattern:input_type -> seshat.UpdateSpawnPatternRequest
	29,  // 90: seshat.SpawnService.AddSpawnConstraint:input_type -> seshat.AddSpawnConstraintRequest
	31,  // 91: seshat.SpawnService.RemoveSpawnConstraint:input_type -> seshat.RemoveSpawnConstraintRequest
	33,  // 92: seshat.SpawnService.GetSpawnConstraints:input_type -> seshat.GetSpawnConstraintsRequest
	35,  // 93: seshat.SpawnService.ValidateSpawnPosition:input_type -> seshat.ValidateSpawnPositionRequest
	37,  // 94: seshat.SpawnService.AnalyzeSpawnCapacity:input_type -> seshat.AnalyzeSpawnCapacityRequest
	41,  // 95: seshat.SpawnService.GetOptimalSpawnPositions:input_type -> seshat.GetOptimalSpawnPositionsRequest
	44,  // 96: seshat.SpawnService.RecommendRoomSplit:input_type -> seshat.RecommendRoomSplitRequest
	47,  // 97: seshat.SpawnService.GetSpawnHistory:input_type -> seshat.GetSpawnHistoryRequest
	50,  // 98: seshat.SpawnService.GetActiveSpawns:input_type -> seshat.GetActiveSpawnsRequest
	52,  // 99: seshat.SpawnService.DespawnEntity:input_type -> seshat.DespawnEntityRequest
	10,  // 100: seshat.SpawnService.CreateSpawnEngine:output_type -> seshat.CreateSpawnEngineResponse
	12,  // 101: seshat.SpawnService.GetSpawnEngine:output_type -> seshat.GetSpawnEngineResponse
	14,  // 102: seshat.SpawnService.DeleteSpawnEngine:output_type -> seshat.DeleteSpawnEngineResponse
	16,  // 103: seshat.SpawnService.SpawnEntity:output_type -> seshat.SpawnEntityResponse
	18,  // 104: seshat.SpawnService.SpawnMultipleEntities:output_type -> seshat.SpawnMultipleEntitiesResponse
	20,  // 105: seshat.SpawnService.SpawnFromPattern:output_type -> seshat.SpawnFromPatternResponse
	24,  // 106: seshat.SpawnService.GetSpawnPatterns:output_type -> seshat.GetSpawnPatternsResponse
	26,  // 107: seshat.SpawnService.CreateSpawnPattern:output_type -> seshat.CreateSpawnPatternResponse
	28,  // 108: seshat.SpawnService.UpdateSpawnPattern:output_type -> seshat.UpdateSpawnPatternResponse
	30,  // 109: seshat.SpawnService.AddSpawnConstraint:output_type -> seshat.AddSpawnConstraintResponse
	32,  // 110: seshat.SpawnService.RemoveSpawnConstraint:output_type -> seshat.RemoveSpawnConstraintResponse
	34,  // 111: seshat.SpawnService.GetSpawnConstraints:output_type -> seshat.GetSpawnConstraintsResponse
	36,  // 112: seshat.SpawnService.ValidateSpawnPosition:output_type -> seshat.ValidateSpawnPositionResponse
	38,  // 113: seshat.SpawnService.AnalyzeSpawnCapacity:output_type -> seshat.AnalyzeSpawnCapacityResponse
	42,  // 114: seshat.SpawnService.GetOptimalSpawnPositions:output_type -> seshat.GetOptimalSpawnPositionsResponse
	45,  // 115: seshat.SpawnService.RecommendRoomSplit:output_type -> seshat.RecommendRoomSplitResponse
	48,  // 116: seshat.SpawnService.GetSpawnHistory:output_type -> seshat.GetSpawnHistoryResponse
	51,  // 117: seshat.SpawnService.GetActiveSpawns:output_type -> seshat.GetActiveSpawnsResponse
	53,  // 118: seshat.SpawnService.DespawnEntity:output_type -> seshat.DespawnEntityResponse
	100, // [100:119] is the sub-list for method output_type
	81,  // [81:100] is the sub-list for method input_type
	81,  // [81:81] is the sub-list for extension type_name
	81,  // [81:81] is the sub-list for extension extendee
	0,   // [0:81] is the sub-list for field type_name
}

func init() { file_seshat_spawn_proto_init() }
func file_seshat_spawn_proto_init() {
	if File_seshat_spawn_proto != nil {
		return
	}
	file_seshat_common_proto_init()
	file_seshat_spatial_proto_init()
	file_seshat_selectables_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_seshat_spawn_proto_rawDesc), len(file_seshat_spawn_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_seshat_spawn_proto_goTypes,
		DependencyIndexes: file_seshat_spawn_proto_depIdxs,
		EnumInfos:         file_seshat_spawn_proto_enumTypes,
		MessageInfos:      file_seshat_spawn_proto_msgTypes,
	}.Build()
	File_seshat_spawn_proto = out.File
	file_seshat_spawn_proto_goTypes = nil
	file_seshat_spawn_proto_depIdxs = nil
}

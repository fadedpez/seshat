// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: seshat/spells.proto

package seshat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpellService_GetSpell_FullMethodName               = "/seshat.SpellService/GetSpell"
	SpellService_ListSpells_FullMethodName             = "/seshat.SpellService/ListSpells"
	SpellService_CreateCustomSpell_FullMethodName      = "/seshat.SpellService/CreateCustomSpell"
	SpellService_CastSpell_FullMethodName              = "/seshat.SpellService/CastSpell"
	SpellService_CanCastSpell_FullMethodName           = "/seshat.SpellService/CanCastSpell"
	SpellService_GetCastingOptions_FullMethodName      = "/seshat.SpellService/GetCastingOptions"
	SpellService_GetSpellSlots_FullMethodName          = "/seshat.SpellService/GetSpellSlots"
	SpellService_UpdateSpellSlots_FullMethodName       = "/seshat.SpellService/UpdateSpellSlots"
	SpellService_GetPreparedSpells_FullMethodName      = "/seshat.SpellService/GetPreparedSpells"
	SpellService_PrepareSpell_FullMethodName           = "/seshat.SpellService/PrepareSpell"
	SpellService_UnprepareSpell_FullMethodName         = "/seshat.SpellService/UnprepareSpell"
	SpellService_StartConcentration_FullMethodName     = "/seshat.SpellService/StartConcentration"
	SpellService_EndConcentration_FullMethodName       = "/seshat.SpellService/EndConcentration"
	SpellService_GetConcentrationStatus_FullMethodName = "/seshat.SpellService/GetConcentrationStatus"
	SpellService_MakeConcentrationCheck_FullMethodName = "/seshat.SpellService/MakeConcentrationCheck"
	SpellService_GetSpellTargets_FullMethodName        = "/seshat.SpellService/GetSpellTargets"
	SpellService_ApplySpellEffects_FullMethodName      = "/seshat.SpellService/ApplySpellEffects"
	SpellService_GetSpellAreas_FullMethodName          = "/seshat.SpellService/GetSpellAreas"
	SpellService_GetSpellHistory_FullMethodName        = "/seshat.SpellService/GetSpellHistory"
	SpellService_GetActiveSpells_FullMethodName        = "/seshat.SpellService/GetActiveSpells"
)

// SpellServiceClient is the client API for SpellService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Spell system service - exposes all spells toolkit functionality
type SpellServiceClient interface {
	// Spell management
	GetSpell(ctx context.Context, in *GetSpellRequest, opts ...grpc.CallOption) (*GetSpellResponse, error)
	ListSpells(ctx context.Context, in *ListSpellsRequest, opts ...grpc.CallOption) (*ListSpellsResponse, error)
	CreateCustomSpell(ctx context.Context, in *CreateCustomSpellRequest, opts ...grpc.CallOption) (*CreateCustomSpellResponse, error)
	// Spell casting
	CastSpell(ctx context.Context, in *CastSpellRequest, opts ...grpc.CallOption) (*CastSpellResponse, error)
	CanCastSpell(ctx context.Context, in *CanCastSpellRequest, opts ...grpc.CallOption) (*CanCastSpellResponse, error)
	GetCastingOptions(ctx context.Context, in *GetCastingOptionsRequest, opts ...grpc.CallOption) (*GetCastingOptionsResponse, error)
	// Spell slots and preparation
	GetSpellSlots(ctx context.Context, in *GetSpellSlotsRequest, opts ...grpc.CallOption) (*GetSpellSlotsResponse, error)
	UpdateSpellSlots(ctx context.Context, in *UpdateSpellSlotsRequest, opts ...grpc.CallOption) (*UpdateSpellSlotsResponse, error)
	GetPreparedSpells(ctx context.Context, in *GetPreparedSpellsRequest, opts ...grpc.CallOption) (*GetPreparedSpellsResponse, error)
	PrepareSpell(ctx context.Context, in *PrepareSpellRequest, opts ...grpc.CallOption) (*PrepareSpellResponse, error)
	UnprepareSpell(ctx context.Context, in *UnprepareSpellRequest, opts ...grpc.CallOption) (*UnprepareSpellResponse, error)
	// Concentration management
	StartConcentration(ctx context.Context, in *StartConcentrationRequest, opts ...grpc.CallOption) (*StartConcentrationResponse, error)
	EndConcentration(ctx context.Context, in *EndConcentrationRequest, opts ...grpc.CallOption) (*EndConcentrationResponse, error)
	GetConcentrationStatus(ctx context.Context, in *GetConcentrationStatusRequest, opts ...grpc.CallOption) (*GetConcentrationStatusResponse, error)
	MakeConcentrationCheck(ctx context.Context, in *MakeConcentrationCheckRequest, opts ...grpc.CallOption) (*MakeConcentrationCheckResponse, error)
	// Spell effects and targeting
	GetSpellTargets(ctx context.Context, in *GetSpellTargetsRequest, opts ...grpc.CallOption) (*GetSpellTargetsResponse, error)
	ApplySpellEffects(ctx context.Context, in *ApplySpellEffectsRequest, opts ...grpc.CallOption) (*ApplySpellEffectsResponse, error)
	GetSpellAreas(ctx context.Context, in *GetSpellAreasRequest, opts ...grpc.CallOption) (*GetSpellAreasResponse, error)
	// Spell history and tracking
	GetSpellHistory(ctx context.Context, in *GetSpellHistoryRequest, opts ...grpc.CallOption) (*GetSpellHistoryResponse, error)
	GetActiveSpells(ctx context.Context, in *GetActiveSpellsRequest, opts ...grpc.CallOption) (*GetActiveSpellsResponse, error)
}

type spellServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpellServiceClient(cc grpc.ClientConnInterface) SpellServiceClient {
	return &spellServiceClient{cc}
}

func (c *spellServiceClient) GetSpell(ctx context.Context, in *GetSpellRequest, opts ...grpc.CallOption) (*GetSpellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpellResponse)
	err := c.cc.Invoke(ctx, SpellService_GetSpell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) ListSpells(ctx context.Context, in *ListSpellsRequest, opts ...grpc.CallOption) (*ListSpellsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSpellsResponse)
	err := c.cc.Invoke(ctx, SpellService_ListSpells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) CreateCustomSpell(ctx context.Context, in *CreateCustomSpellRequest, opts ...grpc.CallOption) (*CreateCustomSpellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomSpellResponse)
	err := c.cc.Invoke(ctx, SpellService_CreateCustomSpell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) CastSpell(ctx context.Context, in *CastSpellRequest, opts ...grpc.CallOption) (*CastSpellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CastSpellResponse)
	err := c.cc.Invoke(ctx, SpellService_CastSpell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) CanCastSpell(ctx context.Context, in *CanCastSpellRequest, opts ...grpc.CallOption) (*CanCastSpellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanCastSpellResponse)
	err := c.cc.Invoke(ctx, SpellService_CanCastSpell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) GetCastingOptions(ctx context.Context, in *GetCastingOptionsRequest, opts ...grpc.CallOption) (*GetCastingOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCastingOptionsResponse)
	err := c.cc.Invoke(ctx, SpellService_GetCastingOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) GetSpellSlots(ctx context.Context, in *GetSpellSlotsRequest, opts ...grpc.CallOption) (*GetSpellSlotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpellSlotsResponse)
	err := c.cc.Invoke(ctx, SpellService_GetSpellSlots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) UpdateSpellSlots(ctx context.Context, in *UpdateSpellSlotsRequest, opts ...grpc.CallOption) (*UpdateSpellSlotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSpellSlotsResponse)
	err := c.cc.Invoke(ctx, SpellService_UpdateSpellSlots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) GetPreparedSpells(ctx context.Context, in *GetPreparedSpellsRequest, opts ...grpc.CallOption) (*GetPreparedSpellsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPreparedSpellsResponse)
	err := c.cc.Invoke(ctx, SpellService_GetPreparedSpells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) PrepareSpell(ctx context.Context, in *PrepareSpellRequest, opts ...grpc.CallOption) (*PrepareSpellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareSpellResponse)
	err := c.cc.Invoke(ctx, SpellService_PrepareSpell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) UnprepareSpell(ctx context.Context, in *UnprepareSpellRequest, opts ...grpc.CallOption) (*UnprepareSpellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnprepareSpellResponse)
	err := c.cc.Invoke(ctx, SpellService_UnprepareSpell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) StartConcentration(ctx context.Context, in *StartConcentrationRequest, opts ...grpc.CallOption) (*StartConcentrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartConcentrationResponse)
	err := c.cc.Invoke(ctx, SpellService_StartConcentration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) EndConcentration(ctx context.Context, in *EndConcentrationRequest, opts ...grpc.CallOption) (*EndConcentrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndConcentrationResponse)
	err := c.cc.Invoke(ctx, SpellService_EndConcentration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) GetConcentrationStatus(ctx context.Context, in *GetConcentrationStatusRequest, opts ...grpc.CallOption) (*GetConcentrationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConcentrationStatusResponse)
	err := c.cc.Invoke(ctx, SpellService_GetConcentrationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) MakeConcentrationCheck(ctx context.Context, in *MakeConcentrationCheckRequest, opts ...grpc.CallOption) (*MakeConcentrationCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeConcentrationCheckResponse)
	err := c.cc.Invoke(ctx, SpellService_MakeConcentrationCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) GetSpellTargets(ctx context.Context, in *GetSpellTargetsRequest, opts ...grpc.CallOption) (*GetSpellTargetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpellTargetsResponse)
	err := c.cc.Invoke(ctx, SpellService_GetSpellTargets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) ApplySpellEffects(ctx context.Context, in *ApplySpellEffectsRequest, opts ...grpc.CallOption) (*ApplySpellEffectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplySpellEffectsResponse)
	err := c.cc.Invoke(ctx, SpellService_ApplySpellEffects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) GetSpellAreas(ctx context.Context, in *GetSpellAreasRequest, opts ...grpc.CallOption) (*GetSpellAreasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpellAreasResponse)
	err := c.cc.Invoke(ctx, SpellService_GetSpellAreas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) GetSpellHistory(ctx context.Context, in *GetSpellHistoryRequest, opts ...grpc.CallOption) (*GetSpellHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpellHistoryResponse)
	err := c.cc.Invoke(ctx, SpellService_GetSpellHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) GetActiveSpells(ctx context.Context, in *GetActiveSpellsRequest, opts ...grpc.CallOption) (*GetActiveSpellsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveSpellsResponse)
	err := c.cc.Invoke(ctx, SpellService_GetActiveSpells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpellServiceServer is the server API for SpellService service.
// All implementations must embed UnimplementedSpellServiceServer
// for forward compatibility.
//
// Spell system service - exposes all spells toolkit functionality
type SpellServiceServer interface {
	// Spell management
	GetSpell(context.Context, *GetSpellRequest) (*GetSpellResponse, error)
	ListSpells(context.Context, *ListSpellsRequest) (*ListSpellsResponse, error)
	CreateCustomSpell(context.Context, *CreateCustomSpellRequest) (*CreateCustomSpellResponse, error)
	// Spell casting
	CastSpell(context.Context, *CastSpellRequest) (*CastSpellResponse, error)
	CanCastSpell(context.Context, *CanCastSpellRequest) (*CanCastSpellResponse, error)
	GetCastingOptions(context.Context, *GetCastingOptionsRequest) (*GetCastingOptionsResponse, error)
	// Spell slots and preparation
	GetSpellSlots(context.Context, *GetSpellSlotsRequest) (*GetSpellSlotsResponse, error)
	UpdateSpellSlots(context.Context, *UpdateSpellSlotsRequest) (*UpdateSpellSlotsResponse, error)
	GetPreparedSpells(context.Context, *GetPreparedSpellsRequest) (*GetPreparedSpellsResponse, error)
	PrepareSpell(context.Context, *PrepareSpellRequest) (*PrepareSpellResponse, error)
	UnprepareSpell(context.Context, *UnprepareSpellRequest) (*UnprepareSpellResponse, error)
	// Concentration management
	StartConcentration(context.Context, *StartConcentrationRequest) (*StartConcentrationResponse, error)
	EndConcentration(context.Context, *EndConcentrationRequest) (*EndConcentrationResponse, error)
	GetConcentrationStatus(context.Context, *GetConcentrationStatusRequest) (*GetConcentrationStatusResponse, error)
	MakeConcentrationCheck(context.Context, *MakeConcentrationCheckRequest) (*MakeConcentrationCheckResponse, error)
	// Spell effects and targeting
	GetSpellTargets(context.Context, *GetSpellTargetsRequest) (*GetSpellTargetsResponse, error)
	ApplySpellEffects(context.Context, *ApplySpellEffectsRequest) (*ApplySpellEffectsResponse, error)
	GetSpellAreas(context.Context, *GetSpellAreasRequest) (*GetSpellAreasResponse, error)
	// Spell history and tracking
	GetSpellHistory(context.Context, *GetSpellHistoryRequest) (*GetSpellHistoryResponse, error)
	GetActiveSpells(context.Context, *GetActiveSpellsRequest) (*GetActiveSpellsResponse, error)
	mustEmbedUnimplementedSpellServiceServer()
}

// UnimplementedSpellServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpellServiceServer struct{}

func (UnimplementedSpellServiceServer) GetSpell(context.Context, *GetSpellRequest) (*GetSpellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpell not implemented")
}
func (UnimplementedSpellServiceServer) ListSpells(context.Context, *ListSpellsRequest) (*ListSpellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpells not implemented")
}
func (UnimplementedSpellServiceServer) CreateCustomSpell(context.Context, *CreateCustomSpellRequest) (*CreateCustomSpellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomSpell not implemented")
}
func (UnimplementedSpellServiceServer) CastSpell(context.Context, *CastSpellRequest) (*CastSpellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CastSpell not implemented")
}
func (UnimplementedSpellServiceServer) CanCastSpell(context.Context, *CanCastSpellRequest) (*CanCastSpellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanCastSpell not implemented")
}
func (UnimplementedSpellServiceServer) GetCastingOptions(context.Context, *GetCastingOptionsRequest) (*GetCastingOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCastingOptions not implemented")
}
func (UnimplementedSpellServiceServer) GetSpellSlots(context.Context, *GetSpellSlotsRequest) (*GetSpellSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpellSlots not implemented")
}
func (UnimplementedSpellServiceServer) UpdateSpellSlots(context.Context, *UpdateSpellSlotsRequest) (*UpdateSpellSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpellSlots not implemented")
}
func (UnimplementedSpellServiceServer) GetPreparedSpells(context.Context, *GetPreparedSpellsRequest) (*GetPreparedSpellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreparedSpells not implemented")
}
func (UnimplementedSpellServiceServer) PrepareSpell(context.Context, *PrepareSpellRequest) (*PrepareSpellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSpell not implemented")
}
func (UnimplementedSpellServiceServer) UnprepareSpell(context.Context, *UnprepareSpellRequest) (*UnprepareSpellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnprepareSpell not implemented")
}
func (UnimplementedSpellServiceServer) StartConcentration(context.Context, *StartConcentrationRequest) (*StartConcentrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConcentration not implemented")
}
func (UnimplementedSpellServiceServer) EndConcentration(context.Context, *EndConcentrationRequest) (*EndConcentrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndConcentration not implemented")
}
func (UnimplementedSpellServiceServer) GetConcentrationStatus(context.Context, *GetConcentrationStatusRequest) (*GetConcentrationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConcentrationStatus not implemented")
}
func (UnimplementedSpellServiceServer) MakeConcentrationCheck(context.Context, *MakeConcentrationCheckRequest) (*MakeConcentrationCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeConcentrationCheck not implemented")
}
func (UnimplementedSpellServiceServer) GetSpellTargets(context.Context, *GetSpellTargetsRequest) (*GetSpellTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpellTargets not implemented")
}
func (UnimplementedSpellServiceServer) ApplySpellEffects(context.Context, *ApplySpellEffectsRequest) (*ApplySpellEffectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplySpellEffects not implemented")
}
func (UnimplementedSpellServiceServer) GetSpellAreas(context.Context, *GetSpellAreasRequest) (*GetSpellAreasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpellAreas not implemented")
}
func (UnimplementedSpellServiceServer) GetSpellHistory(context.Context, *GetSpellHistoryRequest) (*GetSpellHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpellHistory not implemented")
}
func (UnimplementedSpellServiceServer) GetActiveSpells(context.Context, *GetActiveSpellsRequest) (*GetActiveSpellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSpells not implemented")
}
func (UnimplementedSpellServiceServer) mustEmbedUnimplementedSpellServiceServer() {}
func (UnimplementedSpellServiceServer) testEmbeddedByValue()                      {}

// UnsafeSpellServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpellServiceServer will
// result in compilation errors.
type UnsafeSpellServiceServer interface {
	mustEmbedUnimplementedSpellServiceServer()
}

func RegisterSpellServiceServer(s grpc.ServiceRegistrar, srv SpellServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpellServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpellService_ServiceDesc, srv)
}

func _SpellService_GetSpell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).GetSpell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_GetSpell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).GetSpell(ctx, req.(*GetSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_ListSpells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).ListSpells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_ListSpells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).ListSpells(ctx, req.(*ListSpellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_CreateCustomSpell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).CreateCustomSpell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_CreateCustomSpell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).CreateCustomSpell(ctx, req.(*CreateCustomSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_CastSpell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CastSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).CastSpell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_CastSpell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).CastSpell(ctx, req.(*CastSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_CanCastSpell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanCastSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).CanCastSpell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_CanCastSpell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).CanCastSpell(ctx, req.(*CanCastSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_GetCastingOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCastingOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).GetCastingOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_GetCastingOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).GetCastingOptions(ctx, req.(*GetCastingOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_GetSpellSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpellSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).GetSpellSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_GetSpellSlots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).GetSpellSlots(ctx, req.(*GetSpellSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_UpdateSpellSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpellSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).UpdateSpellSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_UpdateSpellSlots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).UpdateSpellSlots(ctx, req.(*UpdateSpellSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_GetPreparedSpells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreparedSpellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).GetPreparedSpells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_GetPreparedSpells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).GetPreparedSpells(ctx, req.(*GetPreparedSpellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_PrepareSpell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).PrepareSpell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_PrepareSpell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).PrepareSpell(ctx, req.(*PrepareSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_UnprepareSpell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnprepareSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).UnprepareSpell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_UnprepareSpell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).UnprepareSpell(ctx, req.(*UnprepareSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_StartConcentration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartConcentrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).StartConcentration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_StartConcentration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).StartConcentration(ctx, req.(*StartConcentrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_EndConcentration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndConcentrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).EndConcentration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_EndConcentration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).EndConcentration(ctx, req.(*EndConcentrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_GetConcentrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConcentrationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).GetConcentrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_GetConcentrationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).GetConcentrationStatus(ctx, req.(*GetConcentrationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_MakeConcentrationCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeConcentrationCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).MakeConcentrationCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_MakeConcentrationCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).MakeConcentrationCheck(ctx, req.(*MakeConcentrationCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_GetSpellTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpellTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).GetSpellTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_GetSpellTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).GetSpellTargets(ctx, req.(*GetSpellTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_ApplySpellEffects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplySpellEffectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).ApplySpellEffects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_ApplySpellEffects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).ApplySpellEffects(ctx, req.(*ApplySpellEffectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_GetSpellAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpellAreasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).GetSpellAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_GetSpellAreas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).GetSpellAreas(ctx, req.(*GetSpellAreasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_GetSpellHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpellHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).GetSpellHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_GetSpellHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).GetSpellHistory(ctx, req.(*GetSpellHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_GetActiveSpells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSpellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).GetActiveSpells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_GetActiveSpells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).GetActiveSpells(ctx, req.(*GetActiveSpellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpellService_ServiceDesc is the grpc.ServiceDesc for SpellService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpellService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seshat.SpellService",
	HandlerType: (*SpellServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpell",
			Handler:    _SpellService_GetSpell_Handler,
		},
		{
			MethodName: "ListSpells",
			Handler:    _SpellService_ListSpells_Handler,
		},
		{
			MethodName: "CreateCustomSpell",
			Handler:    _SpellService_CreateCustomSpell_Handler,
		},
		{
			MethodName: "CastSpell",
			Handler:    _SpellService_CastSpell_Handler,
		},
		{
			MethodName: "CanCastSpell",
			Handler:    _SpellService_CanCastSpell_Handler,
		},
		{
			MethodName: "GetCastingOptions",
			Handler:    _SpellService_GetCastingOptions_Handler,
		},
		{
			MethodName: "GetSpellSlots",
			Handler:    _SpellService_GetSpellSlots_Handler,
		},
		{
			MethodName: "UpdateSpellSlots",
			Handler:    _SpellService_UpdateSpellSlots_Handler,
		},
		{
			MethodName: "GetPreparedSpells",
			Handler:    _SpellService_GetPreparedSpells_Handler,
		},
		{
			MethodName: "PrepareSpell",
			Handler:    _SpellService_PrepareSpell_Handler,
		},
		{
			MethodName: "UnprepareSpell",
			Handler:    _SpellService_UnprepareSpell_Handler,
		},
		{
			MethodName: "StartConcentration",
			Handler:    _SpellService_StartConcentration_Handler,
		},
		{
			MethodName: "EndConcentration",
			Handler:    _SpellService_EndConcentration_Handler,
		},
		{
			MethodName: "GetConcentrationStatus",
			Handler:    _SpellService_GetConcentrationStatus_Handler,
		},
		{
			MethodName: "MakeConcentrationCheck",
			Handler:    _SpellService_MakeConcentrationCheck_Handler,
		},
		{
			MethodName: "GetSpellTargets",
			Handler:    _SpellService_GetSpellTargets_Handler,
		},
		{
			MethodName: "ApplySpellEffects",
			Handler:    _SpellService_ApplySpellEffects_Handler,
		},
		{
			MethodName: "GetSpellAreas",
			Handler:    _SpellService_GetSpellAreas_Handler,
		},
		{
			MethodName: "GetSpellHistory",
			Handler:    _SpellService_GetSpellHistory_Handler,
		},
		{
			MethodName: "GetActiveSpells",
			Handler:    _SpellService_GetActiveSpells_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seshat/spells.proto",
}

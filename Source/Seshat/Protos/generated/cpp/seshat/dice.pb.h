// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: seshat/dice.proto
// Protobuf C++ Version: 6.31.1

#ifndef seshat_2fdice_2eproto_2epb_2eh
#define seshat_2fdice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "seshat/common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_seshat_2fdice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_seshat_2fdice_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_seshat_2fdice_2eproto;
}  // extern "C"
namespace seshat {
class DiceGroup;
struct DiceGroupDefaultTypeInternal;
extern DiceGroupDefaultTypeInternal _DiceGroup_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DiceGroup_class_data_;
class FairnessTestRequest;
struct FairnessTestRequestDefaultTypeInternal;
extern FairnessTestRequestDefaultTypeInternal _FairnessTestRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull FairnessTestRequest_class_data_;
class FairnessTestResponse;
struct FairnessTestResponseDefaultTypeInternal;
extern FairnessTestResponseDefaultTypeInternal _FairnessTestResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull FairnessTestResponse_class_data_;
class RollFormulaRequest;
struct RollFormulaRequestDefaultTypeInternal;
extern RollFormulaRequestDefaultTypeInternal _RollFormulaRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RollFormulaRequest_class_data_;
class RollFormulaResponse;
struct RollFormulaResponseDefaultTypeInternal;
extern RollFormulaResponseDefaultTypeInternal _RollFormulaResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RollFormulaResponse_class_data_;
class RollHistoryRequest;
struct RollHistoryRequestDefaultTypeInternal;
extern RollHistoryRequestDefaultTypeInternal _RollHistoryRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RollHistoryRequest_class_data_;
class RollHistoryResponse;
struct RollHistoryResponseDefaultTypeInternal;
extern RollHistoryResponseDefaultTypeInternal _RollHistoryResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RollHistoryResponse_class_data_;
class RollMultipleRequest;
struct RollMultipleRequestDefaultTypeInternal;
extern RollMultipleRequestDefaultTypeInternal _RollMultipleRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RollMultipleRequest_class_data_;
class RollMultipleResponse;
struct RollMultipleResponseDefaultTypeInternal;
extern RollMultipleResponseDefaultTypeInternal _RollMultipleResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RollMultipleResponse_class_data_;
class RollRecord;
struct RollRecordDefaultTypeInternal;
extern RollRecordDefaultTypeInternal _RollRecord_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RollRecord_class_data_;
class RollRequest;
struct RollRequestDefaultTypeInternal;
extern RollRequestDefaultTypeInternal _RollRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RollRequest_class_data_;
class RollResponse;
struct RollResponseDefaultTypeInternal;
extern RollResponseDefaultTypeInternal _RollResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RollResponse_class_data_;
}  // namespace seshat
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seshat {

// ===================================================================


// -------------------------------------------------------------------

class RollRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.RollRequest) */ {
 public:
  inline RollRequest() : RollRequest(nullptr) {}
  ~RollRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollRequest(::google::protobuf::internal::ConstantInitialized);

  inline RollRequest(const RollRequest& from) : RollRequest(nullptr, from) {}
  inline RollRequest(RollRequest&& from) noexcept
      : RollRequest(nullptr, ::std::move(from)) {}
  inline RollRequest& operator=(const RollRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollRequest& operator=(RollRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollRequest& default_instance() {
    return *reinterpret_cast<const RollRequest*>(
        &_RollRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RollRequest& a, RollRequest& b) { a.Swap(&b); }
  inline void Swap(RollRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollRequest& from) { RollRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.RollRequest"; }

 protected:
  explicit RollRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RollRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RollRequest& from);
  RollRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RollRequest&& from) noexcept
      : RollRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContextFieldNumber = 2,
    kEntityIdFieldNumber = 3,
    kSidesFieldNumber = 1,
  };
  // string context = 2 [json_name = "context"];
  void clear_context() ;
  const ::std::string& context() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_context();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_context();
  void set_allocated_context(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_context() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_context(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_context();

  public:
  // string entity_id = 3 [json_name = "entityId"];
  void clear_entity_id() ;
  const ::std::string& entity_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_entity_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_entity_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_entity_id();
  void set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_entity_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_entity_id();

  public:
  // int32 sides = 1 [json_name = "sides"];
  void clear_sides() ;
  ::int32_t sides() const;
  void set_sides(::int32_t value);

  private:
  ::int32_t _internal_sides() const;
  void _internal_set_sides(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.RollRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 43,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RollRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::google::protobuf::internal::ArenaStringPtr entity_id_;
    ::int32_t sides_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RollRequest_class_data_;
// -------------------------------------------------------------------

class RollRecord final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.RollRecord) */ {
 public:
  inline RollRecord() : RollRecord(nullptr) {}
  ~RollRecord() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollRecord* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollRecord));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollRecord(::google::protobuf::internal::ConstantInitialized);

  inline RollRecord(const RollRecord& from) : RollRecord(nullptr, from) {}
  inline RollRecord(RollRecord&& from) noexcept
      : RollRecord(nullptr, ::std::move(from)) {}
  inline RollRecord& operator=(const RollRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollRecord& operator=(RollRecord&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollRecord& default_instance() {
    return *reinterpret_cast<const RollRecord*>(
        &_RollRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(RollRecord& a, RollRecord& b) { a.Swap(&b); }
  inline void Swap(RollRecord* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollRecord* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollRecord* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollRecord>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollRecord& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollRecord& from) { RollRecord::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollRecord* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.RollRecord"; }

 protected:
  explicit RollRecord(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RollRecord(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RollRecord& from);
  RollRecord(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RollRecord&& from) noexcept
      : RollRecord(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIndividualRollsFieldNumber = 6,
    kFormulaFieldNumber = 1,
    kContextFieldNumber = 3,
    kEntityIdFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kResultFieldNumber = 2,
  };
  // repeated int32 individual_rolls = 6 [json_name = "individualRolls"];
  int individual_rolls_size() const;
  private:
  int _internal_individual_rolls_size() const;

  public:
  void clear_individual_rolls() ;
  ::int32_t individual_rolls(int index) const;
  void set_individual_rolls(int index, ::int32_t value);
  void add_individual_rolls(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& individual_rolls() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL mutable_individual_rolls();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_individual_rolls() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL _internal_mutable_individual_rolls();

  public:
  // string formula = 1 [json_name = "formula"];
  void clear_formula() ;
  const ::std::string& formula() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_formula(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_formula();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_formula();
  void set_allocated_formula(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_formula() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_formula(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_formula();

  public:
  // string context = 3 [json_name = "context"];
  void clear_context() ;
  const ::std::string& context() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_context();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_context();
  void set_allocated_context(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_context() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_context(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_context();

  public:
  // string entity_id = 4 [json_name = "entityId"];
  void clear_entity_id() ;
  const ::std::string& entity_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_entity_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_entity_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_entity_id();
  void set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_entity_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_entity_id();

  public:
  // int64 timestamp = 5 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int32 result = 2 [json_name = "result"];
  void clear_result() ;
  ::int32_t result() const;
  void set_result(::int32_t value);

  private:
  ::int32_t _internal_result() const;
  void _internal_set_result(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.RollRecord)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 49,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RollRecord& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> individual_rolls_;
    ::google::protobuf::internal::CachedSize _individual_rolls_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr formula_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::google::protobuf::internal::ArenaStringPtr entity_id_;
    ::int64_t timestamp_;
    ::int32_t result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RollRecord_class_data_;
// -------------------------------------------------------------------

class RollMultipleRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.RollMultipleRequest) */ {
 public:
  inline RollMultipleRequest() : RollMultipleRequest(nullptr) {}
  ~RollMultipleRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollMultipleRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollMultipleRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollMultipleRequest(::google::protobuf::internal::ConstantInitialized);

  inline RollMultipleRequest(const RollMultipleRequest& from) : RollMultipleRequest(nullptr, from) {}
  inline RollMultipleRequest(RollMultipleRequest&& from) noexcept
      : RollMultipleRequest(nullptr, ::std::move(from)) {}
  inline RollMultipleRequest& operator=(const RollMultipleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollMultipleRequest& operator=(RollMultipleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollMultipleRequest& default_instance() {
    return *reinterpret_cast<const RollMultipleRequest*>(
        &_RollMultipleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(RollMultipleRequest& a, RollMultipleRequest& b) { a.Swap(&b); }
  inline void Swap(RollMultipleRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollMultipleRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollMultipleRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollMultipleRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollMultipleRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollMultipleRequest& from) { RollMultipleRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollMultipleRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.RollMultipleRequest"; }

 protected:
  explicit RollMultipleRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RollMultipleRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RollMultipleRequest& from);
  RollMultipleRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RollMultipleRequest&& from) noexcept
      : RollMultipleRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContextFieldNumber = 3,
    kEntityIdFieldNumber = 4,
    kCountFieldNumber = 1,
    kSidesFieldNumber = 2,
    kDropLowestFieldNumber = 5,
    kDropHighestFieldNumber = 6,
    kKeepCountFieldNumber = 7,
  };
  // string context = 3 [json_name = "context"];
  void clear_context() ;
  const ::std::string& context() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_context();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_context();
  void set_allocated_context(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_context() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_context(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_context();

  public:
  // string entity_id = 4 [json_name = "entityId"];
  void clear_entity_id() ;
  const ::std::string& entity_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_entity_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_entity_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_entity_id();
  void set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_entity_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_entity_id();

  public:
  // int32 count = 1 [json_name = "count"];
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // int32 sides = 2 [json_name = "sides"];
  void clear_sides() ;
  ::int32_t sides() const;
  void set_sides(::int32_t value);

  private:
  ::int32_t _internal_sides() const;
  void _internal_set_sides(::int32_t value);

  public:
  // bool drop_lowest = 5 [json_name = "dropLowest"];
  void clear_drop_lowest() ;
  bool drop_lowest() const;
  void set_drop_lowest(bool value);

  private:
  bool _internal_drop_lowest() const;
  void _internal_set_drop_lowest(bool value);

  public:
  // bool drop_highest = 6 [json_name = "dropHighest"];
  void clear_drop_highest() ;
  bool drop_highest() const;
  void set_drop_highest(bool value);

  private:
  bool _internal_drop_highest() const;
  void _internal_set_drop_highest(bool value);

  public:
  // int32 keep_count = 7 [json_name = "keepCount"];
  void clear_keep_count() ;
  ::int32_t keep_count() const;
  void set_keep_count(::int32_t value);

  private:
  ::int32_t _internal_keep_count() const;
  void _internal_set_keep_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.RollMultipleRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   0, 51,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RollMultipleRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::google::protobuf::internal::ArenaStringPtr entity_id_;
    ::int32_t count_;
    ::int32_t sides_;
    bool drop_lowest_;
    bool drop_highest_;
    ::int32_t keep_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RollMultipleRequest_class_data_;
// -------------------------------------------------------------------

class RollHistoryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.RollHistoryRequest) */ {
 public:
  inline RollHistoryRequest() : RollHistoryRequest(nullptr) {}
  ~RollHistoryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollHistoryRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollHistoryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollHistoryRequest(::google::protobuf::internal::ConstantInitialized);

  inline RollHistoryRequest(const RollHistoryRequest& from) : RollHistoryRequest(nullptr, from) {}
  inline RollHistoryRequest(RollHistoryRequest&& from) noexcept
      : RollHistoryRequest(nullptr, ::std::move(from)) {}
  inline RollHistoryRequest& operator=(const RollHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollHistoryRequest& operator=(RollHistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollHistoryRequest& default_instance() {
    return *reinterpret_cast<const RollHistoryRequest*>(
        &_RollHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(RollHistoryRequest& a, RollHistoryRequest& b) { a.Swap(&b); }
  inline void Swap(RollHistoryRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollHistoryRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollHistoryRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollHistoryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollHistoryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollHistoryRequest& from) { RollHistoryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollHistoryRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.RollHistoryRequest"; }

 protected:
  explicit RollHistoryRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RollHistoryRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RollHistoryRequest& from);
  RollHistoryRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RollHistoryRequest&& from) noexcept
      : RollHistoryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntityIdFieldNumber = 1,
    kContextFieldNumber = 2,
    kSinceTimestampFieldNumber = 4,
    kLimitFieldNumber = 3,
  };
  // string entity_id = 1 [json_name = "entityId"];
  void clear_entity_id() ;
  const ::std::string& entity_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_entity_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_entity_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_entity_id();
  void set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_entity_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_entity_id();

  public:
  // string context = 2 [json_name = "context"];
  void clear_context() ;
  const ::std::string& context() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_context();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_context();
  void set_allocated_context(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_context() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_context(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_context();

  public:
  // int64 since_timestamp = 4 [json_name = "sinceTimestamp"];
  void clear_since_timestamp() ;
  ::int64_t since_timestamp() const;
  void set_since_timestamp(::int64_t value);

  private:
  ::int64_t _internal_since_timestamp() const;
  void _internal_set_since_timestamp(::int64_t value);

  public:
  // int32 limit = 3 [json_name = "limit"];
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.RollHistoryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 50,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RollHistoryRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr entity_id_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::int64_t since_timestamp_;
    ::int32_t limit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RollHistoryRequest_class_data_;
// -------------------------------------------------------------------

class RollFormulaRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.RollFormulaRequest) */ {
 public:
  inline RollFormulaRequest() : RollFormulaRequest(nullptr) {}
  ~RollFormulaRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollFormulaRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollFormulaRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollFormulaRequest(::google::protobuf::internal::ConstantInitialized);

  inline RollFormulaRequest(const RollFormulaRequest& from) : RollFormulaRequest(nullptr, from) {}
  inline RollFormulaRequest(RollFormulaRequest&& from) noexcept
      : RollFormulaRequest(nullptr, ::std::move(from)) {}
  inline RollFormulaRequest& operator=(const RollFormulaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollFormulaRequest& operator=(RollFormulaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollFormulaRequest& default_instance() {
    return *reinterpret_cast<const RollFormulaRequest*>(
        &_RollFormulaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RollFormulaRequest& a, RollFormulaRequest& b) { a.Swap(&b); }
  inline void Swap(RollFormulaRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollFormulaRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollFormulaRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollFormulaRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollFormulaRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollFormulaRequest& from) { RollFormulaRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollFormulaRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.RollFormulaRequest"; }

 protected:
  explicit RollFormulaRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RollFormulaRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RollFormulaRequest& from);
  RollFormulaRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RollFormulaRequest&& from) noexcept
      : RollFormulaRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFormulaFieldNumber = 1,
    kContextFieldNumber = 2,
    kEntityIdFieldNumber = 3,
  };
  // string formula = 1 [json_name = "formula"];
  void clear_formula() ;
  const ::std::string& formula() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_formula(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_formula();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_formula();
  void set_allocated_formula(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_formula() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_formula(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_formula();

  public:
  // string context = 2 [json_name = "context"];
  void clear_context() ;
  const ::std::string& context() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_context();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_context();
  void set_allocated_context(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_context() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_context(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_context();

  public:
  // string entity_id = 3 [json_name = "entityId"];
  void clear_entity_id() ;
  const ::std::string& entity_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_entity_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_entity_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_entity_id();
  void set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_entity_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_entity_id();

  public:
  // @@protoc_insertion_point(class_scope:seshat.RollFormulaRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 57,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RollFormulaRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr formula_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::google::protobuf::internal::ArenaStringPtr entity_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RollFormulaRequest_class_data_;
// -------------------------------------------------------------------

class FairnessTestRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.FairnessTestRequest) */ {
 public:
  inline FairnessTestRequest() : FairnessTestRequest(nullptr) {}
  ~FairnessTestRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FairnessTestRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FairnessTestRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FairnessTestRequest(::google::protobuf::internal::ConstantInitialized);

  inline FairnessTestRequest(const FairnessTestRequest& from) : FairnessTestRequest(nullptr, from) {}
  inline FairnessTestRequest(FairnessTestRequest&& from) noexcept
      : FairnessTestRequest(nullptr, ::std::move(from)) {}
  inline FairnessTestRequest& operator=(const FairnessTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FairnessTestRequest& operator=(FairnessTestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FairnessTestRequest& default_instance() {
    return *reinterpret_cast<const FairnessTestRequest*>(
        &_FairnessTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(FairnessTestRequest& a, FairnessTestRequest& b) { a.Swap(&b); }
  inline void Swap(FairnessTestRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FairnessTestRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FairnessTestRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FairnessTestRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FairnessTestRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FairnessTestRequest& from) { FairnessTestRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FairnessTestRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.FairnessTestRequest"; }

 protected:
  explicit FairnessTestRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FairnessTestRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FairnessTestRequest& from);
  FairnessTestRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FairnessTestRequest&& from) noexcept
      : FairnessTestRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSidesFieldNumber = 1,
    kSampleSizeFieldNumber = 2,
  };
  // int32 sides = 1 [json_name = "sides"];
  void clear_sides() ;
  ::int32_t sides() const;
  void set_sides(::int32_t value);

  private:
  ::int32_t _internal_sides() const;
  void _internal_set_sides(::int32_t value);

  public:
  // int32 sample_size = 2 [json_name = "sampleSize"];
  void clear_sample_size() ;
  ::int32_t sample_size() const;
  void set_sample_size(::int32_t value);

  private:
  ::int32_t _internal_sample_size() const;
  void _internal_set_sample_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.FairnessTestRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FairnessTestRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t sides_;
    ::int32_t sample_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull FairnessTestRequest_class_data_;
// -------------------------------------------------------------------

class DiceGroup final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.DiceGroup) */ {
 public:
  inline DiceGroup() : DiceGroup(nullptr) {}
  ~DiceGroup() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DiceGroup* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DiceGroup));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DiceGroup(::google::protobuf::internal::ConstantInitialized);

  inline DiceGroup(const DiceGroup& from) : DiceGroup(nullptr, from) {}
  inline DiceGroup(DiceGroup&& from) noexcept
      : DiceGroup(nullptr, ::std::move(from)) {}
  inline DiceGroup& operator=(const DiceGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiceGroup& operator=(DiceGroup&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiceGroup& default_instance() {
    return *reinterpret_cast<const DiceGroup*>(
        &_DiceGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(DiceGroup& a, DiceGroup& b) { a.Swap(&b); }
  inline void Swap(DiceGroup* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiceGroup* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiceGroup* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DiceGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DiceGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DiceGroup& from) { DiceGroup::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DiceGroup* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.DiceGroup"; }

 protected:
  explicit DiceGroup(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DiceGroup(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DiceGroup& from);
  DiceGroup(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DiceGroup&& from) noexcept
      : DiceGroup(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRollsFieldNumber = 3,
    kOperationFieldNumber = 5,
    kCountFieldNumber = 1,
    kSidesFieldNumber = 2,
    kSubtotalFieldNumber = 4,
  };
  // repeated int32 rolls = 3 [json_name = "rolls"];
  int rolls_size() const;
  private:
  int _internal_rolls_size() const;

  public:
  void clear_rolls() ;
  ::int32_t rolls(int index) const;
  void set_rolls(int index, ::int32_t value);
  void add_rolls(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& rolls() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL mutable_rolls();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_rolls() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL _internal_mutable_rolls();

  public:
  // string operation = 5 [json_name = "operation"];
  void clear_operation() ;
  const ::std::string& operation() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_operation(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_operation();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_operation();
  void set_allocated_operation(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_operation() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_operation(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_operation();

  public:
  // int32 count = 1 [json_name = "count"];
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // int32 sides = 2 [json_name = "sides"];
  void clear_sides() ;
  ::int32_t sides() const;
  void set_sides(::int32_t value);

  private:
  ::int32_t _internal_sides() const;
  void _internal_set_sides(::int32_t value);

  public:
  // int32 subtotal = 4 [json_name = "subtotal"];
  void clear_subtotal() ;
  ::int32_t subtotal() const;
  void set_subtotal(::int32_t value);

  private:
  ::int32_t _internal_subtotal() const;
  void _internal_set_subtotal(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.DiceGroup)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 34,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DiceGroup& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> rolls_;
    ::google::protobuf::internal::CachedSize _rolls_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr operation_;
    ::int32_t count_;
    ::int32_t sides_;
    ::int32_t subtotal_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DiceGroup_class_data_;
// -------------------------------------------------------------------

class RollResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.RollResponse) */ {
 public:
  inline RollResponse() : RollResponse(nullptr) {}
  ~RollResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollResponse(::google::protobuf::internal::ConstantInitialized);

  inline RollResponse(const RollResponse& from) : RollResponse(nullptr, from) {}
  inline RollResponse(RollResponse&& from) noexcept
      : RollResponse(nullptr, ::std::move(from)) {}
  inline RollResponse& operator=(const RollResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollResponse& operator=(RollResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollResponse& default_instance() {
    return *reinterpret_cast<const RollResponse*>(
        &_RollResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RollResponse& a, RollResponse& b) { a.Swap(&b); }
  inline void Swap(RollResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollResponse& from) { RollResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.RollResponse"; }

 protected:
  explicit RollResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RollResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RollResponse& from);
  RollResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RollResponse&& from) noexcept
      : RollResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContextFieldNumber = 2,
    kEntityIdFieldNumber = 3,
    kStatusFieldNumber = 5,
    kTimestampFieldNumber = 4,
    kResultFieldNumber = 1,
  };
  // string context = 2 [json_name = "context"];
  void clear_context() ;
  const ::std::string& context() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_context();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_context();
  void set_allocated_context(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_context() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_context(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_context();

  public:
  // string entity_id = 3 [json_name = "entityId"];
  void clear_entity_id() ;
  const ::std::string& entity_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_entity_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_entity_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_entity_id();
  void set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_entity_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_entity_id();

  public:
  // .seshat.Result status = 5 [json_name = "status"];
  bool has_status() const;
  void clear_status() ;
  const ::seshat::Result& status() const;
  [[nodiscard]] ::seshat::Result* PROTOBUF_NULLABLE release_status();
  ::seshat::Result* PROTOBUF_NONNULL mutable_status();
  void set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value);
  ::seshat::Result* PROTOBUF_NULLABLE unsafe_arena_release_status();

  private:
  const ::seshat::Result& _internal_status() const;
  ::seshat::Result* PROTOBUF_NONNULL _internal_mutable_status();

  public:
  // int64 timestamp = 4 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int32 result = 1 [json_name = "result"];
  void clear_result() ;
  ::int32_t result() const;
  void set_result(::int32_t value);

  private:
  ::int32_t _internal_result() const;
  void _internal_set_result(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.RollResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   1, 44,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RollResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::google::protobuf::internal::ArenaStringPtr entity_id_;
    ::seshat::Result* PROTOBUF_NULLABLE status_;
    ::int64_t timestamp_;
    ::int32_t result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RollResponse_class_data_;
// -------------------------------------------------------------------

class RollMultipleResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.RollMultipleResponse) */ {
 public:
  inline RollMultipleResponse() : RollMultipleResponse(nullptr) {}
  ~RollMultipleResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollMultipleResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollMultipleResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollMultipleResponse(::google::protobuf::internal::ConstantInitialized);

  inline RollMultipleResponse(const RollMultipleResponse& from) : RollMultipleResponse(nullptr, from) {}
  inline RollMultipleResponse(RollMultipleResponse&& from) noexcept
      : RollMultipleResponse(nullptr, ::std::move(from)) {}
  inline RollMultipleResponse& operator=(const RollMultipleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollMultipleResponse& operator=(RollMultipleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollMultipleResponse& default_instance() {
    return *reinterpret_cast<const RollMultipleResponse*>(
        &_RollMultipleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RollMultipleResponse& a, RollMultipleResponse& b) { a.Swap(&b); }
  inline void Swap(RollMultipleResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollMultipleResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollMultipleResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollMultipleResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollMultipleResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollMultipleResponse& from) { RollMultipleResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollMultipleResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.RollMultipleResponse"; }

 protected:
  explicit RollMultipleResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RollMultipleResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RollMultipleResponse& from);
  RollMultipleResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RollMultipleResponse&& from) noexcept
      : RollMultipleResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRollsFieldNumber = 1,
    kKeptRollsFieldNumber = 3,
    kDroppedRollsFieldNumber = 4,
    kContextFieldNumber = 5,
    kEntityIdFieldNumber = 6,
    kStatusFieldNumber = 8,
    kTimestampFieldNumber = 7,
    kTotalFieldNumber = 2,
  };
  // repeated int32 rolls = 1 [json_name = "rolls"];
  int rolls_size() const;
  private:
  int _internal_rolls_size() const;

  public:
  void clear_rolls() ;
  ::int32_t rolls(int index) const;
  void set_rolls(int index, ::int32_t value);
  void add_rolls(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& rolls() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL mutable_rolls();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_rolls() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL _internal_mutable_rolls();

  public:
  // repeated int32 kept_rolls = 3 [json_name = "keptRolls"];
  int kept_rolls_size() const;
  private:
  int _internal_kept_rolls_size() const;

  public:
  void clear_kept_rolls() ;
  ::int32_t kept_rolls(int index) const;
  void set_kept_rolls(int index, ::int32_t value);
  void add_kept_rolls(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& kept_rolls() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL mutable_kept_rolls();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_kept_rolls() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL _internal_mutable_kept_rolls();

  public:
  // repeated int32 dropped_rolls = 4 [json_name = "droppedRolls"];
  int dropped_rolls_size() const;
  private:
  int _internal_dropped_rolls_size() const;

  public:
  void clear_dropped_rolls() ;
  ::int32_t dropped_rolls(int index) const;
  void set_dropped_rolls(int index, ::int32_t value);
  void add_dropped_rolls(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& dropped_rolls() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL mutable_dropped_rolls();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_dropped_rolls() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL _internal_mutable_dropped_rolls();

  public:
  // string context = 5 [json_name = "context"];
  void clear_context() ;
  const ::std::string& context() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_context();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_context();
  void set_allocated_context(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_context() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_context(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_context();

  public:
  // string entity_id = 6 [json_name = "entityId"];
  void clear_entity_id() ;
  const ::std::string& entity_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_entity_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_entity_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_entity_id();
  void set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_entity_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_entity_id();

  public:
  // .seshat.Result status = 8 [json_name = "status"];
  bool has_status() const;
  void clear_status() ;
  const ::seshat::Result& status() const;
  [[nodiscard]] ::seshat::Result* PROTOBUF_NULLABLE release_status();
  ::seshat::Result* PROTOBUF_NONNULL mutable_status();
  void set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value);
  ::seshat::Result* PROTOBUF_NULLABLE unsafe_arena_release_status();

  private:
  const ::seshat::Result& _internal_status() const;
  ::seshat::Result* PROTOBUF_NONNULL _internal_mutable_status();

  public:
  // int64 timestamp = 7 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int32 total = 2 [json_name = "total"];
  void clear_total() ;
  ::int32_t total() const;
  void set_total(::int32_t value);

  private:
  ::int32_t _internal_total() const;
  void _internal_set_total(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.RollMultipleResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8,
                                   1, 60,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RollMultipleResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> rolls_;
    ::google::protobuf::internal::CachedSize _rolls_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> kept_rolls_;
    ::google::protobuf::internal::CachedSize _kept_rolls_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> dropped_rolls_;
    ::google::protobuf::internal::CachedSize _dropped_rolls_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::google::protobuf::internal::ArenaStringPtr entity_id_;
    ::seshat::Result* PROTOBUF_NULLABLE status_;
    ::int64_t timestamp_;
    ::int32_t total_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RollMultipleResponse_class_data_;
// -------------------------------------------------------------------

class RollHistoryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.RollHistoryResponse) */ {
 public:
  inline RollHistoryResponse() : RollHistoryResponse(nullptr) {}
  ~RollHistoryResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollHistoryResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollHistoryResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollHistoryResponse(::google::protobuf::internal::ConstantInitialized);

  inline RollHistoryResponse(const RollHistoryResponse& from) : RollHistoryResponse(nullptr, from) {}
  inline RollHistoryResponse(RollHistoryResponse&& from) noexcept
      : RollHistoryResponse(nullptr, ::std::move(from)) {}
  inline RollHistoryResponse& operator=(const RollHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollHistoryResponse& operator=(RollHistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollHistoryResponse& default_instance() {
    return *reinterpret_cast<const RollHistoryResponse*>(
        &_RollHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(RollHistoryResponse& a, RollHistoryResponse& b) { a.Swap(&b); }
  inline void Swap(RollHistoryResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollHistoryResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollHistoryResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollHistoryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollHistoryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollHistoryResponse& from) { RollHistoryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollHistoryResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.RollHistoryResponse"; }

 protected:
  explicit RollHistoryResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RollHistoryResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RollHistoryResponse& from);
  RollHistoryResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RollHistoryResponse&& from) noexcept
      : RollHistoryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRollsFieldNumber = 1,
    kStatusFieldNumber = 3,
    kTotalCountFieldNumber = 2,
  };
  // repeated .seshat.RollRecord rolls = 1 [json_name = "rolls"];
  int rolls_size() const;
  private:
  int _internal_rolls_size() const;

  public:
  void clear_rolls() ;
  ::seshat::RollRecord* PROTOBUF_NONNULL mutable_rolls(int index);
  ::google::protobuf::RepeatedPtrField<::seshat::RollRecord>* PROTOBUF_NONNULL mutable_rolls();

  private:
  const ::google::protobuf::RepeatedPtrField<::seshat::RollRecord>& _internal_rolls() const;
  ::google::protobuf::RepeatedPtrField<::seshat::RollRecord>* PROTOBUF_NONNULL _internal_mutable_rolls();
  public:
  const ::seshat::RollRecord& rolls(int index) const;
  ::seshat::RollRecord* PROTOBUF_NONNULL add_rolls();
  const ::google::protobuf::RepeatedPtrField<::seshat::RollRecord>& rolls() const;
  // .seshat.Result status = 3 [json_name = "status"];
  bool has_status() const;
  void clear_status() ;
  const ::seshat::Result& status() const;
  [[nodiscard]] ::seshat::Result* PROTOBUF_NULLABLE release_status();
  ::seshat::Result* PROTOBUF_NONNULL mutable_status();
  void set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value);
  ::seshat::Result* PROTOBUF_NULLABLE unsafe_arena_release_status();

  private:
  const ::seshat::Result& _internal_status() const;
  ::seshat::Result* PROTOBUF_NONNULL _internal_mutable_status();

  public:
  // int32 total_count = 2 [json_name = "totalCount"];
  void clear_total_count() ;
  ::int32_t total_count() const;
  void set_total_count(::int32_t value);

  private:
  ::int32_t _internal_total_count() const;
  void _internal_set_total_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.RollHistoryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RollHistoryResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::seshat::RollRecord > rolls_;
    ::seshat::Result* PROTOBUF_NULLABLE status_;
    ::int32_t total_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RollHistoryResponse_class_data_;
// -------------------------------------------------------------------

class RollFormulaResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.RollFormulaResponse) */ {
 public:
  inline RollFormulaResponse() : RollFormulaResponse(nullptr) {}
  ~RollFormulaResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollFormulaResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollFormulaResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollFormulaResponse(::google::protobuf::internal::ConstantInitialized);

  inline RollFormulaResponse(const RollFormulaResponse& from) : RollFormulaResponse(nullptr, from) {}
  inline RollFormulaResponse(RollFormulaResponse&& from) noexcept
      : RollFormulaResponse(nullptr, ::std::move(from)) {}
  inline RollFormulaResponse& operator=(const RollFormulaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollFormulaResponse& operator=(RollFormulaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollFormulaResponse& default_instance() {
    return *reinterpret_cast<const RollFormulaResponse*>(
        &_RollFormulaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(RollFormulaResponse& a, RollFormulaResponse& b) { a.Swap(&b); }
  inline void Swap(RollFormulaResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollFormulaResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollFormulaResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollFormulaResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollFormulaResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollFormulaResponse& from) { RollFormulaResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollFormulaResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.RollFormulaResponse"; }

 protected:
  explicit RollFormulaResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RollFormulaResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RollFormulaResponse& from);
  RollFormulaResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RollFormulaResponse&& from) noexcept
      : RollFormulaResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGroupsFieldNumber = 2,
    kFormulaFieldNumber = 1,
    kContextFieldNumber = 5,
    kEntityIdFieldNumber = 6,
    kStatusFieldNumber = 8,
    kTotalFieldNumber = 3,
    kModifierFieldNumber = 4,
    kTimestampFieldNumber = 7,
  };
  // repeated .seshat.DiceGroup groups = 2 [json_name = "groups"];
  int groups_size() const;
  private:
  int _internal_groups_size() const;

  public:
  void clear_groups() ;
  ::seshat::DiceGroup* PROTOBUF_NONNULL mutable_groups(int index);
  ::google::protobuf::RepeatedPtrField<::seshat::DiceGroup>* PROTOBUF_NONNULL mutable_groups();

  private:
  const ::google::protobuf::RepeatedPtrField<::seshat::DiceGroup>& _internal_groups() const;
  ::google::protobuf::RepeatedPtrField<::seshat::DiceGroup>* PROTOBUF_NONNULL _internal_mutable_groups();
  public:
  const ::seshat::DiceGroup& groups(int index) const;
  ::seshat::DiceGroup* PROTOBUF_NONNULL add_groups();
  const ::google::protobuf::RepeatedPtrField<::seshat::DiceGroup>& groups() const;
  // string formula = 1 [json_name = "formula"];
  void clear_formula() ;
  const ::std::string& formula() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_formula(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_formula();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_formula();
  void set_allocated_formula(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_formula() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_formula(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_formula();

  public:
  // string context = 5 [json_name = "context"];
  void clear_context() ;
  const ::std::string& context() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_context();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_context();
  void set_allocated_context(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_context() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_context(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_context();

  public:
  // string entity_id = 6 [json_name = "entityId"];
  void clear_entity_id() ;
  const ::std::string& entity_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_entity_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_entity_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_entity_id();
  void set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_entity_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_entity_id();

  public:
  // .seshat.Result status = 8 [json_name = "status"];
  bool has_status() const;
  void clear_status() ;
  const ::seshat::Result& status() const;
  [[nodiscard]] ::seshat::Result* PROTOBUF_NULLABLE release_status();
  ::seshat::Result* PROTOBUF_NONNULL mutable_status();
  void set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value);
  ::seshat::Result* PROTOBUF_NULLABLE unsafe_arena_release_status();

  private:
  const ::seshat::Result& _internal_status() const;
  ::seshat::Result* PROTOBUF_NONNULL _internal_mutable_status();

  public:
  // int32 total = 3 [json_name = "total"];
  void clear_total() ;
  ::int32_t total() const;
  void set_total(::int32_t value);

  private:
  ::int32_t _internal_total() const;
  void _internal_set_total(::int32_t value);

  public:
  // int32 modifier = 4 [json_name = "modifier"];
  void clear_modifier() ;
  ::int32_t modifier() const;
  void set_modifier(::int32_t value);

  private:
  ::int32_t _internal_modifier() const;
  void _internal_set_modifier(::int32_t value);

  public:
  // int64 timestamp = 7 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.RollFormulaResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8,
                                   2, 66,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RollFormulaResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::seshat::DiceGroup > groups_;
    ::google::protobuf::internal::ArenaStringPtr formula_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::google::protobuf::internal::ArenaStringPtr entity_id_;
    ::seshat::Result* PROTOBUF_NULLABLE status_;
    ::int32_t total_;
    ::int32_t modifier_;
    ::int64_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RollFormulaResponse_class_data_;
// -------------------------------------------------------------------

class FairnessTestResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seshat.FairnessTestResponse) */ {
 public:
  inline FairnessTestResponse() : FairnessTestResponse(nullptr) {}
  ~FairnessTestResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FairnessTestResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FairnessTestResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FairnessTestResponse(::google::protobuf::internal::ConstantInitialized);

  inline FairnessTestResponse(const FairnessTestResponse& from) : FairnessTestResponse(nullptr, from) {}
  inline FairnessTestResponse(FairnessTestResponse&& from) noexcept
      : FairnessTestResponse(nullptr, ::std::move(from)) {}
  inline FairnessTestResponse& operator=(const FairnessTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FairnessTestResponse& operator=(FairnessTestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FairnessTestResponse& default_instance() {
    return *reinterpret_cast<const FairnessTestResponse*>(
        &_FairnessTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(FairnessTestResponse& a, FairnessTestResponse& b) { a.Swap(&b); }
  inline void Swap(FairnessTestResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FairnessTestResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FairnessTestResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FairnessTestResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FairnessTestResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FairnessTestResponse& from) { FairnessTestResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FairnessTestResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seshat.FairnessTestResponse"; }

 protected:
  explicit FairnessTestResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FairnessTestResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FairnessTestResponse& from);
  FairnessTestResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FairnessTestResponse&& from) noexcept
      : FairnessTestResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDistributionFieldNumber = 1,
    kStatusFieldNumber = 6,
    kChiSquaredFieldNumber = 2,
    kPValueFieldNumber = 3,
    kIsFairFieldNumber = 4,
    kSampleSizeFieldNumber = 5,
  };
  // repeated int32 distribution = 1 [json_name = "distribution"];
  int distribution_size() const;
  private:
  int _internal_distribution_size() const;

  public:
  void clear_distribution() ;
  ::int32_t distribution(int index) const;
  void set_distribution(int index, ::int32_t value);
  void add_distribution(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& distribution() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL mutable_distribution();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_distribution() const;
  ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL _internal_mutable_distribution();

  public:
  // .seshat.Result status = 6 [json_name = "status"];
  bool has_status() const;
  void clear_status() ;
  const ::seshat::Result& status() const;
  [[nodiscard]] ::seshat::Result* PROTOBUF_NULLABLE release_status();
  ::seshat::Result* PROTOBUF_NONNULL mutable_status();
  void set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value);
  ::seshat::Result* PROTOBUF_NULLABLE unsafe_arena_release_status();

  private:
  const ::seshat::Result& _internal_status() const;
  ::seshat::Result* PROTOBUF_NONNULL _internal_mutable_status();

  public:
  // double chi_squared = 2 [json_name = "chiSquared"];
  void clear_chi_squared() ;
  double chi_squared() const;
  void set_chi_squared(double value);

  private:
  double _internal_chi_squared() const;
  void _internal_set_chi_squared(double value);

  public:
  // double p_value = 3 [json_name = "pValue"];
  void clear_p_value() ;
  double p_value() const;
  void set_p_value(double value);

  private:
  double _internal_p_value() const;
  void _internal_set_p_value(double value);

  public:
  // bool is_fair = 4 [json_name = "isFair"];
  void clear_is_fair() ;
  bool is_fair() const;
  void set_is_fair(bool value);

  private:
  bool _internal_is_fair() const;
  void _internal_set_is_fair(bool value);

  public:
  // int32 sample_size = 5 [json_name = "sampleSize"];
  void clear_sample_size() ;
  ::int32_t sample_size() const;
  void set_sample_size(::int32_t value);

  private:
  ::int32_t _internal_sample_size() const;
  void _internal_set_sample_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seshat.FairnessTestResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FairnessTestResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> distribution_;
    ::google::protobuf::internal::CachedSize _distribution_cached_byte_size_;
    ::seshat::Result* PROTOBUF_NULLABLE status_;
    double chi_squared_;
    double p_value_;
    bool is_fair_;
    ::int32_t sample_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seshat_2fdice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull FairnessTestResponse_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RollRequest

// int32 sides = 1 [json_name = "sides"];
inline void RollRequest::clear_sides() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sides_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t RollRequest::sides() const {
  // @@protoc_insertion_point(field_get:seshat.RollRequest.sides)
  return _internal_sides();
}
inline void RollRequest::set_sides(::int32_t value) {
  _internal_set_sides(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:seshat.RollRequest.sides)
}
inline ::int32_t RollRequest::_internal_sides() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sides_;
}
inline void RollRequest::_internal_set_sides(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sides_ = value;
}

// string context = 2 [json_name = "context"];
inline void RollRequest::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RollRequest::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollRequest.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollRequest::set_context(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollRequest.context)
}
inline ::std::string* PROTOBUF_NONNULL RollRequest::mutable_context()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:seshat.RollRequest.context)
  return _s;
}
inline const ::std::string& RollRequest::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void RollRequest::_internal_set_context(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.context_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollRequest::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.context_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollRequest::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollRequest.context)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.context_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.context_.Set("", GetArena());
  }
  return released;
}
inline void RollRequest::set_allocated_context(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollRequest.context)
}

// string entity_id = 3 [json_name = "entityId"];
inline void RollRequest::clear_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RollRequest::entity_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollRequest.entity_id)
  return _internal_entity_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollRequest::set_entity_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollRequest.entity_id)
}
inline ::std::string* PROTOBUF_NONNULL RollRequest::mutable_entity_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:seshat.RollRequest.entity_id)
  return _s;
}
inline const ::std::string& RollRequest::_internal_entity_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_id_.Get();
}
inline void RollRequest::_internal_set_entity_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollRequest::_internal_mutable_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.entity_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollRequest::release_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollRequest.entity_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.entity_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  return released;
}
inline void RollRequest::set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.entity_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollRequest.entity_id)
}

// -------------------------------------------------------------------

// RollResponse

// int32 result = 1 [json_name = "result"];
inline void RollResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t RollResponse::result() const {
  // @@protoc_insertion_point(field_get:seshat.RollResponse.result)
  return _internal_result();
}
inline void RollResponse::set_result(::int32_t value) {
  _internal_set_result(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:seshat.RollResponse.result)
}
inline ::int32_t RollResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_;
}
inline void RollResponse::_internal_set_result(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string context = 2 [json_name = "context"];
inline void RollResponse::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RollResponse::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollResponse.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollResponse::set_context(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollResponse.context)
}
inline ::std::string* PROTOBUF_NONNULL RollResponse::mutable_context()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:seshat.RollResponse.context)
  return _s;
}
inline const ::std::string& RollResponse::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void RollResponse::_internal_set_context(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.context_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollResponse::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.context_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollResponse::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollResponse.context)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.context_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.context_.Set("", GetArena());
  }
  return released;
}
inline void RollResponse::set_allocated_context(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollResponse.context)
}

// string entity_id = 3 [json_name = "entityId"];
inline void RollResponse::clear_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RollResponse::entity_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollResponse.entity_id)
  return _internal_entity_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollResponse::set_entity_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollResponse.entity_id)
}
inline ::std::string* PROTOBUF_NONNULL RollResponse::mutable_entity_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:seshat.RollResponse.entity_id)
  return _s;
}
inline const ::std::string& RollResponse::_internal_entity_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_id_.Get();
}
inline void RollResponse::_internal_set_entity_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollResponse::_internal_mutable_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.entity_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollResponse::release_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollResponse.entity_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.entity_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  return released;
}
inline void RollResponse::set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.entity_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollResponse.entity_id)
}

// int64 timestamp = 4 [json_name = "timestamp"];
inline void RollResponse::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t RollResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:seshat.RollResponse.timestamp)
  return _internal_timestamp();
}
inline void RollResponse::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:seshat.RollResponse.timestamp)
}
inline ::int64_t RollResponse::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void RollResponse::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// .seshat.Result status = 5 [json_name = "status"];
inline bool RollResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::seshat::Result& RollResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seshat::Result* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::seshat::Result&>(::seshat::_Result_default_instance_);
}
inline const ::seshat::Result& RollResponse::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollResponse.status)
  return _internal_status();
}
inline void RollResponse::unsafe_arena_set_allocated_status(
    ::seshat::Result* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::seshat::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seshat.RollResponse.status)
}
inline ::seshat::Result* PROTOBUF_NULLABLE RollResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::seshat::Result* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seshat::Result* PROTOBUF_NULLABLE RollResponse::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollResponse.status)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::seshat::Result* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::seshat::Result* PROTOBUF_NONNULL RollResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seshat::Result>(GetArena());
    _impl_.status_ = reinterpret_cast<::seshat::Result*>(p);
  }
  return _impl_.status_;
}
inline ::seshat::Result* PROTOBUF_NONNULL RollResponse::mutable_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::seshat::Result* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seshat.RollResponse.status)
  return _msg;
}
inline void RollResponse::set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.status_ = reinterpret_cast<::seshat::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:seshat.RollResponse.status)
}

// -------------------------------------------------------------------

// RollMultipleRequest

// int32 count = 1 [json_name = "count"];
inline void RollMultipleRequest::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t RollMultipleRequest::count() const {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleRequest.count)
  return _internal_count();
}
inline void RollMultipleRequest::set_count(::int32_t value) {
  _internal_set_count(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:seshat.RollMultipleRequest.count)
}
inline ::int32_t RollMultipleRequest::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void RollMultipleRequest::_internal_set_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// int32 sides = 2 [json_name = "sides"];
inline void RollMultipleRequest::clear_sides() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sides_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t RollMultipleRequest::sides() const {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleRequest.sides)
  return _internal_sides();
}
inline void RollMultipleRequest::set_sides(::int32_t value) {
  _internal_set_sides(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:seshat.RollMultipleRequest.sides)
}
inline ::int32_t RollMultipleRequest::_internal_sides() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sides_;
}
inline void RollMultipleRequest::_internal_set_sides(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sides_ = value;
}

// string context = 3 [json_name = "context"];
inline void RollMultipleRequest::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RollMultipleRequest::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleRequest.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollMultipleRequest::set_context(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollMultipleRequest.context)
}
inline ::std::string* PROTOBUF_NONNULL RollMultipleRequest::mutable_context()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:seshat.RollMultipleRequest.context)
  return _s;
}
inline const ::std::string& RollMultipleRequest::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void RollMultipleRequest::_internal_set_context(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.context_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollMultipleRequest::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.context_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollMultipleRequest::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollMultipleRequest.context)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.context_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.context_.Set("", GetArena());
  }
  return released;
}
inline void RollMultipleRequest::set_allocated_context(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollMultipleRequest.context)
}

// string entity_id = 4 [json_name = "entityId"];
inline void RollMultipleRequest::clear_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RollMultipleRequest::entity_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleRequest.entity_id)
  return _internal_entity_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollMultipleRequest::set_entity_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollMultipleRequest.entity_id)
}
inline ::std::string* PROTOBUF_NONNULL RollMultipleRequest::mutable_entity_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:seshat.RollMultipleRequest.entity_id)
  return _s;
}
inline const ::std::string& RollMultipleRequest::_internal_entity_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_id_.Get();
}
inline void RollMultipleRequest::_internal_set_entity_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollMultipleRequest::_internal_mutable_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.entity_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollMultipleRequest::release_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollMultipleRequest.entity_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.entity_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  return released;
}
inline void RollMultipleRequest::set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.entity_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollMultipleRequest.entity_id)
}

// bool drop_lowest = 5 [json_name = "dropLowest"];
inline void RollMultipleRequest::clear_drop_lowest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drop_lowest_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool RollMultipleRequest::drop_lowest() const {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleRequest.drop_lowest)
  return _internal_drop_lowest();
}
inline void RollMultipleRequest::set_drop_lowest(bool value) {
  _internal_set_drop_lowest(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:seshat.RollMultipleRequest.drop_lowest)
}
inline bool RollMultipleRequest::_internal_drop_lowest() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.drop_lowest_;
}
inline void RollMultipleRequest::_internal_set_drop_lowest(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drop_lowest_ = value;
}

// bool drop_highest = 6 [json_name = "dropHighest"];
inline void RollMultipleRequest::clear_drop_highest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drop_highest_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool RollMultipleRequest::drop_highest() const {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleRequest.drop_highest)
  return _internal_drop_highest();
}
inline void RollMultipleRequest::set_drop_highest(bool value) {
  _internal_set_drop_highest(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:seshat.RollMultipleRequest.drop_highest)
}
inline bool RollMultipleRequest::_internal_drop_highest() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.drop_highest_;
}
inline void RollMultipleRequest::_internal_set_drop_highest(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drop_highest_ = value;
}

// int32 keep_count = 7 [json_name = "keepCount"];
inline void RollMultipleRequest::clear_keep_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keep_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t RollMultipleRequest::keep_count() const {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleRequest.keep_count)
  return _internal_keep_count();
}
inline void RollMultipleRequest::set_keep_count(::int32_t value) {
  _internal_set_keep_count(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:seshat.RollMultipleRequest.keep_count)
}
inline ::int32_t RollMultipleRequest::_internal_keep_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keep_count_;
}
inline void RollMultipleRequest::_internal_set_keep_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keep_count_ = value;
}

// -------------------------------------------------------------------

// RollMultipleResponse

// repeated int32 rolls = 1 [json_name = "rolls"];
inline int RollMultipleResponse::_internal_rolls_size() const {
  return _internal_rolls().size();
}
inline int RollMultipleResponse::rolls_size() const {
  return _internal_rolls_size();
}
inline void RollMultipleResponse::clear_rolls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rolls_.Clear();
}
inline ::int32_t RollMultipleResponse::rolls(int index) const {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleResponse.rolls)
  return _internal_rolls().Get(index);
}
inline void RollMultipleResponse::set_rolls(int index, ::int32_t value) {
  _internal_mutable_rolls()->Set(index, value);
  // @@protoc_insertion_point(field_set:seshat.RollMultipleResponse.rolls)
}
inline void RollMultipleResponse::add_rolls(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rolls()->Add(value);
  // @@protoc_insertion_point(field_add:seshat.RollMultipleResponse.rolls)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RollMultipleResponse::rolls() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seshat.RollMultipleResponse.rolls)
  return _internal_rolls();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL RollMultipleResponse::mutable_rolls()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seshat.RollMultipleResponse.rolls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rolls();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
RollMultipleResponse::_internal_rolls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rolls_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL
RollMultipleResponse::_internal_mutable_rolls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rolls_;
}

// int32 total = 2 [json_name = "total"];
inline void RollMultipleResponse::clear_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t RollMultipleResponse::total() const {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleResponse.total)
  return _internal_total();
}
inline void RollMultipleResponse::set_total(::int32_t value) {
  _internal_set_total(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:seshat.RollMultipleResponse.total)
}
inline ::int32_t RollMultipleResponse::_internal_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_;
}
inline void RollMultipleResponse::_internal_set_total(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = value;
}

// repeated int32 kept_rolls = 3 [json_name = "keptRolls"];
inline int RollMultipleResponse::_internal_kept_rolls_size() const {
  return _internal_kept_rolls().size();
}
inline int RollMultipleResponse::kept_rolls_size() const {
  return _internal_kept_rolls_size();
}
inline void RollMultipleResponse::clear_kept_rolls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kept_rolls_.Clear();
}
inline ::int32_t RollMultipleResponse::kept_rolls(int index) const {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleResponse.kept_rolls)
  return _internal_kept_rolls().Get(index);
}
inline void RollMultipleResponse::set_kept_rolls(int index, ::int32_t value) {
  _internal_mutable_kept_rolls()->Set(index, value);
  // @@protoc_insertion_point(field_set:seshat.RollMultipleResponse.kept_rolls)
}
inline void RollMultipleResponse::add_kept_rolls(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_kept_rolls()->Add(value);
  // @@protoc_insertion_point(field_add:seshat.RollMultipleResponse.kept_rolls)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RollMultipleResponse::kept_rolls() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seshat.RollMultipleResponse.kept_rolls)
  return _internal_kept_rolls();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL RollMultipleResponse::mutable_kept_rolls()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seshat.RollMultipleResponse.kept_rolls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_kept_rolls();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
RollMultipleResponse::_internal_kept_rolls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kept_rolls_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL
RollMultipleResponse::_internal_mutable_kept_rolls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.kept_rolls_;
}

// repeated int32 dropped_rolls = 4 [json_name = "droppedRolls"];
inline int RollMultipleResponse::_internal_dropped_rolls_size() const {
  return _internal_dropped_rolls().size();
}
inline int RollMultipleResponse::dropped_rolls_size() const {
  return _internal_dropped_rolls_size();
}
inline void RollMultipleResponse::clear_dropped_rolls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dropped_rolls_.Clear();
}
inline ::int32_t RollMultipleResponse::dropped_rolls(int index) const {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleResponse.dropped_rolls)
  return _internal_dropped_rolls().Get(index);
}
inline void RollMultipleResponse::set_dropped_rolls(int index, ::int32_t value) {
  _internal_mutable_dropped_rolls()->Set(index, value);
  // @@protoc_insertion_point(field_set:seshat.RollMultipleResponse.dropped_rolls)
}
inline void RollMultipleResponse::add_dropped_rolls(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_dropped_rolls()->Add(value);
  // @@protoc_insertion_point(field_add:seshat.RollMultipleResponse.dropped_rolls)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RollMultipleResponse::dropped_rolls() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seshat.RollMultipleResponse.dropped_rolls)
  return _internal_dropped_rolls();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL RollMultipleResponse::mutable_dropped_rolls()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seshat.RollMultipleResponse.dropped_rolls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_dropped_rolls();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
RollMultipleResponse::_internal_dropped_rolls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dropped_rolls_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL
RollMultipleResponse::_internal_mutable_dropped_rolls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.dropped_rolls_;
}

// string context = 5 [json_name = "context"];
inline void RollMultipleResponse::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RollMultipleResponse::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleResponse.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollMultipleResponse::set_context(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollMultipleResponse.context)
}
inline ::std::string* PROTOBUF_NONNULL RollMultipleResponse::mutable_context()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:seshat.RollMultipleResponse.context)
  return _s;
}
inline const ::std::string& RollMultipleResponse::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void RollMultipleResponse::_internal_set_context(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.context_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollMultipleResponse::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.context_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollMultipleResponse::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollMultipleResponse.context)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.context_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.context_.Set("", GetArena());
  }
  return released;
}
inline void RollMultipleResponse::set_allocated_context(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollMultipleResponse.context)
}

// string entity_id = 6 [json_name = "entityId"];
inline void RollMultipleResponse::clear_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RollMultipleResponse::entity_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleResponse.entity_id)
  return _internal_entity_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollMultipleResponse::set_entity_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollMultipleResponse.entity_id)
}
inline ::std::string* PROTOBUF_NONNULL RollMultipleResponse::mutable_entity_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:seshat.RollMultipleResponse.entity_id)
  return _s;
}
inline const ::std::string& RollMultipleResponse::_internal_entity_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_id_.Get();
}
inline void RollMultipleResponse::_internal_set_entity_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollMultipleResponse::_internal_mutable_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.entity_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollMultipleResponse::release_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollMultipleResponse.entity_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.entity_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  return released;
}
inline void RollMultipleResponse::set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.entity_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollMultipleResponse.entity_id)
}

// int64 timestamp = 7 [json_name = "timestamp"];
inline void RollMultipleResponse::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t RollMultipleResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleResponse.timestamp)
  return _internal_timestamp();
}
inline void RollMultipleResponse::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:seshat.RollMultipleResponse.timestamp)
}
inline ::int64_t RollMultipleResponse::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void RollMultipleResponse::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// .seshat.Result status = 8 [json_name = "status"];
inline bool RollMultipleResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::seshat::Result& RollMultipleResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seshat::Result* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::seshat::Result&>(::seshat::_Result_default_instance_);
}
inline const ::seshat::Result& RollMultipleResponse::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollMultipleResponse.status)
  return _internal_status();
}
inline void RollMultipleResponse::unsafe_arena_set_allocated_status(
    ::seshat::Result* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::seshat::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seshat.RollMultipleResponse.status)
}
inline ::seshat::Result* PROTOBUF_NULLABLE RollMultipleResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::seshat::Result* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seshat::Result* PROTOBUF_NULLABLE RollMultipleResponse::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollMultipleResponse.status)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::seshat::Result* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::seshat::Result* PROTOBUF_NONNULL RollMultipleResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seshat::Result>(GetArena());
    _impl_.status_ = reinterpret_cast<::seshat::Result*>(p);
  }
  return _impl_.status_;
}
inline ::seshat::Result* PROTOBUF_NONNULL RollMultipleResponse::mutable_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::seshat::Result* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seshat.RollMultipleResponse.status)
  return _msg;
}
inline void RollMultipleResponse::set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.status_ = reinterpret_cast<::seshat::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:seshat.RollMultipleResponse.status)
}

// -------------------------------------------------------------------

// RollFormulaRequest

// string formula = 1 [json_name = "formula"];
inline void RollFormulaRequest::clear_formula() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.formula_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RollFormulaRequest::formula() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaRequest.formula)
  return _internal_formula();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollFormulaRequest::set_formula(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.formula_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollFormulaRequest.formula)
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaRequest::mutable_formula()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_formula();
  // @@protoc_insertion_point(field_mutable:seshat.RollFormulaRequest.formula)
  return _s;
}
inline const ::std::string& RollFormulaRequest::_internal_formula() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.formula_.Get();
}
inline void RollFormulaRequest::_internal_set_formula(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.formula_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaRequest::_internal_mutable_formula() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.formula_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollFormulaRequest::release_formula() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollFormulaRequest.formula)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.formula_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.formula_.Set("", GetArena());
  }
  return released;
}
inline void RollFormulaRequest::set_allocated_formula(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.formula_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.formula_.IsDefault()) {
    _impl_.formula_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollFormulaRequest.formula)
}

// string context = 2 [json_name = "context"];
inline void RollFormulaRequest::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RollFormulaRequest::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaRequest.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollFormulaRequest::set_context(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollFormulaRequest.context)
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaRequest::mutable_context()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:seshat.RollFormulaRequest.context)
  return _s;
}
inline const ::std::string& RollFormulaRequest::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void RollFormulaRequest::_internal_set_context(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.context_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaRequest::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.context_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollFormulaRequest::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollFormulaRequest.context)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.context_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.context_.Set("", GetArena());
  }
  return released;
}
inline void RollFormulaRequest::set_allocated_context(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollFormulaRequest.context)
}

// string entity_id = 3 [json_name = "entityId"];
inline void RollFormulaRequest::clear_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& RollFormulaRequest::entity_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaRequest.entity_id)
  return _internal_entity_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollFormulaRequest::set_entity_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.entity_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollFormulaRequest.entity_id)
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaRequest::mutable_entity_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:seshat.RollFormulaRequest.entity_id)
  return _s;
}
inline const ::std::string& RollFormulaRequest::_internal_entity_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_id_.Get();
}
inline void RollFormulaRequest::_internal_set_entity_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.entity_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaRequest::_internal_mutable_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.entity_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollFormulaRequest::release_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollFormulaRequest.entity_id)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.entity_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  return released;
}
inline void RollFormulaRequest::set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.entity_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollFormulaRequest.entity_id)
}

// -------------------------------------------------------------------

// RollFormulaResponse

// string formula = 1 [json_name = "formula"];
inline void RollFormulaResponse::clear_formula() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.formula_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RollFormulaResponse::formula() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaResponse.formula)
  return _internal_formula();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollFormulaResponse::set_formula(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.formula_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollFormulaResponse.formula)
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaResponse::mutable_formula()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_formula();
  // @@protoc_insertion_point(field_mutable:seshat.RollFormulaResponse.formula)
  return _s;
}
inline const ::std::string& RollFormulaResponse::_internal_formula() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.formula_.Get();
}
inline void RollFormulaResponse::_internal_set_formula(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.formula_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaResponse::_internal_mutable_formula() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.formula_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollFormulaResponse::release_formula() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollFormulaResponse.formula)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.formula_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.formula_.Set("", GetArena());
  }
  return released;
}
inline void RollFormulaResponse::set_allocated_formula(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.formula_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.formula_.IsDefault()) {
    _impl_.formula_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollFormulaResponse.formula)
}

// repeated .seshat.DiceGroup groups = 2 [json_name = "groups"];
inline int RollFormulaResponse::_internal_groups_size() const {
  return _internal_groups().size();
}
inline int RollFormulaResponse::groups_size() const {
  return _internal_groups_size();
}
inline void RollFormulaResponse::clear_groups() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.groups_.Clear();
}
inline ::seshat::DiceGroup* PROTOBUF_NONNULL RollFormulaResponse::mutable_groups(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seshat.RollFormulaResponse.groups)
  return _internal_mutable_groups()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seshat::DiceGroup>* PROTOBUF_NONNULL RollFormulaResponse::mutable_groups()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seshat.RollFormulaResponse.groups)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_groups();
}
inline const ::seshat::DiceGroup& RollFormulaResponse::groups(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaResponse.groups)
  return _internal_groups().Get(index);
}
inline ::seshat::DiceGroup* PROTOBUF_NONNULL RollFormulaResponse::add_groups()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seshat::DiceGroup* _add = _internal_mutable_groups()->Add();
  // @@protoc_insertion_point(field_add:seshat.RollFormulaResponse.groups)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seshat::DiceGroup>& RollFormulaResponse::groups() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seshat.RollFormulaResponse.groups)
  return _internal_groups();
}
inline const ::google::protobuf::RepeatedPtrField<::seshat::DiceGroup>&
RollFormulaResponse::_internal_groups() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.groups_;
}
inline ::google::protobuf::RepeatedPtrField<::seshat::DiceGroup>* PROTOBUF_NONNULL
RollFormulaResponse::_internal_mutable_groups() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.groups_;
}

// int32 total = 3 [json_name = "total"];
inline void RollFormulaResponse::clear_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t RollFormulaResponse::total() const {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaResponse.total)
  return _internal_total();
}
inline void RollFormulaResponse::set_total(::int32_t value) {
  _internal_set_total(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:seshat.RollFormulaResponse.total)
}
inline ::int32_t RollFormulaResponse::_internal_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_;
}
inline void RollFormulaResponse::_internal_set_total(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = value;
}

// int32 modifier = 4 [json_name = "modifier"];
inline void RollFormulaResponse::clear_modifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modifier_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t RollFormulaResponse::modifier() const {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaResponse.modifier)
  return _internal_modifier();
}
inline void RollFormulaResponse::set_modifier(::int32_t value) {
  _internal_set_modifier(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:seshat.RollFormulaResponse.modifier)
}
inline ::int32_t RollFormulaResponse::_internal_modifier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.modifier_;
}
inline void RollFormulaResponse::_internal_set_modifier(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modifier_ = value;
}

// string context = 5 [json_name = "context"];
inline void RollFormulaResponse::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RollFormulaResponse::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaResponse.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollFormulaResponse::set_context(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollFormulaResponse.context)
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaResponse::mutable_context()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:seshat.RollFormulaResponse.context)
  return _s;
}
inline const ::std::string& RollFormulaResponse::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void RollFormulaResponse::_internal_set_context(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.context_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaResponse::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.context_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollFormulaResponse::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollFormulaResponse.context)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.context_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.context_.Set("", GetArena());
  }
  return released;
}
inline void RollFormulaResponse::set_allocated_context(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollFormulaResponse.context)
}

// string entity_id = 6 [json_name = "entityId"];
inline void RollFormulaResponse::clear_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& RollFormulaResponse::entity_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaResponse.entity_id)
  return _internal_entity_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollFormulaResponse::set_entity_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.entity_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollFormulaResponse.entity_id)
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaResponse::mutable_entity_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:seshat.RollFormulaResponse.entity_id)
  return _s;
}
inline const ::std::string& RollFormulaResponse::_internal_entity_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_id_.Get();
}
inline void RollFormulaResponse::_internal_set_entity_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.entity_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollFormulaResponse::_internal_mutable_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.entity_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollFormulaResponse::release_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollFormulaResponse.entity_id)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.entity_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  return released;
}
inline void RollFormulaResponse::set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.entity_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollFormulaResponse.entity_id)
}

// int64 timestamp = 7 [json_name = "timestamp"];
inline void RollFormulaResponse::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t RollFormulaResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaResponse.timestamp)
  return _internal_timestamp();
}
inline void RollFormulaResponse::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:seshat.RollFormulaResponse.timestamp)
}
inline ::int64_t RollFormulaResponse::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void RollFormulaResponse::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// .seshat.Result status = 8 [json_name = "status"];
inline bool RollFormulaResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::seshat::Result& RollFormulaResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seshat::Result* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::seshat::Result&>(::seshat::_Result_default_instance_);
}
inline const ::seshat::Result& RollFormulaResponse::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollFormulaResponse.status)
  return _internal_status();
}
inline void RollFormulaResponse::unsafe_arena_set_allocated_status(
    ::seshat::Result* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::seshat::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seshat.RollFormulaResponse.status)
}
inline ::seshat::Result* PROTOBUF_NULLABLE RollFormulaResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::seshat::Result* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seshat::Result* PROTOBUF_NULLABLE RollFormulaResponse::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollFormulaResponse.status)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::seshat::Result* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::seshat::Result* PROTOBUF_NONNULL RollFormulaResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seshat::Result>(GetArena());
    _impl_.status_ = reinterpret_cast<::seshat::Result*>(p);
  }
  return _impl_.status_;
}
inline ::seshat::Result* PROTOBUF_NONNULL RollFormulaResponse::mutable_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::seshat::Result* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seshat.RollFormulaResponse.status)
  return _msg;
}
inline void RollFormulaResponse::set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.status_ = reinterpret_cast<::seshat::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:seshat.RollFormulaResponse.status)
}

// -------------------------------------------------------------------

// DiceGroup

// int32 count = 1 [json_name = "count"];
inline void DiceGroup::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t DiceGroup::count() const {
  // @@protoc_insertion_point(field_get:seshat.DiceGroup.count)
  return _internal_count();
}
inline void DiceGroup::set_count(::int32_t value) {
  _internal_set_count(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:seshat.DiceGroup.count)
}
inline ::int32_t DiceGroup::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void DiceGroup::_internal_set_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// int32 sides = 2 [json_name = "sides"];
inline void DiceGroup::clear_sides() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sides_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t DiceGroup::sides() const {
  // @@protoc_insertion_point(field_get:seshat.DiceGroup.sides)
  return _internal_sides();
}
inline void DiceGroup::set_sides(::int32_t value) {
  _internal_set_sides(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:seshat.DiceGroup.sides)
}
inline ::int32_t DiceGroup::_internal_sides() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sides_;
}
inline void DiceGroup::_internal_set_sides(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sides_ = value;
}

// repeated int32 rolls = 3 [json_name = "rolls"];
inline int DiceGroup::_internal_rolls_size() const {
  return _internal_rolls().size();
}
inline int DiceGroup::rolls_size() const {
  return _internal_rolls_size();
}
inline void DiceGroup::clear_rolls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rolls_.Clear();
}
inline ::int32_t DiceGroup::rolls(int index) const {
  // @@protoc_insertion_point(field_get:seshat.DiceGroup.rolls)
  return _internal_rolls().Get(index);
}
inline void DiceGroup::set_rolls(int index, ::int32_t value) {
  _internal_mutable_rolls()->Set(index, value);
  // @@protoc_insertion_point(field_set:seshat.DiceGroup.rolls)
}
inline void DiceGroup::add_rolls(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rolls()->Add(value);
  // @@protoc_insertion_point(field_add:seshat.DiceGroup.rolls)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& DiceGroup::rolls() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seshat.DiceGroup.rolls)
  return _internal_rolls();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL DiceGroup::mutable_rolls()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seshat.DiceGroup.rolls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rolls();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
DiceGroup::_internal_rolls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rolls_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL
DiceGroup::_internal_mutable_rolls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rolls_;
}

// int32 subtotal = 4 [json_name = "subtotal"];
inline void DiceGroup::clear_subtotal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subtotal_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t DiceGroup::subtotal() const {
  // @@protoc_insertion_point(field_get:seshat.DiceGroup.subtotal)
  return _internal_subtotal();
}
inline void DiceGroup::set_subtotal(::int32_t value) {
  _internal_set_subtotal(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:seshat.DiceGroup.subtotal)
}
inline ::int32_t DiceGroup::_internal_subtotal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subtotal_;
}
inline void DiceGroup::_internal_set_subtotal(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subtotal_ = value;
}

// string operation = 5 [json_name = "operation"];
inline void DiceGroup::clear_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& DiceGroup::operation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.DiceGroup.operation)
  return _internal_operation();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DiceGroup::set_operation(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.operation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.DiceGroup.operation)
}
inline ::std::string* PROTOBUF_NONNULL DiceGroup::mutable_operation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:seshat.DiceGroup.operation)
  return _s;
}
inline const ::std::string& DiceGroup::_internal_operation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_.Get();
}
inline void DiceGroup::_internal_set_operation(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.operation_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL DiceGroup::_internal_mutable_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.operation_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE DiceGroup::release_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.DiceGroup.operation)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.operation_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.operation_.Set("", GetArena());
  }
  return released;
}
inline void DiceGroup::set_allocated_operation(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.operation_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.operation_.IsDefault()) {
    _impl_.operation_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.DiceGroup.operation)
}

// -------------------------------------------------------------------

// RollHistoryRequest

// string entity_id = 1 [json_name = "entityId"];
inline void RollHistoryRequest::clear_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RollHistoryRequest::entity_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollHistoryRequest.entity_id)
  return _internal_entity_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollHistoryRequest::set_entity_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.entity_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollHistoryRequest.entity_id)
}
inline ::std::string* PROTOBUF_NONNULL RollHistoryRequest::mutable_entity_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:seshat.RollHistoryRequest.entity_id)
  return _s;
}
inline const ::std::string& RollHistoryRequest::_internal_entity_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_id_.Get();
}
inline void RollHistoryRequest::_internal_set_entity_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.entity_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollHistoryRequest::_internal_mutable_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.entity_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollHistoryRequest::release_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollHistoryRequest.entity_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.entity_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  return released;
}
inline void RollHistoryRequest::set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.entity_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollHistoryRequest.entity_id)
}

// string context = 2 [json_name = "context"];
inline void RollHistoryRequest::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RollHistoryRequest::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollHistoryRequest.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollHistoryRequest::set_context(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollHistoryRequest.context)
}
inline ::std::string* PROTOBUF_NONNULL RollHistoryRequest::mutable_context()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:seshat.RollHistoryRequest.context)
  return _s;
}
inline const ::std::string& RollHistoryRequest::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void RollHistoryRequest::_internal_set_context(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.context_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollHistoryRequest::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.context_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollHistoryRequest::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollHistoryRequest.context)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.context_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.context_.Set("", GetArena());
  }
  return released;
}
inline void RollHistoryRequest::set_allocated_context(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollHistoryRequest.context)
}

// int32 limit = 3 [json_name = "limit"];
inline void RollHistoryRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t RollHistoryRequest::limit() const {
  // @@protoc_insertion_point(field_get:seshat.RollHistoryRequest.limit)
  return _internal_limit();
}
inline void RollHistoryRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:seshat.RollHistoryRequest.limit)
}
inline ::int32_t RollHistoryRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void RollHistoryRequest::_internal_set_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// int64 since_timestamp = 4 [json_name = "sinceTimestamp"];
inline void RollHistoryRequest::clear_since_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.since_timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t RollHistoryRequest::since_timestamp() const {
  // @@protoc_insertion_point(field_get:seshat.RollHistoryRequest.since_timestamp)
  return _internal_since_timestamp();
}
inline void RollHistoryRequest::set_since_timestamp(::int64_t value) {
  _internal_set_since_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:seshat.RollHistoryRequest.since_timestamp)
}
inline ::int64_t RollHistoryRequest::_internal_since_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.since_timestamp_;
}
inline void RollHistoryRequest::_internal_set_since_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.since_timestamp_ = value;
}

// -------------------------------------------------------------------

// RollHistoryResponse

// repeated .seshat.RollRecord rolls = 1 [json_name = "rolls"];
inline int RollHistoryResponse::_internal_rolls_size() const {
  return _internal_rolls().size();
}
inline int RollHistoryResponse::rolls_size() const {
  return _internal_rolls_size();
}
inline void RollHistoryResponse::clear_rolls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rolls_.Clear();
}
inline ::seshat::RollRecord* PROTOBUF_NONNULL RollHistoryResponse::mutable_rolls(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seshat.RollHistoryResponse.rolls)
  return _internal_mutable_rolls()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seshat::RollRecord>* PROTOBUF_NONNULL RollHistoryResponse::mutable_rolls()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seshat.RollHistoryResponse.rolls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rolls();
}
inline const ::seshat::RollRecord& RollHistoryResponse::rolls(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollHistoryResponse.rolls)
  return _internal_rolls().Get(index);
}
inline ::seshat::RollRecord* PROTOBUF_NONNULL RollHistoryResponse::add_rolls()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seshat::RollRecord* _add = _internal_mutable_rolls()->Add();
  // @@protoc_insertion_point(field_add:seshat.RollHistoryResponse.rolls)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seshat::RollRecord>& RollHistoryResponse::rolls() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seshat.RollHistoryResponse.rolls)
  return _internal_rolls();
}
inline const ::google::protobuf::RepeatedPtrField<::seshat::RollRecord>&
RollHistoryResponse::_internal_rolls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rolls_;
}
inline ::google::protobuf::RepeatedPtrField<::seshat::RollRecord>* PROTOBUF_NONNULL
RollHistoryResponse::_internal_mutable_rolls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rolls_;
}

// int32 total_count = 2 [json_name = "totalCount"];
inline void RollHistoryResponse::clear_total_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t RollHistoryResponse::total_count() const {
  // @@protoc_insertion_point(field_get:seshat.RollHistoryResponse.total_count)
  return _internal_total_count();
}
inline void RollHistoryResponse::set_total_count(::int32_t value) {
  _internal_set_total_count(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:seshat.RollHistoryResponse.total_count)
}
inline ::int32_t RollHistoryResponse::_internal_total_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_count_;
}
inline void RollHistoryResponse::_internal_set_total_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_count_ = value;
}

// .seshat.Result status = 3 [json_name = "status"];
inline bool RollHistoryResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::seshat::Result& RollHistoryResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seshat::Result* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::seshat::Result&>(::seshat::_Result_default_instance_);
}
inline const ::seshat::Result& RollHistoryResponse::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollHistoryResponse.status)
  return _internal_status();
}
inline void RollHistoryResponse::unsafe_arena_set_allocated_status(
    ::seshat::Result* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::seshat::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seshat.RollHistoryResponse.status)
}
inline ::seshat::Result* PROTOBUF_NULLABLE RollHistoryResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seshat::Result* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seshat::Result* PROTOBUF_NULLABLE RollHistoryResponse::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollHistoryResponse.status)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seshat::Result* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::seshat::Result* PROTOBUF_NONNULL RollHistoryResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seshat::Result>(GetArena());
    _impl_.status_ = reinterpret_cast<::seshat::Result*>(p);
  }
  return _impl_.status_;
}
inline ::seshat::Result* PROTOBUF_NONNULL RollHistoryResponse::mutable_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seshat::Result* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seshat.RollHistoryResponse.status)
  return _msg;
}
inline void RollHistoryResponse::set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.status_ = reinterpret_cast<::seshat::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:seshat.RollHistoryResponse.status)
}

// -------------------------------------------------------------------

// RollRecord

// string formula = 1 [json_name = "formula"];
inline void RollRecord::clear_formula() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.formula_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RollRecord::formula() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollRecord.formula)
  return _internal_formula();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollRecord::set_formula(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.formula_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollRecord.formula)
}
inline ::std::string* PROTOBUF_NONNULL RollRecord::mutable_formula()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_formula();
  // @@protoc_insertion_point(field_mutable:seshat.RollRecord.formula)
  return _s;
}
inline const ::std::string& RollRecord::_internal_formula() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.formula_.Get();
}
inline void RollRecord::_internal_set_formula(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.formula_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollRecord::_internal_mutable_formula() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.formula_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollRecord::release_formula() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollRecord.formula)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.formula_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.formula_.Set("", GetArena());
  }
  return released;
}
inline void RollRecord::set_allocated_formula(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.formula_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.formula_.IsDefault()) {
    _impl_.formula_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollRecord.formula)
}

// int32 result = 2 [json_name = "result"];
inline void RollRecord::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t RollRecord::result() const {
  // @@protoc_insertion_point(field_get:seshat.RollRecord.result)
  return _internal_result();
}
inline void RollRecord::set_result(::int32_t value) {
  _internal_set_result(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:seshat.RollRecord.result)
}
inline ::int32_t RollRecord::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_;
}
inline void RollRecord::_internal_set_result(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string context = 3 [json_name = "context"];
inline void RollRecord::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RollRecord::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollRecord.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollRecord::set_context(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollRecord.context)
}
inline ::std::string* PROTOBUF_NONNULL RollRecord::mutable_context()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:seshat.RollRecord.context)
  return _s;
}
inline const ::std::string& RollRecord::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void RollRecord::_internal_set_context(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.context_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollRecord::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.context_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollRecord::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollRecord.context)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.context_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.context_.Set("", GetArena());
  }
  return released;
}
inline void RollRecord::set_allocated_context(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollRecord.context)
}

// string entity_id = 4 [json_name = "entityId"];
inline void RollRecord::clear_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& RollRecord::entity_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.RollRecord.entity_id)
  return _internal_entity_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RollRecord::set_entity_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.entity_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seshat.RollRecord.entity_id)
}
inline ::std::string* PROTOBUF_NONNULL RollRecord::mutable_entity_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:seshat.RollRecord.entity_id)
  return _s;
}
inline const ::std::string& RollRecord::_internal_entity_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity_id_.Get();
}
inline void RollRecord::_internal_set_entity_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.entity_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RollRecord::_internal_mutable_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.entity_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RollRecord::release_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.RollRecord.entity_id)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.entity_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  return released;
}
inline void RollRecord::set_allocated_entity_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.entity_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seshat.RollRecord.entity_id)
}

// int64 timestamp = 5 [json_name = "timestamp"];
inline void RollRecord::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t RollRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:seshat.RollRecord.timestamp)
  return _internal_timestamp();
}
inline void RollRecord::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:seshat.RollRecord.timestamp)
}
inline ::int64_t RollRecord::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void RollRecord::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// repeated int32 individual_rolls = 6 [json_name = "individualRolls"];
inline int RollRecord::_internal_individual_rolls_size() const {
  return _internal_individual_rolls().size();
}
inline int RollRecord::individual_rolls_size() const {
  return _internal_individual_rolls_size();
}
inline void RollRecord::clear_individual_rolls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.individual_rolls_.Clear();
}
inline ::int32_t RollRecord::individual_rolls(int index) const {
  // @@protoc_insertion_point(field_get:seshat.RollRecord.individual_rolls)
  return _internal_individual_rolls().Get(index);
}
inline void RollRecord::set_individual_rolls(int index, ::int32_t value) {
  _internal_mutable_individual_rolls()->Set(index, value);
  // @@protoc_insertion_point(field_set:seshat.RollRecord.individual_rolls)
}
inline void RollRecord::add_individual_rolls(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_individual_rolls()->Add(value);
  // @@protoc_insertion_point(field_add:seshat.RollRecord.individual_rolls)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RollRecord::individual_rolls() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seshat.RollRecord.individual_rolls)
  return _internal_individual_rolls();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL RollRecord::mutable_individual_rolls()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seshat.RollRecord.individual_rolls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_individual_rolls();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
RollRecord::_internal_individual_rolls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.individual_rolls_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL
RollRecord::_internal_mutable_individual_rolls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.individual_rolls_;
}

// -------------------------------------------------------------------

// FairnessTestRequest

// int32 sides = 1 [json_name = "sides"];
inline void FairnessTestRequest::clear_sides() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sides_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t FairnessTestRequest::sides() const {
  // @@protoc_insertion_point(field_get:seshat.FairnessTestRequest.sides)
  return _internal_sides();
}
inline void FairnessTestRequest::set_sides(::int32_t value) {
  _internal_set_sides(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:seshat.FairnessTestRequest.sides)
}
inline ::int32_t FairnessTestRequest::_internal_sides() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sides_;
}
inline void FairnessTestRequest::_internal_set_sides(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sides_ = value;
}

// int32 sample_size = 2 [json_name = "sampleSize"];
inline void FairnessTestRequest::clear_sample_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t FairnessTestRequest::sample_size() const {
  // @@protoc_insertion_point(field_get:seshat.FairnessTestRequest.sample_size)
  return _internal_sample_size();
}
inline void FairnessTestRequest::set_sample_size(::int32_t value) {
  _internal_set_sample_size(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:seshat.FairnessTestRequest.sample_size)
}
inline ::int32_t FairnessTestRequest::_internal_sample_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sample_size_;
}
inline void FairnessTestRequest::_internal_set_sample_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_size_ = value;
}

// -------------------------------------------------------------------

// FairnessTestResponse

// repeated int32 distribution = 1 [json_name = "distribution"];
inline int FairnessTestResponse::_internal_distribution_size() const {
  return _internal_distribution().size();
}
inline int FairnessTestResponse::distribution_size() const {
  return _internal_distribution_size();
}
inline void FairnessTestResponse::clear_distribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_.Clear();
}
inline ::int32_t FairnessTestResponse::distribution(int index) const {
  // @@protoc_insertion_point(field_get:seshat.FairnessTestResponse.distribution)
  return _internal_distribution().Get(index);
}
inline void FairnessTestResponse::set_distribution(int index, ::int32_t value) {
  _internal_mutable_distribution()->Set(index, value);
  // @@protoc_insertion_point(field_set:seshat.FairnessTestResponse.distribution)
}
inline void FairnessTestResponse::add_distribution(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_distribution()->Add(value);
  // @@protoc_insertion_point(field_add:seshat.FairnessTestResponse.distribution)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FairnessTestResponse::distribution() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seshat.FairnessTestResponse.distribution)
  return _internal_distribution();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL FairnessTestResponse::mutable_distribution()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seshat.FairnessTestResponse.distribution)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_distribution();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
FairnessTestResponse::_internal_distribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distribution_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PROTOBUF_NONNULL
FairnessTestResponse::_internal_mutable_distribution() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.distribution_;
}

// double chi_squared = 2 [json_name = "chiSquared"];
inline void FairnessTestResponse::clear_chi_squared() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chi_squared_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double FairnessTestResponse::chi_squared() const {
  // @@protoc_insertion_point(field_get:seshat.FairnessTestResponse.chi_squared)
  return _internal_chi_squared();
}
inline void FairnessTestResponse::set_chi_squared(double value) {
  _internal_set_chi_squared(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:seshat.FairnessTestResponse.chi_squared)
}
inline double FairnessTestResponse::_internal_chi_squared() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chi_squared_;
}
inline void FairnessTestResponse::_internal_set_chi_squared(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chi_squared_ = value;
}

// double p_value = 3 [json_name = "pValue"];
inline void FairnessTestResponse::clear_p_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.p_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double FairnessTestResponse::p_value() const {
  // @@protoc_insertion_point(field_get:seshat.FairnessTestResponse.p_value)
  return _internal_p_value();
}
inline void FairnessTestResponse::set_p_value(double value) {
  _internal_set_p_value(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:seshat.FairnessTestResponse.p_value)
}
inline double FairnessTestResponse::_internal_p_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.p_value_;
}
inline void FairnessTestResponse::_internal_set_p_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.p_value_ = value;
}

// bool is_fair = 4 [json_name = "isFair"];
inline void FairnessTestResponse::clear_is_fair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_fair_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FairnessTestResponse::is_fair() const {
  // @@protoc_insertion_point(field_get:seshat.FairnessTestResponse.is_fair)
  return _internal_is_fair();
}
inline void FairnessTestResponse::set_is_fair(bool value) {
  _internal_set_is_fair(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:seshat.FairnessTestResponse.is_fair)
}
inline bool FairnessTestResponse::_internal_is_fair() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_fair_;
}
inline void FairnessTestResponse::_internal_set_is_fair(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_fair_ = value;
}

// int32 sample_size = 5 [json_name = "sampleSize"];
inline void FairnessTestResponse::clear_sample_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t FairnessTestResponse::sample_size() const {
  // @@protoc_insertion_point(field_get:seshat.FairnessTestResponse.sample_size)
  return _internal_sample_size();
}
inline void FairnessTestResponse::set_sample_size(::int32_t value) {
  _internal_set_sample_size(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:seshat.FairnessTestResponse.sample_size)
}
inline ::int32_t FairnessTestResponse::_internal_sample_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sample_size_;
}
inline void FairnessTestResponse::_internal_set_sample_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_size_ = value;
}

// .seshat.Result status = 6 [json_name = "status"];
inline bool FairnessTestResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::seshat::Result& FairnessTestResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seshat::Result* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::seshat::Result&>(::seshat::_Result_default_instance_);
}
inline const ::seshat::Result& FairnessTestResponse::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seshat.FairnessTestResponse.status)
  return _internal_status();
}
inline void FairnessTestResponse::unsafe_arena_set_allocated_status(
    ::seshat::Result* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::seshat::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seshat.FairnessTestResponse.status)
}
inline ::seshat::Result* PROTOBUF_NULLABLE FairnessTestResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seshat::Result* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seshat::Result* PROTOBUF_NULLABLE FairnessTestResponse::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seshat.FairnessTestResponse.status)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seshat::Result* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::seshat::Result* PROTOBUF_NONNULL FairnessTestResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seshat::Result>(GetArena());
    _impl_.status_ = reinterpret_cast<::seshat::Result*>(p);
  }
  return _impl_.status_;
}
inline ::seshat::Result* PROTOBUF_NONNULL FairnessTestResponse::mutable_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seshat::Result* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seshat.FairnessTestResponse.status)
  return _msg;
}
inline void FairnessTestResponse::set_allocated_status(::seshat::Result* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.status_ = reinterpret_cast<::seshat::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:seshat.FairnessTestResponse.status)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace seshat


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // seshat_2fdice_2eproto_2epb_2eh

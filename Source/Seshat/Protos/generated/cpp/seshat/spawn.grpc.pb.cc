// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/spawn.proto

#include "seshat/spawn.pb.h"
#include "seshat/spawn.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace seshat {

static const char* SpawnService_method_names[] = {
  "/seshat.SpawnService/CreateSpawnEngine",
  "/seshat.SpawnService/GetSpawnEngine",
  "/seshat.SpawnService/DeleteSpawnEngine",
  "/seshat.SpawnService/SpawnEntity",
  "/seshat.SpawnService/SpawnMultipleEntities",
  "/seshat.SpawnService/SpawnFromPattern",
  "/seshat.SpawnService/GetSpawnPatterns",
  "/seshat.SpawnService/CreateSpawnPattern",
  "/seshat.SpawnService/UpdateSpawnPattern",
  "/seshat.SpawnService/AddSpawnConstraint",
  "/seshat.SpawnService/RemoveSpawnConstraint",
  "/seshat.SpawnService/GetSpawnConstraints",
  "/seshat.SpawnService/ValidateSpawnPosition",
  "/seshat.SpawnService/AnalyzeSpawnCapacity",
  "/seshat.SpawnService/GetOptimalSpawnPositions",
  "/seshat.SpawnService/RecommendRoomSplit",
  "/seshat.SpawnService/GetSpawnHistory",
  "/seshat.SpawnService/GetActiveSpawns",
  "/seshat.SpawnService/DespawnEntity",
};

std::unique_ptr< SpawnService::Stub> SpawnService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpawnService::Stub> stub(new SpawnService::Stub(channel, options));
  return stub;
}

SpawnService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateSpawnEngine_(SpawnService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpawnEngine_(SpawnService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSpawnEngine_(SpawnService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpawnEntity_(SpawnService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpawnMultipleEntities_(SpawnService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpawnFromPattern_(SpawnService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpawnPatterns_(SpawnService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSpawnPattern_(SpawnService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSpawnPattern_(SpawnService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddSpawnConstraint_(SpawnService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveSpawnConstraint_(SpawnService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpawnConstraints_(SpawnService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateSpawnPosition_(SpawnService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AnalyzeSpawnCapacity_(SpawnService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOptimalSpawnPositions_(SpawnService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecommendRoomSplit_(SpawnService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpawnHistory_(SpawnService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActiveSpawns_(SpawnService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DespawnEntity_(SpawnService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SpawnService::Stub::CreateSpawnEngine(::grpc::ClientContext* context, const ::seshat::CreateSpawnEngineRequest& request, ::seshat::CreateSpawnEngineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CreateSpawnEngineRequest, ::seshat::CreateSpawnEngineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSpawnEngine_, context, request, response);
}

void SpawnService::Stub::async::CreateSpawnEngine(::grpc::ClientContext* context, const ::seshat::CreateSpawnEngineRequest* request, ::seshat::CreateSpawnEngineResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CreateSpawnEngineRequest, ::seshat::CreateSpawnEngineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpawnEngine_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::CreateSpawnEngine(::grpc::ClientContext* context, const ::seshat::CreateSpawnEngineRequest* request, ::seshat::CreateSpawnEngineResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpawnEngine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateSpawnEngineResponse>* SpawnService::Stub::PrepareAsyncCreateSpawnEngineRaw(::grpc::ClientContext* context, const ::seshat::CreateSpawnEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CreateSpawnEngineResponse, ::seshat::CreateSpawnEngineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSpawnEngine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateSpawnEngineResponse>* SpawnService::Stub::AsyncCreateSpawnEngineRaw(::grpc::ClientContext* context, const ::seshat::CreateSpawnEngineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSpawnEngineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::GetSpawnEngine(::grpc::ClientContext* context, const ::seshat::GetSpawnEngineRequest& request, ::seshat::GetSpawnEngineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetSpawnEngineRequest, ::seshat::GetSpawnEngineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpawnEngine_, context, request, response);
}

void SpawnService::Stub::async::GetSpawnEngine(::grpc::ClientContext* context, const ::seshat::GetSpawnEngineRequest* request, ::seshat::GetSpawnEngineResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetSpawnEngineRequest, ::seshat::GetSpawnEngineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpawnEngine_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::GetSpawnEngine(::grpc::ClientContext* context, const ::seshat::GetSpawnEngineRequest* request, ::seshat::GetSpawnEngineResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpawnEngine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpawnEngineResponse>* SpawnService::Stub::PrepareAsyncGetSpawnEngineRaw(::grpc::ClientContext* context, const ::seshat::GetSpawnEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetSpawnEngineResponse, ::seshat::GetSpawnEngineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpawnEngine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpawnEngineResponse>* SpawnService::Stub::AsyncGetSpawnEngineRaw(::grpc::ClientContext* context, const ::seshat::GetSpawnEngineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpawnEngineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::DeleteSpawnEngine(::grpc::ClientContext* context, const ::seshat::DeleteSpawnEngineRequest& request, ::seshat::DeleteSpawnEngineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::DeleteSpawnEngineRequest, ::seshat::DeleteSpawnEngineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSpawnEngine_, context, request, response);
}

void SpawnService::Stub::async::DeleteSpawnEngine(::grpc::ClientContext* context, const ::seshat::DeleteSpawnEngineRequest* request, ::seshat::DeleteSpawnEngineResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::DeleteSpawnEngineRequest, ::seshat::DeleteSpawnEngineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSpawnEngine_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::DeleteSpawnEngine(::grpc::ClientContext* context, const ::seshat::DeleteSpawnEngineRequest* request, ::seshat::DeleteSpawnEngineResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSpawnEngine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::DeleteSpawnEngineResponse>* SpawnService::Stub::PrepareAsyncDeleteSpawnEngineRaw(::grpc::ClientContext* context, const ::seshat::DeleteSpawnEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::DeleteSpawnEngineResponse, ::seshat::DeleteSpawnEngineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSpawnEngine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::DeleteSpawnEngineResponse>* SpawnService::Stub::AsyncDeleteSpawnEngineRaw(::grpc::ClientContext* context, const ::seshat::DeleteSpawnEngineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSpawnEngineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::SpawnEntity(::grpc::ClientContext* context, const ::seshat::SpawnEntityRequest& request, ::seshat::SpawnEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::SpawnEntityRequest, ::seshat::SpawnEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpawnEntity_, context, request, response);
}

void SpawnService::Stub::async::SpawnEntity(::grpc::ClientContext* context, const ::seshat::SpawnEntityRequest* request, ::seshat::SpawnEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::SpawnEntityRequest, ::seshat::SpawnEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnEntity_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::SpawnEntity(::grpc::ClientContext* context, const ::seshat::SpawnEntityRequest* request, ::seshat::SpawnEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::SpawnEntityResponse>* SpawnService::Stub::PrepareAsyncSpawnEntityRaw(::grpc::ClientContext* context, const ::seshat::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::SpawnEntityResponse, ::seshat::SpawnEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpawnEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::SpawnEntityResponse>* SpawnService::Stub::AsyncSpawnEntityRaw(::grpc::ClientContext* context, const ::seshat::SpawnEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpawnEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::SpawnMultipleEntities(::grpc::ClientContext* context, const ::seshat::SpawnMultipleEntitiesRequest& request, ::seshat::SpawnMultipleEntitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::SpawnMultipleEntitiesRequest, ::seshat::SpawnMultipleEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpawnMultipleEntities_, context, request, response);
}

void SpawnService::Stub::async::SpawnMultipleEntities(::grpc::ClientContext* context, const ::seshat::SpawnMultipleEntitiesRequest* request, ::seshat::SpawnMultipleEntitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::SpawnMultipleEntitiesRequest, ::seshat::SpawnMultipleEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnMultipleEntities_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::SpawnMultipleEntities(::grpc::ClientContext* context, const ::seshat::SpawnMultipleEntitiesRequest* request, ::seshat::SpawnMultipleEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnMultipleEntities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::SpawnMultipleEntitiesResponse>* SpawnService::Stub::PrepareAsyncSpawnMultipleEntitiesRaw(::grpc::ClientContext* context, const ::seshat::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::SpawnMultipleEntitiesResponse, ::seshat::SpawnMultipleEntitiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpawnMultipleEntities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::SpawnMultipleEntitiesResponse>* SpawnService::Stub::AsyncSpawnMultipleEntitiesRaw(::grpc::ClientContext* context, const ::seshat::SpawnMultipleEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpawnMultipleEntitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::SpawnFromPattern(::grpc::ClientContext* context, const ::seshat::SpawnFromPatternRequest& request, ::seshat::SpawnFromPatternResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::SpawnFromPatternRequest, ::seshat::SpawnFromPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpawnFromPattern_, context, request, response);
}

void SpawnService::Stub::async::SpawnFromPattern(::grpc::ClientContext* context, const ::seshat::SpawnFromPatternRequest* request, ::seshat::SpawnFromPatternResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::SpawnFromPatternRequest, ::seshat::SpawnFromPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnFromPattern_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::SpawnFromPattern(::grpc::ClientContext* context, const ::seshat::SpawnFromPatternRequest* request, ::seshat::SpawnFromPatternResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnFromPattern_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::SpawnFromPatternResponse>* SpawnService::Stub::PrepareAsyncSpawnFromPatternRaw(::grpc::ClientContext* context, const ::seshat::SpawnFromPatternRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::SpawnFromPatternResponse, ::seshat::SpawnFromPatternRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpawnFromPattern_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::SpawnFromPatternResponse>* SpawnService::Stub::AsyncSpawnFromPatternRaw(::grpc::ClientContext* context, const ::seshat::SpawnFromPatternRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpawnFromPatternRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::GetSpawnPatterns(::grpc::ClientContext* context, const ::seshat::GetSpawnPatternsRequest& request, ::seshat::GetSpawnPatternsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetSpawnPatternsRequest, ::seshat::GetSpawnPatternsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpawnPatterns_, context, request, response);
}

void SpawnService::Stub::async::GetSpawnPatterns(::grpc::ClientContext* context, const ::seshat::GetSpawnPatternsRequest* request, ::seshat::GetSpawnPatternsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetSpawnPatternsRequest, ::seshat::GetSpawnPatternsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpawnPatterns_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::GetSpawnPatterns(::grpc::ClientContext* context, const ::seshat::GetSpawnPatternsRequest* request, ::seshat::GetSpawnPatternsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpawnPatterns_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpawnPatternsResponse>* SpawnService::Stub::PrepareAsyncGetSpawnPatternsRaw(::grpc::ClientContext* context, const ::seshat::GetSpawnPatternsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetSpawnPatternsResponse, ::seshat::GetSpawnPatternsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpawnPatterns_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpawnPatternsResponse>* SpawnService::Stub::AsyncGetSpawnPatternsRaw(::grpc::ClientContext* context, const ::seshat::GetSpawnPatternsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpawnPatternsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::CreateSpawnPattern(::grpc::ClientContext* context, const ::seshat::CreateSpawnPatternRequest& request, ::seshat::CreateSpawnPatternResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CreateSpawnPatternRequest, ::seshat::CreateSpawnPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSpawnPattern_, context, request, response);
}

void SpawnService::Stub::async::CreateSpawnPattern(::grpc::ClientContext* context, const ::seshat::CreateSpawnPatternRequest* request, ::seshat::CreateSpawnPatternResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CreateSpawnPatternRequest, ::seshat::CreateSpawnPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpawnPattern_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::CreateSpawnPattern(::grpc::ClientContext* context, const ::seshat::CreateSpawnPatternRequest* request, ::seshat::CreateSpawnPatternResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpawnPattern_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateSpawnPatternResponse>* SpawnService::Stub::PrepareAsyncCreateSpawnPatternRaw(::grpc::ClientContext* context, const ::seshat::CreateSpawnPatternRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CreateSpawnPatternResponse, ::seshat::CreateSpawnPatternRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSpawnPattern_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateSpawnPatternResponse>* SpawnService::Stub::AsyncCreateSpawnPatternRaw(::grpc::ClientContext* context, const ::seshat::CreateSpawnPatternRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSpawnPatternRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::UpdateSpawnPattern(::grpc::ClientContext* context, const ::seshat::UpdateSpawnPatternRequest& request, ::seshat::UpdateSpawnPatternResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::UpdateSpawnPatternRequest, ::seshat::UpdateSpawnPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSpawnPattern_, context, request, response);
}

void SpawnService::Stub::async::UpdateSpawnPattern(::grpc::ClientContext* context, const ::seshat::UpdateSpawnPatternRequest* request, ::seshat::UpdateSpawnPatternResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::UpdateSpawnPatternRequest, ::seshat::UpdateSpawnPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSpawnPattern_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::UpdateSpawnPattern(::grpc::ClientContext* context, const ::seshat::UpdateSpawnPatternRequest* request, ::seshat::UpdateSpawnPatternResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSpawnPattern_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::UpdateSpawnPatternResponse>* SpawnService::Stub::PrepareAsyncUpdateSpawnPatternRaw(::grpc::ClientContext* context, const ::seshat::UpdateSpawnPatternRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::UpdateSpawnPatternResponse, ::seshat::UpdateSpawnPatternRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSpawnPattern_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::UpdateSpawnPatternResponse>* SpawnService::Stub::AsyncUpdateSpawnPatternRaw(::grpc::ClientContext* context, const ::seshat::UpdateSpawnPatternRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSpawnPatternRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::AddSpawnConstraint(::grpc::ClientContext* context, const ::seshat::AddSpawnConstraintRequest& request, ::seshat::AddSpawnConstraintResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::AddSpawnConstraintRequest, ::seshat::AddSpawnConstraintResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddSpawnConstraint_, context, request, response);
}

void SpawnService::Stub::async::AddSpawnConstraint(::grpc::ClientContext* context, const ::seshat::AddSpawnConstraintRequest* request, ::seshat::AddSpawnConstraintResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::AddSpawnConstraintRequest, ::seshat::AddSpawnConstraintResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSpawnConstraint_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::AddSpawnConstraint(::grpc::ClientContext* context, const ::seshat::AddSpawnConstraintRequest* request, ::seshat::AddSpawnConstraintResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSpawnConstraint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::AddSpawnConstraintResponse>* SpawnService::Stub::PrepareAsyncAddSpawnConstraintRaw(::grpc::ClientContext* context, const ::seshat::AddSpawnConstraintRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::AddSpawnConstraintResponse, ::seshat::AddSpawnConstraintRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddSpawnConstraint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::AddSpawnConstraintResponse>* SpawnService::Stub::AsyncAddSpawnConstraintRaw(::grpc::ClientContext* context, const ::seshat::AddSpawnConstraintRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddSpawnConstraintRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::RemoveSpawnConstraint(::grpc::ClientContext* context, const ::seshat::RemoveSpawnConstraintRequest& request, ::seshat::RemoveSpawnConstraintResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RemoveSpawnConstraintRequest, ::seshat::RemoveSpawnConstraintResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveSpawnConstraint_, context, request, response);
}

void SpawnService::Stub::async::RemoveSpawnConstraint(::grpc::ClientContext* context, const ::seshat::RemoveSpawnConstraintRequest* request, ::seshat::RemoveSpawnConstraintResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RemoveSpawnConstraintRequest, ::seshat::RemoveSpawnConstraintResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveSpawnConstraint_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::RemoveSpawnConstraint(::grpc::ClientContext* context, const ::seshat::RemoveSpawnConstraintRequest* request, ::seshat::RemoveSpawnConstraintResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveSpawnConstraint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RemoveSpawnConstraintResponse>* SpawnService::Stub::PrepareAsyncRemoveSpawnConstraintRaw(::grpc::ClientContext* context, const ::seshat::RemoveSpawnConstraintRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RemoveSpawnConstraintResponse, ::seshat::RemoveSpawnConstraintRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveSpawnConstraint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RemoveSpawnConstraintResponse>* SpawnService::Stub::AsyncRemoveSpawnConstraintRaw(::grpc::ClientContext* context, const ::seshat::RemoveSpawnConstraintRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveSpawnConstraintRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::GetSpawnConstraints(::grpc::ClientContext* context, const ::seshat::GetSpawnConstraintsRequest& request, ::seshat::GetSpawnConstraintsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetSpawnConstraintsRequest, ::seshat::GetSpawnConstraintsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpawnConstraints_, context, request, response);
}

void SpawnService::Stub::async::GetSpawnConstraints(::grpc::ClientContext* context, const ::seshat::GetSpawnConstraintsRequest* request, ::seshat::GetSpawnConstraintsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetSpawnConstraintsRequest, ::seshat::GetSpawnConstraintsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpawnConstraints_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::GetSpawnConstraints(::grpc::ClientContext* context, const ::seshat::GetSpawnConstraintsRequest* request, ::seshat::GetSpawnConstraintsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpawnConstraints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpawnConstraintsResponse>* SpawnService::Stub::PrepareAsyncGetSpawnConstraintsRaw(::grpc::ClientContext* context, const ::seshat::GetSpawnConstraintsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetSpawnConstraintsResponse, ::seshat::GetSpawnConstraintsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpawnConstraints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpawnConstraintsResponse>* SpawnService::Stub::AsyncGetSpawnConstraintsRaw(::grpc::ClientContext* context, const ::seshat::GetSpawnConstraintsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpawnConstraintsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::ValidateSpawnPosition(::grpc::ClientContext* context, const ::seshat::ValidateSpawnPositionRequest& request, ::seshat::ValidateSpawnPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ValidateSpawnPositionRequest, ::seshat::ValidateSpawnPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateSpawnPosition_, context, request, response);
}

void SpawnService::Stub::async::ValidateSpawnPosition(::grpc::ClientContext* context, const ::seshat::ValidateSpawnPositionRequest* request, ::seshat::ValidateSpawnPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ValidateSpawnPositionRequest, ::seshat::ValidateSpawnPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateSpawnPosition_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::ValidateSpawnPosition(::grpc::ClientContext* context, const ::seshat::ValidateSpawnPositionRequest* request, ::seshat::ValidateSpawnPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateSpawnPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ValidateSpawnPositionResponse>* SpawnService::Stub::PrepareAsyncValidateSpawnPositionRaw(::grpc::ClientContext* context, const ::seshat::ValidateSpawnPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ValidateSpawnPositionResponse, ::seshat::ValidateSpawnPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateSpawnPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ValidateSpawnPositionResponse>* SpawnService::Stub::AsyncValidateSpawnPositionRaw(::grpc::ClientContext* context, const ::seshat::ValidateSpawnPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateSpawnPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::AnalyzeSpawnCapacity(::grpc::ClientContext* context, const ::seshat::AnalyzeSpawnCapacityRequest& request, ::seshat::AnalyzeSpawnCapacityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::AnalyzeSpawnCapacityRequest, ::seshat::AnalyzeSpawnCapacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AnalyzeSpawnCapacity_, context, request, response);
}

void SpawnService::Stub::async::AnalyzeSpawnCapacity(::grpc::ClientContext* context, const ::seshat::AnalyzeSpawnCapacityRequest* request, ::seshat::AnalyzeSpawnCapacityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::AnalyzeSpawnCapacityRequest, ::seshat::AnalyzeSpawnCapacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AnalyzeSpawnCapacity_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::AnalyzeSpawnCapacity(::grpc::ClientContext* context, const ::seshat::AnalyzeSpawnCapacityRequest* request, ::seshat::AnalyzeSpawnCapacityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AnalyzeSpawnCapacity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::AnalyzeSpawnCapacityResponse>* SpawnService::Stub::PrepareAsyncAnalyzeSpawnCapacityRaw(::grpc::ClientContext* context, const ::seshat::AnalyzeSpawnCapacityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::AnalyzeSpawnCapacityResponse, ::seshat::AnalyzeSpawnCapacityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AnalyzeSpawnCapacity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::AnalyzeSpawnCapacityResponse>* SpawnService::Stub::AsyncAnalyzeSpawnCapacityRaw(::grpc::ClientContext* context, const ::seshat::AnalyzeSpawnCapacityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAnalyzeSpawnCapacityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::GetOptimalSpawnPositions(::grpc::ClientContext* context, const ::seshat::GetOptimalSpawnPositionsRequest& request, ::seshat::GetOptimalSpawnPositionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetOptimalSpawnPositionsRequest, ::seshat::GetOptimalSpawnPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOptimalSpawnPositions_, context, request, response);
}

void SpawnService::Stub::async::GetOptimalSpawnPositions(::grpc::ClientContext* context, const ::seshat::GetOptimalSpawnPositionsRequest* request, ::seshat::GetOptimalSpawnPositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetOptimalSpawnPositionsRequest, ::seshat::GetOptimalSpawnPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOptimalSpawnPositions_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::GetOptimalSpawnPositions(::grpc::ClientContext* context, const ::seshat::GetOptimalSpawnPositionsRequest* request, ::seshat::GetOptimalSpawnPositionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOptimalSpawnPositions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetOptimalSpawnPositionsResponse>* SpawnService::Stub::PrepareAsyncGetOptimalSpawnPositionsRaw(::grpc::ClientContext* context, const ::seshat::GetOptimalSpawnPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetOptimalSpawnPositionsResponse, ::seshat::GetOptimalSpawnPositionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOptimalSpawnPositions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetOptimalSpawnPositionsResponse>* SpawnService::Stub::AsyncGetOptimalSpawnPositionsRaw(::grpc::ClientContext* context, const ::seshat::GetOptimalSpawnPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOptimalSpawnPositionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::RecommendRoomSplit(::grpc::ClientContext* context, const ::seshat::RecommendRoomSplitRequest& request, ::seshat::RecommendRoomSplitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RecommendRoomSplitRequest, ::seshat::RecommendRoomSplitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecommendRoomSplit_, context, request, response);
}

void SpawnService::Stub::async::RecommendRoomSplit(::grpc::ClientContext* context, const ::seshat::RecommendRoomSplitRequest* request, ::seshat::RecommendRoomSplitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RecommendRoomSplitRequest, ::seshat::RecommendRoomSplitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecommendRoomSplit_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::RecommendRoomSplit(::grpc::ClientContext* context, const ::seshat::RecommendRoomSplitRequest* request, ::seshat::RecommendRoomSplitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecommendRoomSplit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RecommendRoomSplitResponse>* SpawnService::Stub::PrepareAsyncRecommendRoomSplitRaw(::grpc::ClientContext* context, const ::seshat::RecommendRoomSplitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RecommendRoomSplitResponse, ::seshat::RecommendRoomSplitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecommendRoomSplit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RecommendRoomSplitResponse>* SpawnService::Stub::AsyncRecommendRoomSplitRaw(::grpc::ClientContext* context, const ::seshat::RecommendRoomSplitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecommendRoomSplitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::GetSpawnHistory(::grpc::ClientContext* context, const ::seshat::GetSpawnHistoryRequest& request, ::seshat::GetSpawnHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetSpawnHistoryRequest, ::seshat::GetSpawnHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpawnHistory_, context, request, response);
}

void SpawnService::Stub::async::GetSpawnHistory(::grpc::ClientContext* context, const ::seshat::GetSpawnHistoryRequest* request, ::seshat::GetSpawnHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetSpawnHistoryRequest, ::seshat::GetSpawnHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpawnHistory_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::GetSpawnHistory(::grpc::ClientContext* context, const ::seshat::GetSpawnHistoryRequest* request, ::seshat::GetSpawnHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpawnHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpawnHistoryResponse>* SpawnService::Stub::PrepareAsyncGetSpawnHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetSpawnHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetSpawnHistoryResponse, ::seshat::GetSpawnHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpawnHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpawnHistoryResponse>* SpawnService::Stub::AsyncGetSpawnHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetSpawnHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpawnHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::GetActiveSpawns(::grpc::ClientContext* context, const ::seshat::GetActiveSpawnsRequest& request, ::seshat::GetActiveSpawnsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetActiveSpawnsRequest, ::seshat::GetActiveSpawnsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetActiveSpawns_, context, request, response);
}

void SpawnService::Stub::async::GetActiveSpawns(::grpc::ClientContext* context, const ::seshat::GetActiveSpawnsRequest* request, ::seshat::GetActiveSpawnsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetActiveSpawnsRequest, ::seshat::GetActiveSpawnsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActiveSpawns_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::GetActiveSpawns(::grpc::ClientContext* context, const ::seshat::GetActiveSpawnsRequest* request, ::seshat::GetActiveSpawnsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActiveSpawns_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetActiveSpawnsResponse>* SpawnService::Stub::PrepareAsyncGetActiveSpawnsRaw(::grpc::ClientContext* context, const ::seshat::GetActiveSpawnsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetActiveSpawnsResponse, ::seshat::GetActiveSpawnsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetActiveSpawns_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetActiveSpawnsResponse>* SpawnService::Stub::AsyncGetActiveSpawnsRaw(::grpc::ClientContext* context, const ::seshat::GetActiveSpawnsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetActiveSpawnsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpawnService::Stub::DespawnEntity(::grpc::ClientContext* context, const ::seshat::DespawnEntityRequest& request, ::seshat::DespawnEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::DespawnEntityRequest, ::seshat::DespawnEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DespawnEntity_, context, request, response);
}

void SpawnService::Stub::async::DespawnEntity(::grpc::ClientContext* context, const ::seshat::DespawnEntityRequest* request, ::seshat::DespawnEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::DespawnEntityRequest, ::seshat::DespawnEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DespawnEntity_, context, request, response, std::move(f));
}

void SpawnService::Stub::async::DespawnEntity(::grpc::ClientContext* context, const ::seshat::DespawnEntityRequest* request, ::seshat::DespawnEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DespawnEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::DespawnEntityResponse>* SpawnService::Stub::PrepareAsyncDespawnEntityRaw(::grpc::ClientContext* context, const ::seshat::DespawnEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::DespawnEntityResponse, ::seshat::DespawnEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DespawnEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::DespawnEntityResponse>* SpawnService::Stub::AsyncDespawnEntityRaw(::grpc::ClientContext* context, const ::seshat::DespawnEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDespawnEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

SpawnService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::CreateSpawnEngineRequest, ::seshat::CreateSpawnEngineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CreateSpawnEngineRequest* req,
             ::seshat::CreateSpawnEngineResponse* resp) {
               return service->CreateSpawnEngine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::GetSpawnEngineRequest, ::seshat::GetSpawnEngineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetSpawnEngineRequest* req,
             ::seshat::GetSpawnEngineResponse* resp) {
               return service->GetSpawnEngine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::DeleteSpawnEngineRequest, ::seshat::DeleteSpawnEngineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::DeleteSpawnEngineRequest* req,
             ::seshat::DeleteSpawnEngineResponse* resp) {
               return service->DeleteSpawnEngine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::SpawnEntityRequest, ::seshat::SpawnEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::SpawnEntityRequest* req,
             ::seshat::SpawnEntityResponse* resp) {
               return service->SpawnEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::SpawnMultipleEntitiesRequest, ::seshat::SpawnMultipleEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::SpawnMultipleEntitiesRequest* req,
             ::seshat::SpawnMultipleEntitiesResponse* resp) {
               return service->SpawnMultipleEntities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::SpawnFromPatternRequest, ::seshat::SpawnFromPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::SpawnFromPatternRequest* req,
             ::seshat::SpawnFromPatternResponse* resp) {
               return service->SpawnFromPattern(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::GetSpawnPatternsRequest, ::seshat::GetSpawnPatternsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetSpawnPatternsRequest* req,
             ::seshat::GetSpawnPatternsResponse* resp) {
               return service->GetSpawnPatterns(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::CreateSpawnPatternRequest, ::seshat::CreateSpawnPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CreateSpawnPatternRequest* req,
             ::seshat::CreateSpawnPatternResponse* resp) {
               return service->CreateSpawnPattern(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::UpdateSpawnPatternRequest, ::seshat::UpdateSpawnPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::UpdateSpawnPatternRequest* req,
             ::seshat::UpdateSpawnPatternResponse* resp) {
               return service->UpdateSpawnPattern(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::AddSpawnConstraintRequest, ::seshat::AddSpawnConstraintResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::AddSpawnConstraintRequest* req,
             ::seshat::AddSpawnConstraintResponse* resp) {
               return service->AddSpawnConstraint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::RemoveSpawnConstraintRequest, ::seshat::RemoveSpawnConstraintResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RemoveSpawnConstraintRequest* req,
             ::seshat::RemoveSpawnConstraintResponse* resp) {
               return service->RemoveSpawnConstraint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::GetSpawnConstraintsRequest, ::seshat::GetSpawnConstraintsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetSpawnConstraintsRequest* req,
             ::seshat::GetSpawnConstraintsResponse* resp) {
               return service->GetSpawnConstraints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::ValidateSpawnPositionRequest, ::seshat::ValidateSpawnPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ValidateSpawnPositionRequest* req,
             ::seshat::ValidateSpawnPositionResponse* resp) {
               return service->ValidateSpawnPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::AnalyzeSpawnCapacityRequest, ::seshat::AnalyzeSpawnCapacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::AnalyzeSpawnCapacityRequest* req,
             ::seshat::AnalyzeSpawnCapacityResponse* resp) {
               return service->AnalyzeSpawnCapacity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::GetOptimalSpawnPositionsRequest, ::seshat::GetOptimalSpawnPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetOptimalSpawnPositionsRequest* req,
             ::seshat::GetOptimalSpawnPositionsResponse* resp) {
               return service->GetOptimalSpawnPositions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::RecommendRoomSplitRequest, ::seshat::RecommendRoomSplitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RecommendRoomSplitRequest* req,
             ::seshat::RecommendRoomSplitResponse* resp) {
               return service->RecommendRoomSplit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::GetSpawnHistoryRequest, ::seshat::GetSpawnHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetSpawnHistoryRequest* req,
             ::seshat::GetSpawnHistoryResponse* resp) {
               return service->GetSpawnHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::GetActiveSpawnsRequest, ::seshat::GetActiveSpawnsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetActiveSpawnsRequest* req,
             ::seshat::GetActiveSpawnsResponse* resp) {
               return service->GetActiveSpawns(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpawnService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpawnService::Service, ::seshat::DespawnEntityRequest, ::seshat::DespawnEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpawnService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::DespawnEntityRequest* req,
             ::seshat::DespawnEntityResponse* resp) {
               return service->DespawnEntity(ctx, req, resp);
             }, this)));
}

SpawnService::Service::~Service() {
}

::grpc::Status SpawnService::Service::CreateSpawnEngine(::grpc::ServerContext* context, const ::seshat::CreateSpawnEngineRequest* request, ::seshat::CreateSpawnEngineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::GetSpawnEngine(::grpc::ServerContext* context, const ::seshat::GetSpawnEngineRequest* request, ::seshat::GetSpawnEngineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::DeleteSpawnEngine(::grpc::ServerContext* context, const ::seshat::DeleteSpawnEngineRequest* request, ::seshat::DeleteSpawnEngineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::SpawnEntity(::grpc::ServerContext* context, const ::seshat::SpawnEntityRequest* request, ::seshat::SpawnEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::SpawnMultipleEntities(::grpc::ServerContext* context, const ::seshat::SpawnMultipleEntitiesRequest* request, ::seshat::SpawnMultipleEntitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::SpawnFromPattern(::grpc::ServerContext* context, const ::seshat::SpawnFromPatternRequest* request, ::seshat::SpawnFromPatternResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::GetSpawnPatterns(::grpc::ServerContext* context, const ::seshat::GetSpawnPatternsRequest* request, ::seshat::GetSpawnPatternsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::CreateSpawnPattern(::grpc::ServerContext* context, const ::seshat::CreateSpawnPatternRequest* request, ::seshat::CreateSpawnPatternResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::UpdateSpawnPattern(::grpc::ServerContext* context, const ::seshat::UpdateSpawnPatternRequest* request, ::seshat::UpdateSpawnPatternResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::AddSpawnConstraint(::grpc::ServerContext* context, const ::seshat::AddSpawnConstraintRequest* request, ::seshat::AddSpawnConstraintResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::RemoveSpawnConstraint(::grpc::ServerContext* context, const ::seshat::RemoveSpawnConstraintRequest* request, ::seshat::RemoveSpawnConstraintResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::GetSpawnConstraints(::grpc::ServerContext* context, const ::seshat::GetSpawnConstraintsRequest* request, ::seshat::GetSpawnConstraintsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::ValidateSpawnPosition(::grpc::ServerContext* context, const ::seshat::ValidateSpawnPositionRequest* request, ::seshat::ValidateSpawnPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::AnalyzeSpawnCapacity(::grpc::ServerContext* context, const ::seshat::AnalyzeSpawnCapacityRequest* request, ::seshat::AnalyzeSpawnCapacityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::GetOptimalSpawnPositions(::grpc::ServerContext* context, const ::seshat::GetOptimalSpawnPositionsRequest* request, ::seshat::GetOptimalSpawnPositionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::RecommendRoomSplit(::grpc::ServerContext* context, const ::seshat::RecommendRoomSplitRequest* request, ::seshat::RecommendRoomSplitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::GetSpawnHistory(::grpc::ServerContext* context, const ::seshat::GetSpawnHistoryRequest* request, ::seshat::GetSpawnHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::GetActiveSpawns(::grpc::ServerContext* context, const ::seshat::GetActiveSpawnsRequest* request, ::seshat::GetActiveSpawnsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpawnService::Service::DespawnEntity(::grpc::ServerContext* context, const ::seshat::DespawnEntityRequest* request, ::seshat::DespawnEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace seshat
#include <grpcpp/ports_undef.inc>


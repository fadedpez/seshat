// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/selectables.proto
#ifndef GRPC_seshat_2fselectables_2eproto__INCLUDED
#define GRPC_seshat_2fselectables_2eproto__INCLUDED

#include "seshat/selectables.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace seshat {

// Weighted selection service - exposes all selectables toolkit functionality
class SelectablesService final {
 public:
  static constexpr char const* service_full_name() {
    return "seshat.SelectablesService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Basic table operations
    virtual ::grpc::Status CreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::seshat::CreateTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateTableResponse>> AsyncCreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateTableResponse>>(AsyncCreateTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateTableResponse>> PrepareAsyncCreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateTableResponse>>(PrepareAsyncCreateTableRaw(context, request, cq));
    }
    virtual ::grpc::Status AddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::seshat::AddItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::AddItemResponse>> AsyncAddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::AddItemResponse>>(AsyncAddItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::AddItemResponse>> PrepareAsyncAddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::AddItemResponse>>(PrepareAsyncAddItemRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::seshat::RemoveItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RemoveItemResponse>> AsyncRemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RemoveItemResponse>>(AsyncRemoveItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RemoveItemResponse>> PrepareAsyncRemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RemoveItemResponse>>(PrepareAsyncRemoveItemRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::seshat::UpdateWeightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateWeightResponse>> AsyncUpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateWeightResponse>>(AsyncUpdateWeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateWeightResponse>> PrepareAsyncUpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateWeightResponse>>(PrepareAsyncUpdateWeightRaw(context, request, cq));
    }
    // Selection operations
    virtual ::grpc::Status Select(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::seshat::SelectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectResponse>> AsyncSelect(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectResponse>>(AsyncSelectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectResponse>> PrepareAsyncSelect(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectResponse>>(PrepareAsyncSelectRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::seshat::SelectMultipleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectMultipleResponse>> AsyncSelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectMultipleResponse>>(AsyncSelectMultipleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectMultipleResponse>> PrepareAsyncSelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectMultipleResponse>>(PrepareAsyncSelectMultipleRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::seshat::SelectWithContextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectWithContextResponse>> AsyncSelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectWithContextResponse>>(AsyncSelectWithContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectWithContextResponse>> PrepareAsyncSelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectWithContextResponse>>(PrepareAsyncSelectWithContextRaw(context, request, cq));
    }
    // Table management
    virtual ::grpc::Status GetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::seshat::GetTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetTableResponse>> AsyncGetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetTableResponse>>(AsyncGetTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetTableResponse>> PrepareAsyncGetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetTableResponse>>(PrepareAsyncGetTableRaw(context, request, cq));
    }
    virtual ::grpc::Status ListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::seshat::ListTablesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListTablesResponse>> AsyncListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListTablesResponse>>(AsyncListTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListTablesResponse>> PrepareAsyncListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListTablesResponse>>(PrepareAsyncListTablesRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::seshat::DeleteTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteTableResponse>> AsyncDeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteTableResponse>>(AsyncDeleteTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteTableResponse>> PrepareAsyncDeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteTableResponse>>(PrepareAsyncDeleteTableRaw(context, request, cq));
    }
    virtual ::grpc::Status CloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::seshat::CloneTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CloneTableResponse>> AsyncCloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CloneTableResponse>>(AsyncCloneTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CloneTableResponse>> PrepareAsyncCloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CloneTableResponse>>(PrepareAsyncCloneTableRaw(context, request, cq));
    }
    // Advanced operations
    virtual ::grpc::Status GetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::seshat::GetProbabilitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetProbabilitiesResponse>> AsyncGetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetProbabilitiesResponse>>(AsyncGetProbabilitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetProbabilitiesResponse>> PrepareAsyncGetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetProbabilitiesResponse>>(PrepareAsyncGetProbabilitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status TestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::seshat::TestDistributionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TestDistributionResponse>> AsyncTestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TestDistributionResponse>>(AsyncTestDistributionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TestDistributionResponse>> PrepareAsyncTestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TestDistributionResponse>>(PrepareAsyncTestDistributionRaw(context, request, cq));
    }
    virtual ::grpc::Status MergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::seshat::MergeTablesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MergeTablesResponse>> AsyncMergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MergeTablesResponse>>(AsyncMergeTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MergeTablesResponse>> PrepareAsyncMergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MergeTablesResponse>>(PrepareAsyncMergeTablesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Basic table operations
      virtual void CreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest* request, ::seshat::CreateTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest* request, ::seshat::CreateTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest* request, ::seshat::AddItemResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest* request, ::seshat::AddItemResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest* request, ::seshat::RemoveItemResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest* request, ::seshat::RemoveItemResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest* request, ::seshat::UpdateWeightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest* request, ::seshat::UpdateWeightResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Selection operations
      virtual void Select(::grpc::ClientContext* context, const ::seshat::SelectRequest* request, ::seshat::SelectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Select(::grpc::ClientContext* context, const ::seshat::SelectRequest* request, ::seshat::SelectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest* request, ::seshat::SelectMultipleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest* request, ::seshat::SelectMultipleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest* request, ::seshat::SelectWithContextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest* request, ::seshat::SelectWithContextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Table management
      virtual void GetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest* request, ::seshat::GetTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest* request, ::seshat::GetTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest* request, ::seshat::ListTablesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest* request, ::seshat::ListTablesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest* request, ::seshat::DeleteTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest* request, ::seshat::DeleteTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest* request, ::seshat::CloneTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest* request, ::seshat::CloneTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Advanced operations
      virtual void GetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest* request, ::seshat::GetProbabilitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest* request, ::seshat::GetProbabilitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest* request, ::seshat::TestDistributionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest* request, ::seshat::TestDistributionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest* request, ::seshat::MergeTablesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest* request, ::seshat::MergeTablesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateTableResponse>* AsyncCreateTableRaw(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateTableResponse>* PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::AddItemResponse>* AsyncAddItemRaw(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::AddItemResponse>* PrepareAsyncAddItemRaw(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RemoveItemResponse>* AsyncRemoveItemRaw(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RemoveItemResponse>* PrepareAsyncRemoveItemRaw(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateWeightResponse>* AsyncUpdateWeightRaw(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateWeightResponse>* PrepareAsyncUpdateWeightRaw(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectResponse>* AsyncSelectRaw(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectResponse>* PrepareAsyncSelectRaw(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectMultipleResponse>* AsyncSelectMultipleRaw(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectMultipleResponse>* PrepareAsyncSelectMultipleRaw(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectWithContextResponse>* AsyncSelectWithContextRaw(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::SelectWithContextResponse>* PrepareAsyncSelectWithContextRaw(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetTableResponse>* AsyncGetTableRaw(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetTableResponse>* PrepareAsyncGetTableRaw(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListTablesResponse>* AsyncListTablesRaw(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListTablesResponse>* PrepareAsyncListTablesRaw(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteTableResponse>* AsyncDeleteTableRaw(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteTableResponse>* PrepareAsyncDeleteTableRaw(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CloneTableResponse>* AsyncCloneTableRaw(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CloneTableResponse>* PrepareAsyncCloneTableRaw(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetProbabilitiesResponse>* AsyncGetProbabilitiesRaw(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetProbabilitiesResponse>* PrepareAsyncGetProbabilitiesRaw(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TestDistributionResponse>* AsyncTestDistributionRaw(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TestDistributionResponse>* PrepareAsyncTestDistributionRaw(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MergeTablesResponse>* AsyncMergeTablesRaw(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MergeTablesResponse>* PrepareAsyncMergeTablesRaw(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::seshat::CreateTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateTableResponse>> AsyncCreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateTableResponse>>(AsyncCreateTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateTableResponse>> PrepareAsyncCreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateTableResponse>>(PrepareAsyncCreateTableRaw(context, request, cq));
    }
    ::grpc::Status AddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::seshat::AddItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::AddItemResponse>> AsyncAddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::AddItemResponse>>(AsyncAddItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::AddItemResponse>> PrepareAsyncAddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::AddItemResponse>>(PrepareAsyncAddItemRaw(context, request, cq));
    }
    ::grpc::Status RemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::seshat::RemoveItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RemoveItemResponse>> AsyncRemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RemoveItemResponse>>(AsyncRemoveItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RemoveItemResponse>> PrepareAsyncRemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RemoveItemResponse>>(PrepareAsyncRemoveItemRaw(context, request, cq));
    }
    ::grpc::Status UpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::seshat::UpdateWeightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateWeightResponse>> AsyncUpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateWeightResponse>>(AsyncUpdateWeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateWeightResponse>> PrepareAsyncUpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateWeightResponse>>(PrepareAsyncUpdateWeightRaw(context, request, cq));
    }
    ::grpc::Status Select(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::seshat::SelectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectResponse>> AsyncSelect(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectResponse>>(AsyncSelectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectResponse>> PrepareAsyncSelect(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectResponse>>(PrepareAsyncSelectRaw(context, request, cq));
    }
    ::grpc::Status SelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::seshat::SelectMultipleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectMultipleResponse>> AsyncSelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectMultipleResponse>>(AsyncSelectMultipleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectMultipleResponse>> PrepareAsyncSelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectMultipleResponse>>(PrepareAsyncSelectMultipleRaw(context, request, cq));
    }
    ::grpc::Status SelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::seshat::SelectWithContextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectWithContextResponse>> AsyncSelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectWithContextResponse>>(AsyncSelectWithContextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectWithContextResponse>> PrepareAsyncSelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::SelectWithContextResponse>>(PrepareAsyncSelectWithContextRaw(context, request, cq));
    }
    ::grpc::Status GetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::seshat::GetTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetTableResponse>> AsyncGetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetTableResponse>>(AsyncGetTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetTableResponse>> PrepareAsyncGetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetTableResponse>>(PrepareAsyncGetTableRaw(context, request, cq));
    }
    ::grpc::Status ListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::seshat::ListTablesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ListTablesResponse>> AsyncListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ListTablesResponse>>(AsyncListTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ListTablesResponse>> PrepareAsyncListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ListTablesResponse>>(PrepareAsyncListTablesRaw(context, request, cq));
    }
    ::grpc::Status DeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::seshat::DeleteTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::DeleteTableResponse>> AsyncDeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::DeleteTableResponse>>(AsyncDeleteTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::DeleteTableResponse>> PrepareAsyncDeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::DeleteTableResponse>>(PrepareAsyncDeleteTableRaw(context, request, cq));
    }
    ::grpc::Status CloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::seshat::CloneTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CloneTableResponse>> AsyncCloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CloneTableResponse>>(AsyncCloneTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CloneTableResponse>> PrepareAsyncCloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CloneTableResponse>>(PrepareAsyncCloneTableRaw(context, request, cq));
    }
    ::grpc::Status GetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::seshat::GetProbabilitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetProbabilitiesResponse>> AsyncGetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetProbabilitiesResponse>>(AsyncGetProbabilitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetProbabilitiesResponse>> PrepareAsyncGetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetProbabilitiesResponse>>(PrepareAsyncGetProbabilitiesRaw(context, request, cq));
    }
    ::grpc::Status TestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::seshat::TestDistributionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::TestDistributionResponse>> AsyncTestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::TestDistributionResponse>>(AsyncTestDistributionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::TestDistributionResponse>> PrepareAsyncTestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::TestDistributionResponse>>(PrepareAsyncTestDistributionRaw(context, request, cq));
    }
    ::grpc::Status MergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::seshat::MergeTablesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::MergeTablesResponse>> AsyncMergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::MergeTablesResponse>>(AsyncMergeTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::MergeTablesResponse>> PrepareAsyncMergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::MergeTablesResponse>>(PrepareAsyncMergeTablesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest* request, ::seshat::CreateTableResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest* request, ::seshat::CreateTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest* request, ::seshat::AddItemResponse* response, std::function<void(::grpc::Status)>) override;
      void AddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest* request, ::seshat::AddItemResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest* request, ::seshat::RemoveItemResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest* request, ::seshat::RemoveItemResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest* request, ::seshat::UpdateWeightResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest* request, ::seshat::UpdateWeightResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Select(::grpc::ClientContext* context, const ::seshat::SelectRequest* request, ::seshat::SelectResponse* response, std::function<void(::grpc::Status)>) override;
      void Select(::grpc::ClientContext* context, const ::seshat::SelectRequest* request, ::seshat::SelectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest* request, ::seshat::SelectMultipleResponse* response, std::function<void(::grpc::Status)>) override;
      void SelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest* request, ::seshat::SelectMultipleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest* request, ::seshat::SelectWithContextResponse* response, std::function<void(::grpc::Status)>) override;
      void SelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest* request, ::seshat::SelectWithContextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest* request, ::seshat::GetTableResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest* request, ::seshat::GetTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest* request, ::seshat::ListTablesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest* request, ::seshat::ListTablesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest* request, ::seshat::DeleteTableResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest* request, ::seshat::DeleteTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest* request, ::seshat::CloneTableResponse* response, std::function<void(::grpc::Status)>) override;
      void CloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest* request, ::seshat::CloneTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest* request, ::seshat::GetProbabilitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest* request, ::seshat::GetProbabilitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest* request, ::seshat::TestDistributionResponse* response, std::function<void(::grpc::Status)>) override;
      void TestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest* request, ::seshat::TestDistributionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest* request, ::seshat::MergeTablesResponse* response, std::function<void(::grpc::Status)>) override;
      void MergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest* request, ::seshat::MergeTablesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::seshat::CreateTableResponse>* AsyncCreateTableRaw(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CreateTableResponse>* PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::AddItemResponse>* AsyncAddItemRaw(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::AddItemResponse>* PrepareAsyncAddItemRaw(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RemoveItemResponse>* AsyncRemoveItemRaw(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RemoveItemResponse>* PrepareAsyncRemoveItemRaw(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::UpdateWeightResponse>* AsyncUpdateWeightRaw(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::UpdateWeightResponse>* PrepareAsyncUpdateWeightRaw(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::SelectResponse>* AsyncSelectRaw(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::SelectResponse>* PrepareAsyncSelectRaw(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::SelectMultipleResponse>* AsyncSelectMultipleRaw(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::SelectMultipleResponse>* PrepareAsyncSelectMultipleRaw(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::SelectWithContextResponse>* AsyncSelectWithContextRaw(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::SelectWithContextResponse>* PrepareAsyncSelectWithContextRaw(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetTableResponse>* AsyncGetTableRaw(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetTableResponse>* PrepareAsyncGetTableRaw(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::ListTablesResponse>* AsyncListTablesRaw(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::ListTablesResponse>* PrepareAsyncListTablesRaw(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::DeleteTableResponse>* AsyncDeleteTableRaw(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::DeleteTableResponse>* PrepareAsyncDeleteTableRaw(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CloneTableResponse>* AsyncCloneTableRaw(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CloneTableResponse>* PrepareAsyncCloneTableRaw(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetProbabilitiesResponse>* AsyncGetProbabilitiesRaw(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetProbabilitiesResponse>* PrepareAsyncGetProbabilitiesRaw(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::TestDistributionResponse>* AsyncTestDistributionRaw(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::TestDistributionResponse>* PrepareAsyncTestDistributionRaw(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::MergeTablesResponse>* AsyncMergeTablesRaw(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::MergeTablesResponse>* PrepareAsyncMergeTablesRaw(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTable_;
    const ::grpc::internal::RpcMethod rpcmethod_AddItem_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveItem_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateWeight_;
    const ::grpc::internal::RpcMethod rpcmethod_Select_;
    const ::grpc::internal::RpcMethod rpcmethod_SelectMultiple_;
    const ::grpc::internal::RpcMethod rpcmethod_SelectWithContext_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTable_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTables_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTable_;
    const ::grpc::internal::RpcMethod rpcmethod_CloneTable_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProbabilities_;
    const ::grpc::internal::RpcMethod rpcmethod_TestDistribution_;
    const ::grpc::internal::RpcMethod rpcmethod_MergeTables_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Basic table operations
    virtual ::grpc::Status CreateTable(::grpc::ServerContext* context, const ::seshat::CreateTableRequest* request, ::seshat::CreateTableResponse* response);
    virtual ::grpc::Status AddItem(::grpc::ServerContext* context, const ::seshat::AddItemRequest* request, ::seshat::AddItemResponse* response);
    virtual ::grpc::Status RemoveItem(::grpc::ServerContext* context, const ::seshat::RemoveItemRequest* request, ::seshat::RemoveItemResponse* response);
    virtual ::grpc::Status UpdateWeight(::grpc::ServerContext* context, const ::seshat::UpdateWeightRequest* request, ::seshat::UpdateWeightResponse* response);
    // Selection operations
    virtual ::grpc::Status Select(::grpc::ServerContext* context, const ::seshat::SelectRequest* request, ::seshat::SelectResponse* response);
    virtual ::grpc::Status SelectMultiple(::grpc::ServerContext* context, const ::seshat::SelectMultipleRequest* request, ::seshat::SelectMultipleResponse* response);
    virtual ::grpc::Status SelectWithContext(::grpc::ServerContext* context, const ::seshat::SelectWithContextRequest* request, ::seshat::SelectWithContextResponse* response);
    // Table management
    virtual ::grpc::Status GetTable(::grpc::ServerContext* context, const ::seshat::GetTableRequest* request, ::seshat::GetTableResponse* response);
    virtual ::grpc::Status ListTables(::grpc::ServerContext* context, const ::seshat::ListTablesRequest* request, ::seshat::ListTablesResponse* response);
    virtual ::grpc::Status DeleteTable(::grpc::ServerContext* context, const ::seshat::DeleteTableRequest* request, ::seshat::DeleteTableResponse* response);
    virtual ::grpc::Status CloneTable(::grpc::ServerContext* context, const ::seshat::CloneTableRequest* request, ::seshat::CloneTableResponse* response);
    // Advanced operations
    virtual ::grpc::Status GetProbabilities(::grpc::ServerContext* context, const ::seshat::GetProbabilitiesRequest* request, ::seshat::GetProbabilitiesResponse* response);
    virtual ::grpc::Status TestDistribution(::grpc::ServerContext* context, const ::seshat::TestDistributionRequest* request, ::seshat::TestDistributionResponse* response);
    virtual ::grpc::Status MergeTables(::grpc::ServerContext* context, const ::seshat::MergeTablesRequest* request, ::seshat::MergeTablesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTable() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::seshat::CreateTableRequest* /*request*/, ::seshat::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTable(::grpc::ServerContext* context, ::seshat::CreateTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::CreateTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddItem() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::seshat::AddItemRequest* /*request*/, ::seshat::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddItem(::grpc::ServerContext* context, ::seshat::AddItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::AddItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveItem() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RemoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveItem(::grpc::ServerContext* /*context*/, const ::seshat::RemoveItemRequest* /*request*/, ::seshat::RemoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveItem(::grpc::ServerContext* context, ::seshat::RemoveItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::RemoveItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateWeight() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWeight(::grpc::ServerContext* /*context*/, const ::seshat::UpdateWeightRequest* /*request*/, ::seshat::UpdateWeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWeight(::grpc::ServerContext* context, ::seshat::UpdateWeightRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::UpdateWeightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Select() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::seshat::SelectRequest* /*request*/, ::seshat::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelect(::grpc::ServerContext* context, ::seshat::SelectRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::SelectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SelectMultiple() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SelectMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectMultiple(::grpc::ServerContext* /*context*/, const ::seshat::SelectMultipleRequest* /*request*/, ::seshat::SelectMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectMultiple(::grpc::ServerContext* context, ::seshat::SelectMultipleRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::SelectMultipleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectWithContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SelectWithContext() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SelectWithContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectWithContext(::grpc::ServerContext* /*context*/, const ::seshat::SelectWithContextRequest* /*request*/, ::seshat::SelectWithContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectWithContext(::grpc::ServerContext* context, ::seshat::SelectWithContextRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::SelectWithContextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTable() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::seshat::GetTableRequest* /*request*/, ::seshat::GetTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTable(::grpc::ServerContext* context, ::seshat::GetTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTables() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ListTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTables(::grpc::ServerContext* /*context*/, const ::seshat::ListTablesRequest* /*request*/, ::seshat::ListTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTables(::grpc::ServerContext* context, ::seshat::ListTablesRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::ListTablesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTable() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::seshat::DeleteTableRequest* /*request*/, ::seshat::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTable(::grpc::ServerContext* context, ::seshat::DeleteTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::DeleteTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloneTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloneTable() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CloneTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloneTable(::grpc::ServerContext* /*context*/, const ::seshat::CloneTableRequest* /*request*/, ::seshat::CloneTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloneTable(::grpc::ServerContext* context, ::seshat::CloneTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::CloneTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProbabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProbabilities() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetProbabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProbabilities(::grpc::ServerContext* /*context*/, const ::seshat::GetProbabilitiesRequest* /*request*/, ::seshat::GetProbabilitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProbabilities(::grpc::ServerContext* context, ::seshat::GetProbabilitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetProbabilitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestDistribution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestDistribution() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_TestDistribution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestDistribution(::grpc::ServerContext* /*context*/, const ::seshat::TestDistributionRequest* /*request*/, ::seshat::TestDistributionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestDistribution(::grpc::ServerContext* context, ::seshat::TestDistributionRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::TestDistributionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MergeTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MergeTables() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_MergeTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeTables(::grpc::ServerContext* /*context*/, const ::seshat::MergeTablesRequest* /*request*/, ::seshat::MergeTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMergeTables(::grpc::ServerContext* context, ::seshat::MergeTablesRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::MergeTablesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateTable<WithAsyncMethod_AddItem<WithAsyncMethod_RemoveItem<WithAsyncMethod_UpdateWeight<WithAsyncMethod_Select<WithAsyncMethod_SelectMultiple<WithAsyncMethod_SelectWithContext<WithAsyncMethod_GetTable<WithAsyncMethod_ListTables<WithAsyncMethod_DeleteTable<WithAsyncMethod_CloneTable<WithAsyncMethod_GetProbabilities<WithAsyncMethod_TestDistribution<WithAsyncMethod_MergeTables<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTable() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::CreateTableRequest, ::seshat::CreateTableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::CreateTableRequest* request, ::seshat::CreateTableResponse* response) { return this->CreateTable(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTable(
        ::grpc::MessageAllocator< ::seshat::CreateTableRequest, ::seshat::CreateTableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::CreateTableRequest, ::seshat::CreateTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::seshat::CreateTableRequest* /*request*/, ::seshat::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTable(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::CreateTableRequest* /*request*/, ::seshat::CreateTableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddItem() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::AddItemRequest, ::seshat::AddItemResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::AddItemRequest* request, ::seshat::AddItemResponse* response) { return this->AddItem(context, request, response); }));}
    void SetMessageAllocatorFor_AddItem(
        ::grpc::MessageAllocator< ::seshat::AddItemRequest, ::seshat::AddItemResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::AddItemRequest, ::seshat::AddItemResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::seshat::AddItemRequest* /*request*/, ::seshat::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddItem(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::AddItemRequest* /*request*/, ::seshat::AddItemResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveItem() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::RemoveItemRequest, ::seshat::RemoveItemResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::RemoveItemRequest* request, ::seshat::RemoveItemResponse* response) { return this->RemoveItem(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveItem(
        ::grpc::MessageAllocator< ::seshat::RemoveItemRequest, ::seshat::RemoveItemResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::RemoveItemRequest, ::seshat::RemoveItemResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveItem(::grpc::ServerContext* /*context*/, const ::seshat::RemoveItemRequest* /*request*/, ::seshat::RemoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveItem(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::RemoveItemRequest* /*request*/, ::seshat::RemoveItemResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateWeight() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::UpdateWeightRequest, ::seshat::UpdateWeightResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::UpdateWeightRequest* request, ::seshat::UpdateWeightResponse* response) { return this->UpdateWeight(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateWeight(
        ::grpc::MessageAllocator< ::seshat::UpdateWeightRequest, ::seshat::UpdateWeightResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::UpdateWeightRequest, ::seshat::UpdateWeightResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWeight(::grpc::ServerContext* /*context*/, const ::seshat::UpdateWeightRequest* /*request*/, ::seshat::UpdateWeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWeight(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::UpdateWeightRequest* /*request*/, ::seshat::UpdateWeightResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Select() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::SelectRequest, ::seshat::SelectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::SelectRequest* request, ::seshat::SelectResponse* response) { return this->Select(context, request, response); }));}
    void SetMessageAllocatorFor_Select(
        ::grpc::MessageAllocator< ::seshat::SelectRequest, ::seshat::SelectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::SelectRequest, ::seshat::SelectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::seshat::SelectRequest* /*request*/, ::seshat::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Select(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::SelectRequest* /*request*/, ::seshat::SelectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SelectMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SelectMultiple() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::SelectMultipleRequest, ::seshat::SelectMultipleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::SelectMultipleRequest* request, ::seshat::SelectMultipleResponse* response) { return this->SelectMultiple(context, request, response); }));}
    void SetMessageAllocatorFor_SelectMultiple(
        ::grpc::MessageAllocator< ::seshat::SelectMultipleRequest, ::seshat::SelectMultipleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::SelectMultipleRequest, ::seshat::SelectMultipleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SelectMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectMultiple(::grpc::ServerContext* /*context*/, const ::seshat::SelectMultipleRequest* /*request*/, ::seshat::SelectMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SelectMultiple(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::SelectMultipleRequest* /*request*/, ::seshat::SelectMultipleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SelectWithContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SelectWithContext() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::SelectWithContextRequest, ::seshat::SelectWithContextResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::SelectWithContextRequest* request, ::seshat::SelectWithContextResponse* response) { return this->SelectWithContext(context, request, response); }));}
    void SetMessageAllocatorFor_SelectWithContext(
        ::grpc::MessageAllocator< ::seshat::SelectWithContextRequest, ::seshat::SelectWithContextResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::SelectWithContextRequest, ::seshat::SelectWithContextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SelectWithContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectWithContext(::grpc::ServerContext* /*context*/, const ::seshat::SelectWithContextRequest* /*request*/, ::seshat::SelectWithContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SelectWithContext(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::SelectWithContextRequest* /*request*/, ::seshat::SelectWithContextResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTable() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetTableRequest, ::seshat::GetTableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetTableRequest* request, ::seshat::GetTableResponse* response) { return this->GetTable(context, request, response); }));}
    void SetMessageAllocatorFor_GetTable(
        ::grpc::MessageAllocator< ::seshat::GetTableRequest, ::seshat::GetTableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetTableRequest, ::seshat::GetTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::seshat::GetTableRequest* /*request*/, ::seshat::GetTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTable(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetTableRequest* /*request*/, ::seshat::GetTableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTables() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::ListTablesRequest, ::seshat::ListTablesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::ListTablesRequest* request, ::seshat::ListTablesResponse* response) { return this->ListTables(context, request, response); }));}
    void SetMessageAllocatorFor_ListTables(
        ::grpc::MessageAllocator< ::seshat::ListTablesRequest, ::seshat::ListTablesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::ListTablesRequest, ::seshat::ListTablesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTables(::grpc::ServerContext* /*context*/, const ::seshat::ListTablesRequest* /*request*/, ::seshat::ListTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTables(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::ListTablesRequest* /*request*/, ::seshat::ListTablesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteTable() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::DeleteTableRequest, ::seshat::DeleteTableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::DeleteTableRequest* request, ::seshat::DeleteTableResponse* response) { return this->DeleteTable(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTable(
        ::grpc::MessageAllocator< ::seshat::DeleteTableRequest, ::seshat::DeleteTableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::DeleteTableRequest, ::seshat::DeleteTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::seshat::DeleteTableRequest* /*request*/, ::seshat::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTable(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::DeleteTableRequest* /*request*/, ::seshat::DeleteTableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloneTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloneTable() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::CloneTableRequest, ::seshat::CloneTableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::CloneTableRequest* request, ::seshat::CloneTableResponse* response) { return this->CloneTable(context, request, response); }));}
    void SetMessageAllocatorFor_CloneTable(
        ::grpc::MessageAllocator< ::seshat::CloneTableRequest, ::seshat::CloneTableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::CloneTableRequest, ::seshat::CloneTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloneTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloneTable(::grpc::ServerContext* /*context*/, const ::seshat::CloneTableRequest* /*request*/, ::seshat::CloneTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloneTable(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::CloneTableRequest* /*request*/, ::seshat::CloneTableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProbabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProbabilities() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetProbabilitiesRequest, ::seshat::GetProbabilitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetProbabilitiesRequest* request, ::seshat::GetProbabilitiesResponse* response) { return this->GetProbabilities(context, request, response); }));}
    void SetMessageAllocatorFor_GetProbabilities(
        ::grpc::MessageAllocator< ::seshat::GetProbabilitiesRequest, ::seshat::GetProbabilitiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetProbabilitiesRequest, ::seshat::GetProbabilitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProbabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProbabilities(::grpc::ServerContext* /*context*/, const ::seshat::GetProbabilitiesRequest* /*request*/, ::seshat::GetProbabilitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProbabilities(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetProbabilitiesRequest* /*request*/, ::seshat::GetProbabilitiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TestDistribution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TestDistribution() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::TestDistributionRequest, ::seshat::TestDistributionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::TestDistributionRequest* request, ::seshat::TestDistributionResponse* response) { return this->TestDistribution(context, request, response); }));}
    void SetMessageAllocatorFor_TestDistribution(
        ::grpc::MessageAllocator< ::seshat::TestDistributionRequest, ::seshat::TestDistributionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::TestDistributionRequest, ::seshat::TestDistributionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TestDistribution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestDistribution(::grpc::ServerContext* /*context*/, const ::seshat::TestDistributionRequest* /*request*/, ::seshat::TestDistributionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestDistribution(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::TestDistributionRequest* /*request*/, ::seshat::TestDistributionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MergeTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MergeTables() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::MergeTablesRequest, ::seshat::MergeTablesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::MergeTablesRequest* request, ::seshat::MergeTablesResponse* response) { return this->MergeTables(context, request, response); }));}
    void SetMessageAllocatorFor_MergeTables(
        ::grpc::MessageAllocator< ::seshat::MergeTablesRequest, ::seshat::MergeTablesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::MergeTablesRequest, ::seshat::MergeTablesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MergeTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeTables(::grpc::ServerContext* /*context*/, const ::seshat::MergeTablesRequest* /*request*/, ::seshat::MergeTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MergeTables(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::MergeTablesRequest* /*request*/, ::seshat::MergeTablesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateTable<WithCallbackMethod_AddItem<WithCallbackMethod_RemoveItem<WithCallbackMethod_UpdateWeight<WithCallbackMethod_Select<WithCallbackMethod_SelectMultiple<WithCallbackMethod_SelectWithContext<WithCallbackMethod_GetTable<WithCallbackMethod_ListTables<WithCallbackMethod_DeleteTable<WithCallbackMethod_CloneTable<WithCallbackMethod_GetProbabilities<WithCallbackMethod_TestDistribution<WithCallbackMethod_MergeTables<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTable() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::seshat::CreateTableRequest* /*request*/, ::seshat::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddItem() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::seshat::AddItemRequest* /*request*/, ::seshat::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveItem() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RemoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveItem(::grpc::ServerContext* /*context*/, const ::seshat::RemoveItemRequest* /*request*/, ::seshat::RemoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateWeight() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWeight(::grpc::ServerContext* /*context*/, const ::seshat::UpdateWeightRequest* /*request*/, ::seshat::UpdateWeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Select() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::seshat::SelectRequest* /*request*/, ::seshat::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SelectMultiple() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SelectMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectMultiple(::grpc::ServerContext* /*context*/, const ::seshat::SelectMultipleRequest* /*request*/, ::seshat::SelectMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectWithContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SelectWithContext() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SelectWithContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectWithContext(::grpc::ServerContext* /*context*/, const ::seshat::SelectWithContextRequest* /*request*/, ::seshat::SelectWithContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTable() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::seshat::GetTableRequest* /*request*/, ::seshat::GetTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTables() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ListTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTables(::grpc::ServerContext* /*context*/, const ::seshat::ListTablesRequest* /*request*/, ::seshat::ListTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTable() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::seshat::DeleteTableRequest* /*request*/, ::seshat::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloneTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloneTable() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CloneTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloneTable(::grpc::ServerContext* /*context*/, const ::seshat::CloneTableRequest* /*request*/, ::seshat::CloneTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProbabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProbabilities() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetProbabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProbabilities(::grpc::ServerContext* /*context*/, const ::seshat::GetProbabilitiesRequest* /*request*/, ::seshat::GetProbabilitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestDistribution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestDistribution() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_TestDistribution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestDistribution(::grpc::ServerContext* /*context*/, const ::seshat::TestDistributionRequest* /*request*/, ::seshat::TestDistributionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MergeTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MergeTables() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_MergeTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeTables(::grpc::ServerContext* /*context*/, const ::seshat::MergeTablesRequest* /*request*/, ::seshat::MergeTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTable() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::seshat::CreateTableRequest* /*request*/, ::seshat::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddItem() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::seshat::AddItemRequest* /*request*/, ::seshat::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveItem() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RemoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveItem(::grpc::ServerContext* /*context*/, const ::seshat::RemoveItemRequest* /*request*/, ::seshat::RemoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateWeight() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWeight(::grpc::ServerContext* /*context*/, const ::seshat::UpdateWeightRequest* /*request*/, ::seshat::UpdateWeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWeight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Select() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::seshat::SelectRequest* /*request*/, ::seshat::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SelectMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SelectMultiple() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SelectMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectMultiple(::grpc::ServerContext* /*context*/, const ::seshat::SelectMultipleRequest* /*request*/, ::seshat::SelectMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectMultiple(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SelectWithContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SelectWithContext() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SelectWithContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectWithContext(::grpc::ServerContext* /*context*/, const ::seshat::SelectWithContextRequest* /*request*/, ::seshat::SelectWithContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectWithContext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTable() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::seshat::GetTableRequest* /*request*/, ::seshat::GetTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTables() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ListTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTables(::grpc::ServerContext* /*context*/, const ::seshat::ListTablesRequest* /*request*/, ::seshat::ListTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTables(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTable() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::seshat::DeleteTableRequest* /*request*/, ::seshat::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloneTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloneTable() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CloneTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloneTable(::grpc::ServerContext* /*context*/, const ::seshat::CloneTableRequest* /*request*/, ::seshat::CloneTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloneTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProbabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProbabilities() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetProbabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProbabilities(::grpc::ServerContext* /*context*/, const ::seshat::GetProbabilitiesRequest* /*request*/, ::seshat::GetProbabilitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProbabilities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestDistribution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestDistribution() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_TestDistribution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestDistribution(::grpc::ServerContext* /*context*/, const ::seshat::TestDistributionRequest* /*request*/, ::seshat::TestDistributionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestDistribution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MergeTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MergeTables() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_MergeTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeTables(::grpc::ServerContext* /*context*/, const ::seshat::MergeTablesRequest* /*request*/, ::seshat::MergeTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMergeTables(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTable() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTable(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::seshat::CreateTableRequest* /*request*/, ::seshat::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddItem() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::seshat::AddItemRequest* /*request*/, ::seshat::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveItem() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveItem(::grpc::ServerContext* /*context*/, const ::seshat::RemoveItemRequest* /*request*/, ::seshat::RemoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateWeight() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateWeight(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWeight(::grpc::ServerContext* /*context*/, const ::seshat::UpdateWeightRequest* /*request*/, ::seshat::UpdateWeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWeight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Select() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Select(context, request, response); }));
    }
    ~WithRawCallbackMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::seshat::SelectRequest* /*request*/, ::seshat::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Select(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SelectMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SelectMultiple() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SelectMultiple(context, request, response); }));
    }
    ~WithRawCallbackMethod_SelectMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectMultiple(::grpc::ServerContext* /*context*/, const ::seshat::SelectMultipleRequest* /*request*/, ::seshat::SelectMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SelectMultiple(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SelectWithContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SelectWithContext() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SelectWithContext(context, request, response); }));
    }
    ~WithRawCallbackMethod_SelectWithContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectWithContext(::grpc::ServerContext* /*context*/, const ::seshat::SelectWithContextRequest* /*request*/, ::seshat::SelectWithContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SelectWithContext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTable() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTable(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::seshat::GetTableRequest* /*request*/, ::seshat::GetTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTables() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTables(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTables(::grpc::ServerContext* /*context*/, const ::seshat::ListTablesRequest* /*request*/, ::seshat::ListTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTables(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteTable() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTable(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::seshat::DeleteTableRequest* /*request*/, ::seshat::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloneTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloneTable() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloneTable(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloneTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloneTable(::grpc::ServerContext* /*context*/, const ::seshat::CloneTableRequest* /*request*/, ::seshat::CloneTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloneTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProbabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProbabilities() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProbabilities(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProbabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProbabilities(::grpc::ServerContext* /*context*/, const ::seshat::GetProbabilitiesRequest* /*request*/, ::seshat::GetProbabilitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProbabilities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TestDistribution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TestDistribution() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestDistribution(context, request, response); }));
    }
    ~WithRawCallbackMethod_TestDistribution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestDistribution(::grpc::ServerContext* /*context*/, const ::seshat::TestDistributionRequest* /*request*/, ::seshat::TestDistributionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestDistribution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MergeTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MergeTables() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MergeTables(context, request, response); }));
    }
    ~WithRawCallbackMethod_MergeTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeTables(::grpc::ServerContext* /*context*/, const ::seshat::MergeTablesRequest* /*request*/, ::seshat::MergeTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MergeTables(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTable() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::CreateTableRequest, ::seshat::CreateTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::CreateTableRequest, ::seshat::CreateTableResponse>* streamer) {
                       return this->StreamedCreateTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTable(::grpc::ServerContext* /*context*/, const ::seshat::CreateTableRequest* /*request*/, ::seshat::CreateTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::CreateTableRequest,::seshat::CreateTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddItem() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::AddItemRequest, ::seshat::AddItemResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::AddItemRequest, ::seshat::AddItemResponse>* streamer) {
                       return this->StreamedAddItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::seshat::AddItemRequest* /*request*/, ::seshat::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::AddItemRequest,::seshat::AddItemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveItem() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::RemoveItemRequest, ::seshat::RemoveItemResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::RemoveItemRequest, ::seshat::RemoveItemResponse>* streamer) {
                       return this->StreamedRemoveItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveItem(::grpc::ServerContext* /*context*/, const ::seshat::RemoveItemRequest* /*request*/, ::seshat::RemoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::RemoveItemRequest,::seshat::RemoveItemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateWeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateWeight() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::UpdateWeightRequest, ::seshat::UpdateWeightResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::UpdateWeightRequest, ::seshat::UpdateWeightResponse>* streamer) {
                       return this->StreamedUpdateWeight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateWeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateWeight(::grpc::ServerContext* /*context*/, const ::seshat::UpdateWeightRequest* /*request*/, ::seshat::UpdateWeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateWeight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::UpdateWeightRequest,::seshat::UpdateWeightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Select() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::SelectRequest, ::seshat::SelectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::SelectRequest, ::seshat::SelectResponse>* streamer) {
                       return this->StreamedSelect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::seshat::SelectRequest* /*request*/, ::seshat::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::SelectRequest,::seshat::SelectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SelectMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SelectMultiple() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::SelectMultipleRequest, ::seshat::SelectMultipleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::SelectMultipleRequest, ::seshat::SelectMultipleResponse>* streamer) {
                       return this->StreamedSelectMultiple(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SelectMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SelectMultiple(::grpc::ServerContext* /*context*/, const ::seshat::SelectMultipleRequest* /*request*/, ::seshat::SelectMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelectMultiple(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::SelectMultipleRequest,::seshat::SelectMultipleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SelectWithContext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SelectWithContext() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::SelectWithContextRequest, ::seshat::SelectWithContextResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::SelectWithContextRequest, ::seshat::SelectWithContextResponse>* streamer) {
                       return this->StreamedSelectWithContext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SelectWithContext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SelectWithContext(::grpc::ServerContext* /*context*/, const ::seshat::SelectWithContextRequest* /*request*/, ::seshat::SelectWithContextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelectWithContext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::SelectWithContextRequest,::seshat::SelectWithContextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTable() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetTableRequest, ::seshat::GetTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetTableRequest, ::seshat::GetTableResponse>* streamer) {
                       return this->StreamedGetTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::seshat::GetTableRequest* /*request*/, ::seshat::GetTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetTableRequest,::seshat::GetTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTables() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::ListTablesRequest, ::seshat::ListTablesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::ListTablesRequest, ::seshat::ListTablesResponse>* streamer) {
                       return this->StreamedListTables(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTables(::grpc::ServerContext* /*context*/, const ::seshat::ListTablesRequest* /*request*/, ::seshat::ListTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::ListTablesRequest,::seshat::ListTablesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTable() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::DeleteTableRequest, ::seshat::DeleteTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::DeleteTableRequest, ::seshat::DeleteTableResponse>* streamer) {
                       return this->StreamedDeleteTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTable(::grpc::ServerContext* /*context*/, const ::seshat::DeleteTableRequest* /*request*/, ::seshat::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::DeleteTableRequest,::seshat::DeleteTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloneTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloneTable() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::CloneTableRequest, ::seshat::CloneTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::CloneTableRequest, ::seshat::CloneTableResponse>* streamer) {
                       return this->StreamedCloneTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloneTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloneTable(::grpc::ServerContext* /*context*/, const ::seshat::CloneTableRequest* /*request*/, ::seshat::CloneTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloneTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::CloneTableRequest,::seshat::CloneTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProbabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProbabilities() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetProbabilitiesRequest, ::seshat::GetProbabilitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetProbabilitiesRequest, ::seshat::GetProbabilitiesResponse>* streamer) {
                       return this->StreamedGetProbabilities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProbabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProbabilities(::grpc::ServerContext* /*context*/, const ::seshat::GetProbabilitiesRequest* /*request*/, ::seshat::GetProbabilitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProbabilities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetProbabilitiesRequest,::seshat::GetProbabilitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestDistribution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestDistribution() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::TestDistributionRequest, ::seshat::TestDistributionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::TestDistributionRequest, ::seshat::TestDistributionResponse>* streamer) {
                       return this->StreamedTestDistribution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TestDistribution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestDistribution(::grpc::ServerContext* /*context*/, const ::seshat::TestDistributionRequest* /*request*/, ::seshat::TestDistributionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestDistribution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::TestDistributionRequest,::seshat::TestDistributionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MergeTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MergeTables() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::MergeTablesRequest, ::seshat::MergeTablesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::MergeTablesRequest, ::seshat::MergeTablesResponse>* streamer) {
                       return this->StreamedMergeTables(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MergeTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MergeTables(::grpc::ServerContext* /*context*/, const ::seshat::MergeTablesRequest* /*request*/, ::seshat::MergeTablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMergeTables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::MergeTablesRequest,::seshat::MergeTablesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateTable<WithStreamedUnaryMethod_AddItem<WithStreamedUnaryMethod_RemoveItem<WithStreamedUnaryMethod_UpdateWeight<WithStreamedUnaryMethod_Select<WithStreamedUnaryMethod_SelectMultiple<WithStreamedUnaryMethod_SelectWithContext<WithStreamedUnaryMethod_GetTable<WithStreamedUnaryMethod_ListTables<WithStreamedUnaryMethod_DeleteTable<WithStreamedUnaryMethod_CloneTable<WithStreamedUnaryMethod_GetProbabilities<WithStreamedUnaryMethod_TestDistribution<WithStreamedUnaryMethod_MergeTables<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateTable<WithStreamedUnaryMethod_AddItem<WithStreamedUnaryMethod_RemoveItem<WithStreamedUnaryMethod_UpdateWeight<WithStreamedUnaryMethod_Select<WithStreamedUnaryMethod_SelectMultiple<WithStreamedUnaryMethod_SelectWithContext<WithStreamedUnaryMethod_GetTable<WithStreamedUnaryMethod_ListTables<WithStreamedUnaryMethod_DeleteTable<WithStreamedUnaryMethod_CloneTable<WithStreamedUnaryMethod_GetProbabilities<WithStreamedUnaryMethod_TestDistribution<WithStreamedUnaryMethod_MergeTables<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace seshat


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_seshat_2fselectables_2eproto__INCLUDED

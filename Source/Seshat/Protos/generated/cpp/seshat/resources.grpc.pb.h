// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/resources.proto
#ifndef GRPC_seshat_2fresources_2eproto__INCLUDED
#define GRPC_seshat_2fresources_2eproto__INCLUDED

#include "seshat/resources.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace seshat {

// Resource management service - exposes all resources toolkit functionality
class ResourceService final {
 public:
  static constexpr char const* service_full_name() {
    return "seshat.ResourceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Resource pool management
    virtual ::grpc::Status CreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::seshat::CreateResourcePoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourcePoolResponse>> AsyncCreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourcePoolResponse>>(AsyncCreateResourcePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourcePoolResponse>> PrepareAsyncCreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourcePoolResponse>>(PrepareAsyncCreateResourcePoolRaw(context, request, cq));
    }
    virtual ::grpc::Status GetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::seshat::GetResourcePoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourcePoolResponse>> AsyncGetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourcePoolResponse>>(AsyncGetResourcePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourcePoolResponse>> PrepareAsyncGetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourcePoolResponse>>(PrepareAsyncGetResourcePoolRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::seshat::UpdateResourcePoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateResourcePoolResponse>> AsyncUpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateResourcePoolResponse>>(AsyncUpdateResourcePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateResourcePoolResponse>> PrepareAsyncUpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateResourcePoolResponse>>(PrepareAsyncUpdateResourcePoolRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::seshat::DeleteResourcePoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteResourcePoolResponse>> AsyncDeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteResourcePoolResponse>>(AsyncDeleteResourcePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteResourcePoolResponse>> PrepareAsyncDeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteResourcePoolResponse>>(PrepareAsyncDeleteResourcePoolRaw(context, request, cq));
    }
    // Resource operations
    virtual ::grpc::Status ConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::seshat::ConsumeResourceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeResourceResponse>> AsyncConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeResourceResponse>>(AsyncConsumeResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeResourceResponse>> PrepareAsyncConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeResourceResponse>>(PrepareAsyncConsumeResourceRaw(context, request, cq));
    }
    virtual ::grpc::Status RestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::seshat::RestoreResourceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreResourceResponse>> AsyncRestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreResourceResponse>>(AsyncRestoreResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreResourceResponse>> PrepareAsyncRestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreResourceResponse>>(PrepareAsyncRestoreResourceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::seshat::GetResourceStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceStatusResponse>> AsyncGetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceStatusResponse>>(AsyncGetResourceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceStatusResponse>> PrepareAsyncGetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceStatusResponse>>(PrepareAsyncGetResourceStatusRaw(context, request, cq));
    }
    // Batch operations
    virtual ::grpc::Status ConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::seshat::ConsumeMultipleResourcesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeMultipleResourcesResponse>> AsyncConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeMultipleResourcesResponse>>(AsyncConsumeMultipleResourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeMultipleResourcesResponse>> PrepareAsyncConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeMultipleResourcesResponse>>(PrepareAsyncConsumeMultipleResourcesRaw(context, request, cq));
    }
    virtual ::grpc::Status RestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::seshat::RestoreAllResourcesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreAllResourcesResponse>> AsyncRestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreAllResourcesResponse>>(AsyncRestoreAllResourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreAllResourcesResponse>> PrepareAsyncRestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreAllResourcesResponse>>(PrepareAsyncRestoreAllResourcesRaw(context, request, cq));
    }
    // Resource restoration triggers
    virtual ::grpc::Status TriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::seshat::TriggerRestorationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TriggerRestorationResponse>> AsyncTriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TriggerRestorationResponse>>(AsyncTriggerRestorationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TriggerRestorationResponse>> PrepareAsyncTriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TriggerRestorationResponse>>(PrepareAsyncTriggerRestorationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::seshat::GetRestorationTriggersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetRestorationTriggersResponse>> AsyncGetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetRestorationTriggersResponse>>(AsyncGetRestorationTriggersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetRestorationTriggersResponse>> PrepareAsyncGetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetRestorationTriggersResponse>>(PrepareAsyncGetRestorationTriggersRaw(context, request, cq));
    }
    // Resource monitoring
    virtual ::grpc::Status GetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::seshat::GetResourceHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceHistoryResponse>> AsyncGetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceHistoryResponse>>(AsyncGetResourceHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceHistoryResponse>> PrepareAsyncGetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceHistoryResponse>>(PrepareAsyncGetResourceHistoryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::seshat::GetLowResourceAlertsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetLowResourceAlertsResponse>> AsyncGetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetLowResourceAlertsResponse>>(AsyncGetLowResourceAlertsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetLowResourceAlertsResponse>> PrepareAsyncGetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetLowResourceAlertsResponse>>(PrepareAsyncGetLowResourceAlertsRaw(context, request, cq));
    }
    // Templates and presets
    virtual ::grpc::Status GetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::seshat::GetResourceTemplatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceTemplatesResponse>> AsyncGetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceTemplatesResponse>>(AsyncGetResourceTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceTemplatesResponse>> PrepareAsyncGetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceTemplatesResponse>>(PrepareAsyncGetResourceTemplatesRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::seshat::CreateResourceTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourceTemplateResponse>> AsyncCreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourceTemplateResponse>>(AsyncCreateResourceTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourceTemplateResponse>> PrepareAsyncCreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourceTemplateResponse>>(PrepareAsyncCreateResourceTemplateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Resource pool management
      virtual void CreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest* request, ::seshat::CreateResourcePoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest* request, ::seshat::CreateResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest* request, ::seshat::GetResourcePoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest* request, ::seshat::GetResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest* request, ::seshat::UpdateResourcePoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest* request, ::seshat::UpdateResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest* request, ::seshat::DeleteResourcePoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest* request, ::seshat::DeleteResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Resource operations
      virtual void ConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest* request, ::seshat::ConsumeResourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest* request, ::seshat::ConsumeResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest* request, ::seshat::RestoreResourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest* request, ::seshat::RestoreResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest* request, ::seshat::GetResourceStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest* request, ::seshat::GetResourceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Batch operations
      virtual void ConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest* request, ::seshat::ConsumeMultipleResourcesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest* request, ::seshat::ConsumeMultipleResourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest* request, ::seshat::RestoreAllResourcesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest* request, ::seshat::RestoreAllResourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Resource restoration triggers
      virtual void TriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest* request, ::seshat::TriggerRestorationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest* request, ::seshat::TriggerRestorationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest* request, ::seshat::GetRestorationTriggersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest* request, ::seshat::GetRestorationTriggersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Resource monitoring
      virtual void GetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest* request, ::seshat::GetResourceHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest* request, ::seshat::GetResourceHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest* request, ::seshat::GetLowResourceAlertsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest* request, ::seshat::GetLowResourceAlertsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Templates and presets
      virtual void GetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest* request, ::seshat::GetResourceTemplatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest* request, ::seshat::GetResourceTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest* request, ::seshat::CreateResourceTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest* request, ::seshat::CreateResourceTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourcePoolResponse>* AsyncCreateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourcePoolResponse>* PrepareAsyncCreateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourcePoolResponse>* AsyncGetResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourcePoolResponse>* PrepareAsyncGetResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateResourcePoolResponse>* AsyncUpdateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateResourcePoolResponse>* PrepareAsyncUpdateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteResourcePoolResponse>* AsyncDeleteResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::DeleteResourcePoolResponse>* PrepareAsyncDeleteResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeResourceResponse>* AsyncConsumeResourceRaw(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeResourceResponse>* PrepareAsyncConsumeResourceRaw(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreResourceResponse>* AsyncRestoreResourceRaw(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreResourceResponse>* PrepareAsyncRestoreResourceRaw(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceStatusResponse>* AsyncGetResourceStatusRaw(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceStatusResponse>* PrepareAsyncGetResourceStatusRaw(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeMultipleResourcesResponse>* AsyncConsumeMultipleResourcesRaw(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ConsumeMultipleResourcesResponse>* PrepareAsyncConsumeMultipleResourcesRaw(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreAllResourcesResponse>* AsyncRestoreAllResourcesRaw(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RestoreAllResourcesResponse>* PrepareAsyncRestoreAllResourcesRaw(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TriggerRestorationResponse>* AsyncTriggerRestorationRaw(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::TriggerRestorationResponse>* PrepareAsyncTriggerRestorationRaw(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetRestorationTriggersResponse>* AsyncGetRestorationTriggersRaw(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetRestorationTriggersResponse>* PrepareAsyncGetRestorationTriggersRaw(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceHistoryResponse>* AsyncGetResourceHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceHistoryResponse>* PrepareAsyncGetResourceHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetLowResourceAlertsResponse>* AsyncGetLowResourceAlertsRaw(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetLowResourceAlertsResponse>* PrepareAsyncGetLowResourceAlertsRaw(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceTemplatesResponse>* AsyncGetResourceTemplatesRaw(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetResourceTemplatesResponse>* PrepareAsyncGetResourceTemplatesRaw(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourceTemplateResponse>* AsyncCreateResourceTemplateRaw(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateResourceTemplateResponse>* PrepareAsyncCreateResourceTemplateRaw(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::seshat::CreateResourcePoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourcePoolResponse>> AsyncCreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourcePoolResponse>>(AsyncCreateResourcePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourcePoolResponse>> PrepareAsyncCreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourcePoolResponse>>(PrepareAsyncCreateResourcePoolRaw(context, request, cq));
    }
    ::grpc::Status GetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::seshat::GetResourcePoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourcePoolResponse>> AsyncGetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourcePoolResponse>>(AsyncGetResourcePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourcePoolResponse>> PrepareAsyncGetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourcePoolResponse>>(PrepareAsyncGetResourcePoolRaw(context, request, cq));
    }
    ::grpc::Status UpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::seshat::UpdateResourcePoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateResourcePoolResponse>> AsyncUpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateResourcePoolResponse>>(AsyncUpdateResourcePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateResourcePoolResponse>> PrepareAsyncUpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateResourcePoolResponse>>(PrepareAsyncUpdateResourcePoolRaw(context, request, cq));
    }
    ::grpc::Status DeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::seshat::DeleteResourcePoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::DeleteResourcePoolResponse>> AsyncDeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::DeleteResourcePoolResponse>>(AsyncDeleteResourcePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::DeleteResourcePoolResponse>> PrepareAsyncDeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::DeleteResourcePoolResponse>>(PrepareAsyncDeleteResourcePoolRaw(context, request, cq));
    }
    ::grpc::Status ConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::seshat::ConsumeResourceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeResourceResponse>> AsyncConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeResourceResponse>>(AsyncConsumeResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeResourceResponse>> PrepareAsyncConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeResourceResponse>>(PrepareAsyncConsumeResourceRaw(context, request, cq));
    }
    ::grpc::Status RestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::seshat::RestoreResourceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RestoreResourceResponse>> AsyncRestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RestoreResourceResponse>>(AsyncRestoreResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RestoreResourceResponse>> PrepareAsyncRestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RestoreResourceResponse>>(PrepareAsyncRestoreResourceRaw(context, request, cq));
    }
    ::grpc::Status GetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::seshat::GetResourceStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceStatusResponse>> AsyncGetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceStatusResponse>>(AsyncGetResourceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceStatusResponse>> PrepareAsyncGetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceStatusResponse>>(PrepareAsyncGetResourceStatusRaw(context, request, cq));
    }
    ::grpc::Status ConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::seshat::ConsumeMultipleResourcesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeMultipleResourcesResponse>> AsyncConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeMultipleResourcesResponse>>(AsyncConsumeMultipleResourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeMultipleResourcesResponse>> PrepareAsyncConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeMultipleResourcesResponse>>(PrepareAsyncConsumeMultipleResourcesRaw(context, request, cq));
    }
    ::grpc::Status RestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::seshat::RestoreAllResourcesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RestoreAllResourcesResponse>> AsyncRestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RestoreAllResourcesResponse>>(AsyncRestoreAllResourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RestoreAllResourcesResponse>> PrepareAsyncRestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RestoreAllResourcesResponse>>(PrepareAsyncRestoreAllResourcesRaw(context, request, cq));
    }
    ::grpc::Status TriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::seshat::TriggerRestorationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::TriggerRestorationResponse>> AsyncTriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::TriggerRestorationResponse>>(AsyncTriggerRestorationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::TriggerRestorationResponse>> PrepareAsyncTriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::TriggerRestorationResponse>>(PrepareAsyncTriggerRestorationRaw(context, request, cq));
    }
    ::grpc::Status GetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::seshat::GetRestorationTriggersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetRestorationTriggersResponse>> AsyncGetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetRestorationTriggersResponse>>(AsyncGetRestorationTriggersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetRestorationTriggersResponse>> PrepareAsyncGetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetRestorationTriggersResponse>>(PrepareAsyncGetRestorationTriggersRaw(context, request, cq));
    }
    ::grpc::Status GetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::seshat::GetResourceHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceHistoryResponse>> AsyncGetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceHistoryResponse>>(AsyncGetResourceHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceHistoryResponse>> PrepareAsyncGetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceHistoryResponse>>(PrepareAsyncGetResourceHistoryRaw(context, request, cq));
    }
    ::grpc::Status GetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::seshat::GetLowResourceAlertsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetLowResourceAlertsResponse>> AsyncGetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetLowResourceAlertsResponse>>(AsyncGetLowResourceAlertsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetLowResourceAlertsResponse>> PrepareAsyncGetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetLowResourceAlertsResponse>>(PrepareAsyncGetLowResourceAlertsRaw(context, request, cq));
    }
    ::grpc::Status GetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::seshat::GetResourceTemplatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceTemplatesResponse>> AsyncGetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceTemplatesResponse>>(AsyncGetResourceTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceTemplatesResponse>> PrepareAsyncGetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceTemplatesResponse>>(PrepareAsyncGetResourceTemplatesRaw(context, request, cq));
    }
    ::grpc::Status CreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::seshat::CreateResourceTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourceTemplateResponse>> AsyncCreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourceTemplateResponse>>(AsyncCreateResourceTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourceTemplateResponse>> PrepareAsyncCreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourceTemplateResponse>>(PrepareAsyncCreateResourceTemplateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest* request, ::seshat::CreateResourcePoolResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest* request, ::seshat::CreateResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest* request, ::seshat::GetResourcePoolResponse* response, std::function<void(::grpc::Status)>) override;
      void GetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest* request, ::seshat::GetResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest* request, ::seshat::UpdateResourcePoolResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest* request, ::seshat::UpdateResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest* request, ::seshat::DeleteResourcePoolResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest* request, ::seshat::DeleteResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest* request, ::seshat::ConsumeResourceResponse* response, std::function<void(::grpc::Status)>) override;
      void ConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest* request, ::seshat::ConsumeResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest* request, ::seshat::RestoreResourceResponse* response, std::function<void(::grpc::Status)>) override;
      void RestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest* request, ::seshat::RestoreResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest* request, ::seshat::GetResourceStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest* request, ::seshat::GetResourceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest* request, ::seshat::ConsumeMultipleResourcesResponse* response, std::function<void(::grpc::Status)>) override;
      void ConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest* request, ::seshat::ConsumeMultipleResourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest* request, ::seshat::RestoreAllResourcesResponse* response, std::function<void(::grpc::Status)>) override;
      void RestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest* request, ::seshat::RestoreAllResourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest* request, ::seshat::TriggerRestorationResponse* response, std::function<void(::grpc::Status)>) override;
      void TriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest* request, ::seshat::TriggerRestorationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest* request, ::seshat::GetRestorationTriggersResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest* request, ::seshat::GetRestorationTriggersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest* request, ::seshat::GetResourceHistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest* request, ::seshat::GetResourceHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest* request, ::seshat::GetLowResourceAlertsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest* request, ::seshat::GetLowResourceAlertsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest* request, ::seshat::GetResourceTemplatesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest* request, ::seshat::GetResourceTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest* request, ::seshat::CreateResourceTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest* request, ::seshat::CreateResourceTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourcePoolResponse>* AsyncCreateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourcePoolResponse>* PrepareAsyncCreateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetResourcePoolResponse>* AsyncGetResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetResourcePoolResponse>* PrepareAsyncGetResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::UpdateResourcePoolResponse>* AsyncUpdateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::UpdateResourcePoolResponse>* PrepareAsyncUpdateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::DeleteResourcePoolResponse>* AsyncDeleteResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::DeleteResourcePoolResponse>* PrepareAsyncDeleteResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeResourceResponse>* AsyncConsumeResourceRaw(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeResourceResponse>* PrepareAsyncConsumeResourceRaw(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RestoreResourceResponse>* AsyncRestoreResourceRaw(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RestoreResourceResponse>* PrepareAsyncRestoreResourceRaw(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceStatusResponse>* AsyncGetResourceStatusRaw(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceStatusResponse>* PrepareAsyncGetResourceStatusRaw(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeMultipleResourcesResponse>* AsyncConsumeMultipleResourcesRaw(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::ConsumeMultipleResourcesResponse>* PrepareAsyncConsumeMultipleResourcesRaw(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RestoreAllResourcesResponse>* AsyncRestoreAllResourcesRaw(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RestoreAllResourcesResponse>* PrepareAsyncRestoreAllResourcesRaw(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::TriggerRestorationResponse>* AsyncTriggerRestorationRaw(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::TriggerRestorationResponse>* PrepareAsyncTriggerRestorationRaw(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetRestorationTriggersResponse>* AsyncGetRestorationTriggersRaw(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetRestorationTriggersResponse>* PrepareAsyncGetRestorationTriggersRaw(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceHistoryResponse>* AsyncGetResourceHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceHistoryResponse>* PrepareAsyncGetResourceHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetLowResourceAlertsResponse>* AsyncGetLowResourceAlertsRaw(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetLowResourceAlertsResponse>* PrepareAsyncGetLowResourceAlertsRaw(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceTemplatesResponse>* AsyncGetResourceTemplatesRaw(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetResourceTemplatesResponse>* PrepareAsyncGetResourceTemplatesRaw(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourceTemplateResponse>* AsyncCreateResourceTemplateRaw(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CreateResourceTemplateResponse>* PrepareAsyncCreateResourceTemplateRaw(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateResourcePool_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResourcePool_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateResourcePool_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteResourcePool_;
    const ::grpc::internal::RpcMethod rpcmethod_ConsumeResource_;
    const ::grpc::internal::RpcMethod rpcmethod_RestoreResource_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResourceStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_ConsumeMultipleResources_;
    const ::grpc::internal::RpcMethod rpcmethod_RestoreAllResources_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerRestoration_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRestorationTriggers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResourceHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLowResourceAlerts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResourceTemplates_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateResourceTemplate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Resource pool management
    virtual ::grpc::Status CreateResourcePool(::grpc::ServerContext* context, const ::seshat::CreateResourcePoolRequest* request, ::seshat::CreateResourcePoolResponse* response);
    virtual ::grpc::Status GetResourcePool(::grpc::ServerContext* context, const ::seshat::GetResourcePoolRequest* request, ::seshat::GetResourcePoolResponse* response);
    virtual ::grpc::Status UpdateResourcePool(::grpc::ServerContext* context, const ::seshat::UpdateResourcePoolRequest* request, ::seshat::UpdateResourcePoolResponse* response);
    virtual ::grpc::Status DeleteResourcePool(::grpc::ServerContext* context, const ::seshat::DeleteResourcePoolRequest* request, ::seshat::DeleteResourcePoolResponse* response);
    // Resource operations
    virtual ::grpc::Status ConsumeResource(::grpc::ServerContext* context, const ::seshat::ConsumeResourceRequest* request, ::seshat::ConsumeResourceResponse* response);
    virtual ::grpc::Status RestoreResource(::grpc::ServerContext* context, const ::seshat::RestoreResourceRequest* request, ::seshat::RestoreResourceResponse* response);
    virtual ::grpc::Status GetResourceStatus(::grpc::ServerContext* context, const ::seshat::GetResourceStatusRequest* request, ::seshat::GetResourceStatusResponse* response);
    // Batch operations
    virtual ::grpc::Status ConsumeMultipleResources(::grpc::ServerContext* context, const ::seshat::ConsumeMultipleResourcesRequest* request, ::seshat::ConsumeMultipleResourcesResponse* response);
    virtual ::grpc::Status RestoreAllResources(::grpc::ServerContext* context, const ::seshat::RestoreAllResourcesRequest* request, ::seshat::RestoreAllResourcesResponse* response);
    // Resource restoration triggers
    virtual ::grpc::Status TriggerRestoration(::grpc::ServerContext* context, const ::seshat::TriggerRestorationRequest* request, ::seshat::TriggerRestorationResponse* response);
    virtual ::grpc::Status GetRestorationTriggers(::grpc::ServerContext* context, const ::seshat::GetRestorationTriggersRequest* request, ::seshat::GetRestorationTriggersResponse* response);
    // Resource monitoring
    virtual ::grpc::Status GetResourceHistory(::grpc::ServerContext* context, const ::seshat::GetResourceHistoryRequest* request, ::seshat::GetResourceHistoryResponse* response);
    virtual ::grpc::Status GetLowResourceAlerts(::grpc::ServerContext* context, const ::seshat::GetLowResourceAlertsRequest* request, ::seshat::GetLowResourceAlertsResponse* response);
    // Templates and presets
    virtual ::grpc::Status GetResourceTemplates(::grpc::ServerContext* context, const ::seshat::GetResourceTemplatesRequest* request, ::seshat::GetResourceTemplatesResponse* response);
    virtual ::grpc::Status CreateResourceTemplate(::grpc::ServerContext* context, const ::seshat::CreateResourceTemplateRequest* request, ::seshat::CreateResourceTemplateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateResourcePool() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourcePoolRequest* /*request*/, ::seshat::CreateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateResourcePool(::grpc::ServerContext* context, ::seshat::CreateResourcePoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::CreateResourcePoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResourcePool() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::GetResourcePoolRequest* /*request*/, ::seshat::GetResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourcePool(::grpc::ServerContext* context, ::seshat::GetResourcePoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetResourcePoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateResourcePool() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::UpdateResourcePoolRequest* /*request*/, ::seshat::UpdateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateResourcePool(::grpc::ServerContext* context, ::seshat::UpdateResourcePoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::UpdateResourcePoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteResourcePool() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::DeleteResourcePoolRequest* /*request*/, ::seshat::DeleteResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteResourcePool(::grpc::ServerContext* context, ::seshat::DeleteResourcePoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::DeleteResourcePoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsumeResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConsumeResource() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ConsumeResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeResource(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeResourceRequest* /*request*/, ::seshat::ConsumeResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumeResource(::grpc::ServerContext* context, ::seshat::ConsumeResourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::ConsumeResourceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RestoreResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RestoreResource() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RestoreResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreResource(::grpc::ServerContext* /*context*/, const ::seshat::RestoreResourceRequest* /*request*/, ::seshat::RestoreResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestoreResource(::grpc::ServerContext* context, ::seshat::RestoreResourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::RestoreResourceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResourceStatus() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceStatusRequest* /*request*/, ::seshat::GetResourceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourceStatus(::grpc::ServerContext* context, ::seshat::GetResourceStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetResourceStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsumeMultipleResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConsumeMultipleResources() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ConsumeMultipleResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeMultipleResources(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeMultipleResourcesRequest* /*request*/, ::seshat::ConsumeMultipleResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumeMultipleResources(::grpc::ServerContext* context, ::seshat::ConsumeMultipleResourcesRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::ConsumeMultipleResourcesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RestoreAllResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RestoreAllResources() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RestoreAllResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreAllResources(::grpc::ServerContext* /*context*/, const ::seshat::RestoreAllResourcesRequest* /*request*/, ::seshat::RestoreAllResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestoreAllResources(::grpc::ServerContext* context, ::seshat::RestoreAllResourcesRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::RestoreAllResourcesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerRestoration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerRestoration() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_TriggerRestoration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerRestoration(::grpc::ServerContext* /*context*/, const ::seshat::TriggerRestorationRequest* /*request*/, ::seshat::TriggerRestorationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerRestoration(::grpc::ServerContext* context, ::seshat::TriggerRestorationRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::TriggerRestorationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRestorationTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRestorationTriggers() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetRestorationTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRestorationTriggers(::grpc::ServerContext* /*context*/, const ::seshat::GetRestorationTriggersRequest* /*request*/, ::seshat::GetRestorationTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRestorationTriggers(::grpc::ServerContext* context, ::seshat::GetRestorationTriggersRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetRestorationTriggersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResourceHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResourceHistory() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetResourceHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceHistoryRequest* /*request*/, ::seshat::GetResourceHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourceHistory(::grpc::ServerContext* context, ::seshat::GetResourceHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetResourceHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLowResourceAlerts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLowResourceAlerts() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetLowResourceAlerts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLowResourceAlerts(::grpc::ServerContext* /*context*/, const ::seshat::GetLowResourceAlertsRequest* /*request*/, ::seshat::GetLowResourceAlertsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLowResourceAlerts(::grpc::ServerContext* context, ::seshat::GetLowResourceAlertsRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetLowResourceAlertsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResourceTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResourceTemplates() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetResourceTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceTemplates(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceTemplatesRequest* /*request*/, ::seshat::GetResourceTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourceTemplates(::grpc::ServerContext* context, ::seshat::GetResourceTemplatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetResourceTemplatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateResourceTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateResourceTemplate() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_CreateResourceTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourceTemplate(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourceTemplateRequest* /*request*/, ::seshat::CreateResourceTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateResourceTemplate(::grpc::ServerContext* context, ::seshat::CreateResourceTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::CreateResourceTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateResourcePool<WithAsyncMethod_GetResourcePool<WithAsyncMethod_UpdateResourcePool<WithAsyncMethod_DeleteResourcePool<WithAsyncMethod_ConsumeResource<WithAsyncMethod_RestoreResource<WithAsyncMethod_GetResourceStatus<WithAsyncMethod_ConsumeMultipleResources<WithAsyncMethod_RestoreAllResources<WithAsyncMethod_TriggerRestoration<WithAsyncMethod_GetRestorationTriggers<WithAsyncMethod_GetResourceHistory<WithAsyncMethod_GetLowResourceAlerts<WithAsyncMethod_GetResourceTemplates<WithAsyncMethod_CreateResourceTemplate<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateResourcePool() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::CreateResourcePoolRequest, ::seshat::CreateResourcePoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::CreateResourcePoolRequest* request, ::seshat::CreateResourcePoolResponse* response) { return this->CreateResourcePool(context, request, response); }));}
    void SetMessageAllocatorFor_CreateResourcePool(
        ::grpc::MessageAllocator< ::seshat::CreateResourcePoolRequest, ::seshat::CreateResourcePoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::CreateResourcePoolRequest, ::seshat::CreateResourcePoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourcePoolRequest* /*request*/, ::seshat::CreateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateResourcePool(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::CreateResourcePoolRequest* /*request*/, ::seshat::CreateResourcePoolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResourcePool() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetResourcePoolRequest, ::seshat::GetResourcePoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetResourcePoolRequest* request, ::seshat::GetResourcePoolResponse* response) { return this->GetResourcePool(context, request, response); }));}
    void SetMessageAllocatorFor_GetResourcePool(
        ::grpc::MessageAllocator< ::seshat::GetResourcePoolRequest, ::seshat::GetResourcePoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetResourcePoolRequest, ::seshat::GetResourcePoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::GetResourcePoolRequest* /*request*/, ::seshat::GetResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResourcePool(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetResourcePoolRequest* /*request*/, ::seshat::GetResourcePoolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateResourcePool() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::UpdateResourcePoolRequest, ::seshat::UpdateResourcePoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::UpdateResourcePoolRequest* request, ::seshat::UpdateResourcePoolResponse* response) { return this->UpdateResourcePool(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateResourcePool(
        ::grpc::MessageAllocator< ::seshat::UpdateResourcePoolRequest, ::seshat::UpdateResourcePoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::UpdateResourcePoolRequest, ::seshat::UpdateResourcePoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::UpdateResourcePoolRequest* /*request*/, ::seshat::UpdateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateResourcePool(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::UpdateResourcePoolRequest* /*request*/, ::seshat::UpdateResourcePoolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteResourcePool() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::DeleteResourcePoolRequest, ::seshat::DeleteResourcePoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::DeleteResourcePoolRequest* request, ::seshat::DeleteResourcePoolResponse* response) { return this->DeleteResourcePool(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteResourcePool(
        ::grpc::MessageAllocator< ::seshat::DeleteResourcePoolRequest, ::seshat::DeleteResourcePoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::DeleteResourcePoolRequest, ::seshat::DeleteResourcePoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::DeleteResourcePoolRequest* /*request*/, ::seshat::DeleteResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteResourcePool(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::DeleteResourcePoolRequest* /*request*/, ::seshat::DeleteResourcePoolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConsumeResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConsumeResource() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::ConsumeResourceRequest, ::seshat::ConsumeResourceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::ConsumeResourceRequest* request, ::seshat::ConsumeResourceResponse* response) { return this->ConsumeResource(context, request, response); }));}
    void SetMessageAllocatorFor_ConsumeResource(
        ::grpc::MessageAllocator< ::seshat::ConsumeResourceRequest, ::seshat::ConsumeResourceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::ConsumeResourceRequest, ::seshat::ConsumeResourceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConsumeResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeResource(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeResourceRequest* /*request*/, ::seshat::ConsumeResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsumeResource(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::ConsumeResourceRequest* /*request*/, ::seshat::ConsumeResourceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RestoreResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RestoreResource() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::RestoreResourceRequest, ::seshat::RestoreResourceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::RestoreResourceRequest* request, ::seshat::RestoreResourceResponse* response) { return this->RestoreResource(context, request, response); }));}
    void SetMessageAllocatorFor_RestoreResource(
        ::grpc::MessageAllocator< ::seshat::RestoreResourceRequest, ::seshat::RestoreResourceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::RestoreResourceRequest, ::seshat::RestoreResourceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RestoreResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreResource(::grpc::ServerContext* /*context*/, const ::seshat::RestoreResourceRequest* /*request*/, ::seshat::RestoreResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RestoreResource(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::RestoreResourceRequest* /*request*/, ::seshat::RestoreResourceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResourceStatus() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetResourceStatusRequest, ::seshat::GetResourceStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetResourceStatusRequest* request, ::seshat::GetResourceStatusResponse* response) { return this->GetResourceStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetResourceStatus(
        ::grpc::MessageAllocator< ::seshat::GetResourceStatusRequest, ::seshat::GetResourceStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetResourceStatusRequest, ::seshat::GetResourceStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceStatusRequest* /*request*/, ::seshat::GetResourceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResourceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetResourceStatusRequest* /*request*/, ::seshat::GetResourceStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConsumeMultipleResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConsumeMultipleResources() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::ConsumeMultipleResourcesRequest, ::seshat::ConsumeMultipleResourcesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::ConsumeMultipleResourcesRequest* request, ::seshat::ConsumeMultipleResourcesResponse* response) { return this->ConsumeMultipleResources(context, request, response); }));}
    void SetMessageAllocatorFor_ConsumeMultipleResources(
        ::grpc::MessageAllocator< ::seshat::ConsumeMultipleResourcesRequest, ::seshat::ConsumeMultipleResourcesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::ConsumeMultipleResourcesRequest, ::seshat::ConsumeMultipleResourcesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConsumeMultipleResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeMultipleResources(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeMultipleResourcesRequest* /*request*/, ::seshat::ConsumeMultipleResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsumeMultipleResources(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::ConsumeMultipleResourcesRequest* /*request*/, ::seshat::ConsumeMultipleResourcesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RestoreAllResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RestoreAllResources() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::RestoreAllResourcesRequest, ::seshat::RestoreAllResourcesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::RestoreAllResourcesRequest* request, ::seshat::RestoreAllResourcesResponse* response) { return this->RestoreAllResources(context, request, response); }));}
    void SetMessageAllocatorFor_RestoreAllResources(
        ::grpc::MessageAllocator< ::seshat::RestoreAllResourcesRequest, ::seshat::RestoreAllResourcesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::RestoreAllResourcesRequest, ::seshat::RestoreAllResourcesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RestoreAllResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreAllResources(::grpc::ServerContext* /*context*/, const ::seshat::RestoreAllResourcesRequest* /*request*/, ::seshat::RestoreAllResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RestoreAllResources(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::RestoreAllResourcesRequest* /*request*/, ::seshat::RestoreAllResourcesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerRestoration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerRestoration() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::TriggerRestorationRequest, ::seshat::TriggerRestorationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::TriggerRestorationRequest* request, ::seshat::TriggerRestorationResponse* response) { return this->TriggerRestoration(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerRestoration(
        ::grpc::MessageAllocator< ::seshat::TriggerRestorationRequest, ::seshat::TriggerRestorationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::TriggerRestorationRequest, ::seshat::TriggerRestorationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerRestoration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerRestoration(::grpc::ServerContext* /*context*/, const ::seshat::TriggerRestorationRequest* /*request*/, ::seshat::TriggerRestorationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerRestoration(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::TriggerRestorationRequest* /*request*/, ::seshat::TriggerRestorationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRestorationTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRestorationTriggers() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetRestorationTriggersRequest, ::seshat::GetRestorationTriggersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetRestorationTriggersRequest* request, ::seshat::GetRestorationTriggersResponse* response) { return this->GetRestorationTriggers(context, request, response); }));}
    void SetMessageAllocatorFor_GetRestorationTriggers(
        ::grpc::MessageAllocator< ::seshat::GetRestorationTriggersRequest, ::seshat::GetRestorationTriggersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetRestorationTriggersRequest, ::seshat::GetRestorationTriggersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRestorationTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRestorationTriggers(::grpc::ServerContext* /*context*/, const ::seshat::GetRestorationTriggersRequest* /*request*/, ::seshat::GetRestorationTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRestorationTriggers(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetRestorationTriggersRequest* /*request*/, ::seshat::GetRestorationTriggersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResourceHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResourceHistory() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetResourceHistoryRequest, ::seshat::GetResourceHistoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetResourceHistoryRequest* request, ::seshat::GetResourceHistoryResponse* response) { return this->GetResourceHistory(context, request, response); }));}
    void SetMessageAllocatorFor_GetResourceHistory(
        ::grpc::MessageAllocator< ::seshat::GetResourceHistoryRequest, ::seshat::GetResourceHistoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetResourceHistoryRequest, ::seshat::GetResourceHistoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetResourceHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceHistoryRequest* /*request*/, ::seshat::GetResourceHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResourceHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetResourceHistoryRequest* /*request*/, ::seshat::GetResourceHistoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLowResourceAlerts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLowResourceAlerts() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetLowResourceAlertsRequest, ::seshat::GetLowResourceAlertsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetLowResourceAlertsRequest* request, ::seshat::GetLowResourceAlertsResponse* response) { return this->GetLowResourceAlerts(context, request, response); }));}
    void SetMessageAllocatorFor_GetLowResourceAlerts(
        ::grpc::MessageAllocator< ::seshat::GetLowResourceAlertsRequest, ::seshat::GetLowResourceAlertsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetLowResourceAlertsRequest, ::seshat::GetLowResourceAlertsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLowResourceAlerts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLowResourceAlerts(::grpc::ServerContext* /*context*/, const ::seshat::GetLowResourceAlertsRequest* /*request*/, ::seshat::GetLowResourceAlertsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLowResourceAlerts(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetLowResourceAlertsRequest* /*request*/, ::seshat::GetLowResourceAlertsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResourceTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResourceTemplates() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetResourceTemplatesRequest, ::seshat::GetResourceTemplatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetResourceTemplatesRequest* request, ::seshat::GetResourceTemplatesResponse* response) { return this->GetResourceTemplates(context, request, response); }));}
    void SetMessageAllocatorFor_GetResourceTemplates(
        ::grpc::MessageAllocator< ::seshat::GetResourceTemplatesRequest, ::seshat::GetResourceTemplatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetResourceTemplatesRequest, ::seshat::GetResourceTemplatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetResourceTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceTemplates(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceTemplatesRequest* /*request*/, ::seshat::GetResourceTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResourceTemplates(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetResourceTemplatesRequest* /*request*/, ::seshat::GetResourceTemplatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateResourceTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateResourceTemplate() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::CreateResourceTemplateRequest, ::seshat::CreateResourceTemplateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::CreateResourceTemplateRequest* request, ::seshat::CreateResourceTemplateResponse* response) { return this->CreateResourceTemplate(context, request, response); }));}
    void SetMessageAllocatorFor_CreateResourceTemplate(
        ::grpc::MessageAllocator< ::seshat::CreateResourceTemplateRequest, ::seshat::CreateResourceTemplateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::CreateResourceTemplateRequest, ::seshat::CreateResourceTemplateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateResourceTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourceTemplate(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourceTemplateRequest* /*request*/, ::seshat::CreateResourceTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateResourceTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::CreateResourceTemplateRequest* /*request*/, ::seshat::CreateResourceTemplateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateResourcePool<WithCallbackMethod_GetResourcePool<WithCallbackMethod_UpdateResourcePool<WithCallbackMethod_DeleteResourcePool<WithCallbackMethod_ConsumeResource<WithCallbackMethod_RestoreResource<WithCallbackMethod_GetResourceStatus<WithCallbackMethod_ConsumeMultipleResources<WithCallbackMethod_RestoreAllResources<WithCallbackMethod_TriggerRestoration<WithCallbackMethod_GetRestorationTriggers<WithCallbackMethod_GetResourceHistory<WithCallbackMethod_GetLowResourceAlerts<WithCallbackMethod_GetResourceTemplates<WithCallbackMethod_CreateResourceTemplate<Service > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateResourcePool() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourcePoolRequest* /*request*/, ::seshat::CreateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResourcePool() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::GetResourcePoolRequest* /*request*/, ::seshat::GetResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateResourcePool() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::UpdateResourcePoolRequest* /*request*/, ::seshat::UpdateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteResourcePool() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::DeleteResourcePoolRequest* /*request*/, ::seshat::DeleteResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConsumeResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConsumeResource() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ConsumeResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeResource(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeResourceRequest* /*request*/, ::seshat::ConsumeResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RestoreResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RestoreResource() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RestoreResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreResource(::grpc::ServerContext* /*context*/, const ::seshat::RestoreResourceRequest* /*request*/, ::seshat::RestoreResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResourceStatus() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceStatusRequest* /*request*/, ::seshat::GetResourceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConsumeMultipleResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConsumeMultipleResources() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ConsumeMultipleResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeMultipleResources(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeMultipleResourcesRequest* /*request*/, ::seshat::ConsumeMultipleResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RestoreAllResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RestoreAllResources() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RestoreAllResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreAllResources(::grpc::ServerContext* /*context*/, const ::seshat::RestoreAllResourcesRequest* /*request*/, ::seshat::RestoreAllResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerRestoration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerRestoration() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_TriggerRestoration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerRestoration(::grpc::ServerContext* /*context*/, const ::seshat::TriggerRestorationRequest* /*request*/, ::seshat::TriggerRestorationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRestorationTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRestorationTriggers() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetRestorationTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRestorationTriggers(::grpc::ServerContext* /*context*/, const ::seshat::GetRestorationTriggersRequest* /*request*/, ::seshat::GetRestorationTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResourceHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResourceHistory() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetResourceHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceHistoryRequest* /*request*/, ::seshat::GetResourceHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLowResourceAlerts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLowResourceAlerts() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetLowResourceAlerts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLowResourceAlerts(::grpc::ServerContext* /*context*/, const ::seshat::GetLowResourceAlertsRequest* /*request*/, ::seshat::GetLowResourceAlertsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResourceTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResourceTemplates() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetResourceTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceTemplates(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceTemplatesRequest* /*request*/, ::seshat::GetResourceTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateResourceTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateResourceTemplate() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_CreateResourceTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourceTemplate(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourceTemplateRequest* /*request*/, ::seshat::CreateResourceTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateResourcePool() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourcePoolRequest* /*request*/, ::seshat::CreateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateResourcePool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResourcePool() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::GetResourcePoolRequest* /*request*/, ::seshat::GetResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourcePool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateResourcePool() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::UpdateResourcePoolRequest* /*request*/, ::seshat::UpdateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateResourcePool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteResourcePool() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::DeleteResourcePoolRequest* /*request*/, ::seshat::DeleteResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteResourcePool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsumeResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConsumeResource() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ConsumeResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeResource(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeResourceRequest* /*request*/, ::seshat::ConsumeResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumeResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RestoreResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RestoreResource() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RestoreResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreResource(::grpc::ServerContext* /*context*/, const ::seshat::RestoreResourceRequest* /*request*/, ::seshat::RestoreResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestoreResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResourceStatus() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceStatusRequest* /*request*/, ::seshat::GetResourceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourceStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsumeMultipleResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConsumeMultipleResources() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ConsumeMultipleResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeMultipleResources(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeMultipleResourcesRequest* /*request*/, ::seshat::ConsumeMultipleResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumeMultipleResources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RestoreAllResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RestoreAllResources() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_RestoreAllResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreAllResources(::grpc::ServerContext* /*context*/, const ::seshat::RestoreAllResourcesRequest* /*request*/, ::seshat::RestoreAllResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestoreAllResources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerRestoration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerRestoration() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_TriggerRestoration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerRestoration(::grpc::ServerContext* /*context*/, const ::seshat::TriggerRestorationRequest* /*request*/, ::seshat::TriggerRestorationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerRestoration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRestorationTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRestorationTriggers() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetRestorationTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRestorationTriggers(::grpc::ServerContext* /*context*/, const ::seshat::GetRestorationTriggersRequest* /*request*/, ::seshat::GetRestorationTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRestorationTriggers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResourceHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResourceHistory() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetResourceHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceHistoryRequest* /*request*/, ::seshat::GetResourceHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourceHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLowResourceAlerts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLowResourceAlerts() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetLowResourceAlerts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLowResourceAlerts(::grpc::ServerContext* /*context*/, const ::seshat::GetLowResourceAlertsRequest* /*request*/, ::seshat::GetLowResourceAlertsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLowResourceAlerts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResourceTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResourceTemplates() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetResourceTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceTemplates(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceTemplatesRequest* /*request*/, ::seshat::GetResourceTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourceTemplates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateResourceTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateResourceTemplate() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_CreateResourceTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourceTemplate(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourceTemplateRequest* /*request*/, ::seshat::CreateResourceTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateResourceTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateResourcePool() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateResourcePool(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourcePoolRequest* /*request*/, ::seshat::CreateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateResourcePool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResourcePool() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResourcePool(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::GetResourcePoolRequest* /*request*/, ::seshat::GetResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResourcePool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateResourcePool() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateResourcePool(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::UpdateResourcePoolRequest* /*request*/, ::seshat::UpdateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateResourcePool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteResourcePool() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteResourcePool(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::DeleteResourcePoolRequest* /*request*/, ::seshat::DeleteResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteResourcePool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConsumeResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConsumeResource() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConsumeResource(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConsumeResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeResource(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeResourceRequest* /*request*/, ::seshat::ConsumeResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsumeResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RestoreResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RestoreResource() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RestoreResource(context, request, response); }));
    }
    ~WithRawCallbackMethod_RestoreResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreResource(::grpc::ServerContext* /*context*/, const ::seshat::RestoreResourceRequest* /*request*/, ::seshat::RestoreResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RestoreResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResourceStatus() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResourceStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceStatusRequest* /*request*/, ::seshat::GetResourceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResourceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConsumeMultipleResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConsumeMultipleResources() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConsumeMultipleResources(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConsumeMultipleResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeMultipleResources(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeMultipleResourcesRequest* /*request*/, ::seshat::ConsumeMultipleResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsumeMultipleResources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RestoreAllResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RestoreAllResources() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RestoreAllResources(context, request, response); }));
    }
    ~WithRawCallbackMethod_RestoreAllResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreAllResources(::grpc::ServerContext* /*context*/, const ::seshat::RestoreAllResourcesRequest* /*request*/, ::seshat::RestoreAllResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RestoreAllResources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerRestoration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerRestoration() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerRestoration(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerRestoration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerRestoration(::grpc::ServerContext* /*context*/, const ::seshat::TriggerRestorationRequest* /*request*/, ::seshat::TriggerRestorationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerRestoration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRestorationTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRestorationTriggers() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRestorationTriggers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRestorationTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRestorationTriggers(::grpc::ServerContext* /*context*/, const ::seshat::GetRestorationTriggersRequest* /*request*/, ::seshat::GetRestorationTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRestorationTriggers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResourceHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResourceHistory() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResourceHistory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetResourceHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceHistoryRequest* /*request*/, ::seshat::GetResourceHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResourceHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLowResourceAlerts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLowResourceAlerts() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLowResourceAlerts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLowResourceAlerts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLowResourceAlerts(::grpc::ServerContext* /*context*/, const ::seshat::GetLowResourceAlertsRequest* /*request*/, ::seshat::GetLowResourceAlertsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLowResourceAlerts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResourceTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResourceTemplates() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResourceTemplates(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetResourceTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceTemplates(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceTemplatesRequest* /*request*/, ::seshat::GetResourceTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResourceTemplates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateResourceTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateResourceTemplate() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateResourceTemplate(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateResourceTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateResourceTemplate(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourceTemplateRequest* /*request*/, ::seshat::CreateResourceTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateResourceTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateResourcePool() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::CreateResourcePoolRequest, ::seshat::CreateResourcePoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::CreateResourcePoolRequest, ::seshat::CreateResourcePoolResponse>* streamer) {
                       return this->StreamedCreateResourcePool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourcePoolRequest* /*request*/, ::seshat::CreateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateResourcePool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::CreateResourcePoolRequest,::seshat::CreateResourcePoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResourcePool() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetResourcePoolRequest, ::seshat::GetResourcePoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetResourcePoolRequest, ::seshat::GetResourcePoolResponse>* streamer) {
                       return this->StreamedGetResourcePool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::GetResourcePoolRequest* /*request*/, ::seshat::GetResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResourcePool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetResourcePoolRequest,::seshat::GetResourcePoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateResourcePool() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::UpdateResourcePoolRequest, ::seshat::UpdateResourcePoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::UpdateResourcePoolRequest, ::seshat::UpdateResourcePoolResponse>* streamer) {
                       return this->StreamedUpdateResourcePool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::UpdateResourcePoolRequest* /*request*/, ::seshat::UpdateResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateResourcePool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::UpdateResourcePoolRequest,::seshat::UpdateResourcePoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteResourcePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteResourcePool() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::DeleteResourcePoolRequest, ::seshat::DeleteResourcePoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::DeleteResourcePoolRequest, ::seshat::DeleteResourcePoolResponse>* streamer) {
                       return this->StreamedDeleteResourcePool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteResourcePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteResourcePool(::grpc::ServerContext* /*context*/, const ::seshat::DeleteResourcePoolRequest* /*request*/, ::seshat::DeleteResourcePoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteResourcePool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::DeleteResourcePoolRequest,::seshat::DeleteResourcePoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConsumeResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConsumeResource() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::ConsumeResourceRequest, ::seshat::ConsumeResourceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::ConsumeResourceRequest, ::seshat::ConsumeResourceResponse>* streamer) {
                       return this->StreamedConsumeResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConsumeResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsumeResource(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeResourceRequest* /*request*/, ::seshat::ConsumeResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsumeResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::ConsumeResourceRequest,::seshat::ConsumeResourceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestoreResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RestoreResource() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::RestoreResourceRequest, ::seshat::RestoreResourceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::RestoreResourceRequest, ::seshat::RestoreResourceResponse>* streamer) {
                       return this->StreamedRestoreResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RestoreResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestoreResource(::grpc::ServerContext* /*context*/, const ::seshat::RestoreResourceRequest* /*request*/, ::seshat::RestoreResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestoreResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::RestoreResourceRequest,::seshat::RestoreResourceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResourceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResourceStatus() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetResourceStatusRequest, ::seshat::GetResourceStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetResourceStatusRequest, ::seshat::GetResourceStatusResponse>* streamer) {
                       return this->StreamedGetResourceStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResourceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResourceStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceStatusRequest* /*request*/, ::seshat::GetResourceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResourceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetResourceStatusRequest,::seshat::GetResourceStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConsumeMultipleResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConsumeMultipleResources() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::ConsumeMultipleResourcesRequest, ::seshat::ConsumeMultipleResourcesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::ConsumeMultipleResourcesRequest, ::seshat::ConsumeMultipleResourcesResponse>* streamer) {
                       return this->StreamedConsumeMultipleResources(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConsumeMultipleResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsumeMultipleResources(::grpc::ServerContext* /*context*/, const ::seshat::ConsumeMultipleResourcesRequest* /*request*/, ::seshat::ConsumeMultipleResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsumeMultipleResources(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::ConsumeMultipleResourcesRequest,::seshat::ConsumeMultipleResourcesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestoreAllResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RestoreAllResources() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::RestoreAllResourcesRequest, ::seshat::RestoreAllResourcesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::RestoreAllResourcesRequest, ::seshat::RestoreAllResourcesResponse>* streamer) {
                       return this->StreamedRestoreAllResources(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RestoreAllResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestoreAllResources(::grpc::ServerContext* /*context*/, const ::seshat::RestoreAllResourcesRequest* /*request*/, ::seshat::RestoreAllResourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestoreAllResources(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::RestoreAllResourcesRequest,::seshat::RestoreAllResourcesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerRestoration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerRestoration() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::TriggerRestorationRequest, ::seshat::TriggerRestorationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::TriggerRestorationRequest, ::seshat::TriggerRestorationResponse>* streamer) {
                       return this->StreamedTriggerRestoration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerRestoration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerRestoration(::grpc::ServerContext* /*context*/, const ::seshat::TriggerRestorationRequest* /*request*/, ::seshat::TriggerRestorationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerRestoration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::TriggerRestorationRequest,::seshat::TriggerRestorationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRestorationTriggers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRestorationTriggers() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetRestorationTriggersRequest, ::seshat::GetRestorationTriggersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetRestorationTriggersRequest, ::seshat::GetRestorationTriggersResponse>* streamer) {
                       return this->StreamedGetRestorationTriggers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRestorationTriggers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRestorationTriggers(::grpc::ServerContext* /*context*/, const ::seshat::GetRestorationTriggersRequest* /*request*/, ::seshat::GetRestorationTriggersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRestorationTriggers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetRestorationTriggersRequest,::seshat::GetRestorationTriggersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResourceHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResourceHistory() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetResourceHistoryRequest, ::seshat::GetResourceHistoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetResourceHistoryRequest, ::seshat::GetResourceHistoryResponse>* streamer) {
                       return this->StreamedGetResourceHistory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResourceHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResourceHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceHistoryRequest* /*request*/, ::seshat::GetResourceHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResourceHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetResourceHistoryRequest,::seshat::GetResourceHistoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLowResourceAlerts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLowResourceAlerts() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetLowResourceAlertsRequest, ::seshat::GetLowResourceAlertsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetLowResourceAlertsRequest, ::seshat::GetLowResourceAlertsResponse>* streamer) {
                       return this->StreamedGetLowResourceAlerts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLowResourceAlerts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLowResourceAlerts(::grpc::ServerContext* /*context*/, const ::seshat::GetLowResourceAlertsRequest* /*request*/, ::seshat::GetLowResourceAlertsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLowResourceAlerts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetLowResourceAlertsRequest,::seshat::GetLowResourceAlertsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResourceTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResourceTemplates() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetResourceTemplatesRequest, ::seshat::GetResourceTemplatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetResourceTemplatesRequest, ::seshat::GetResourceTemplatesResponse>* streamer) {
                       return this->StreamedGetResourceTemplates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResourceTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResourceTemplates(::grpc::ServerContext* /*context*/, const ::seshat::GetResourceTemplatesRequest* /*request*/, ::seshat::GetResourceTemplatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResourceTemplates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetResourceTemplatesRequest,::seshat::GetResourceTemplatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateResourceTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateResourceTemplate() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::CreateResourceTemplateRequest, ::seshat::CreateResourceTemplateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::CreateResourceTemplateRequest, ::seshat::CreateResourceTemplateResponse>* streamer) {
                       return this->StreamedCreateResourceTemplate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateResourceTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateResourceTemplate(::grpc::ServerContext* /*context*/, const ::seshat::CreateResourceTemplateRequest* /*request*/, ::seshat::CreateResourceTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateResourceTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::CreateResourceTemplateRequest,::seshat::CreateResourceTemplateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateResourcePool<WithStreamedUnaryMethod_GetResourcePool<WithStreamedUnaryMethod_UpdateResourcePool<WithStreamedUnaryMethod_DeleteResourcePool<WithStreamedUnaryMethod_ConsumeResource<WithStreamedUnaryMethod_RestoreResource<WithStreamedUnaryMethod_GetResourceStatus<WithStreamedUnaryMethod_ConsumeMultipleResources<WithStreamedUnaryMethod_RestoreAllResources<WithStreamedUnaryMethod_TriggerRestoration<WithStreamedUnaryMethod_GetRestorationTriggers<WithStreamedUnaryMethod_GetResourceHistory<WithStreamedUnaryMethod_GetLowResourceAlerts<WithStreamedUnaryMethod_GetResourceTemplates<WithStreamedUnaryMethod_CreateResourceTemplate<Service > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateResourcePool<WithStreamedUnaryMethod_GetResourcePool<WithStreamedUnaryMethod_UpdateResourcePool<WithStreamedUnaryMethod_DeleteResourcePool<WithStreamedUnaryMethod_ConsumeResource<WithStreamedUnaryMethod_RestoreResource<WithStreamedUnaryMethod_GetResourceStatus<WithStreamedUnaryMethod_ConsumeMultipleResources<WithStreamedUnaryMethod_RestoreAllResources<WithStreamedUnaryMethod_TriggerRestoration<WithStreamedUnaryMethod_GetRestorationTriggers<WithStreamedUnaryMethod_GetResourceHistory<WithStreamedUnaryMethod_GetLowResourceAlerts<WithStreamedUnaryMethod_GetResourceTemplates<WithStreamedUnaryMethod_CreateResourceTemplate<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace seshat


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_seshat_2fresources_2eproto__INCLUDED

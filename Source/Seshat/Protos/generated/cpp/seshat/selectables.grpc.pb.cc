// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/selectables.proto

#include "seshat/selectables.pb.h"
#include "seshat/selectables.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace seshat {

static const char* SelectablesService_method_names[] = {
  "/seshat.SelectablesService/CreateTable",
  "/seshat.SelectablesService/AddItem",
  "/seshat.SelectablesService/RemoveItem",
  "/seshat.SelectablesService/UpdateWeight",
  "/seshat.SelectablesService/Select",
  "/seshat.SelectablesService/SelectMultiple",
  "/seshat.SelectablesService/SelectWithContext",
  "/seshat.SelectablesService/GetTable",
  "/seshat.SelectablesService/ListTables",
  "/seshat.SelectablesService/DeleteTable",
  "/seshat.SelectablesService/CloneTable",
  "/seshat.SelectablesService/GetProbabilities",
  "/seshat.SelectablesService/TestDistribution",
  "/seshat.SelectablesService/MergeTables",
};

std::unique_ptr< SelectablesService::Stub> SelectablesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SelectablesService::Stub> stub(new SelectablesService::Stub(channel, options));
  return stub;
}

SelectablesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateTable_(SelectablesService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddItem_(SelectablesService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveItem_(SelectablesService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateWeight_(SelectablesService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Select_(SelectablesService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectMultiple_(SelectablesService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectWithContext_(SelectablesService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTable_(SelectablesService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTables_(SelectablesService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTable_(SelectablesService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloneTable_(SelectablesService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProbabilities_(SelectablesService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestDistribution_(SelectablesService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MergeTables_(SelectablesService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SelectablesService::Stub::CreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::seshat::CreateTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CreateTableRequest, ::seshat::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTable_, context, request, response);
}

void SelectablesService::Stub::async::CreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest* request, ::seshat::CreateTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CreateTableRequest, ::seshat::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::CreateTable(::grpc::ClientContext* context, const ::seshat::CreateTableRequest* request, ::seshat::CreateTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateTableResponse>* SelectablesService::Stub::PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CreateTableResponse, ::seshat::CreateTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateTableResponse>* SelectablesService::Stub::AsyncCreateTableRaw(::grpc::ClientContext* context, const ::seshat::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::AddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::seshat::AddItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::AddItemRequest, ::seshat::AddItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddItem_, context, request, response);
}

void SelectablesService::Stub::async::AddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest* request, ::seshat::AddItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::AddItemRequest, ::seshat::AddItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddItem_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::AddItem(::grpc::ClientContext* context, const ::seshat::AddItemRequest* request, ::seshat::AddItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::AddItemResponse>* SelectablesService::Stub::PrepareAsyncAddItemRaw(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::AddItemResponse, ::seshat::AddItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::AddItemResponse>* SelectablesService::Stub::AsyncAddItemRaw(::grpc::ClientContext* context, const ::seshat::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::RemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::seshat::RemoveItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RemoveItemRequest, ::seshat::RemoveItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveItem_, context, request, response);
}

void SelectablesService::Stub::async::RemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest* request, ::seshat::RemoveItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RemoveItemRequest, ::seshat::RemoveItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveItem_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::RemoveItem(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest* request, ::seshat::RemoveItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RemoveItemResponse>* SelectablesService::Stub::PrepareAsyncRemoveItemRaw(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RemoveItemResponse, ::seshat::RemoveItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RemoveItemResponse>* SelectablesService::Stub::AsyncRemoveItemRaw(::grpc::ClientContext* context, const ::seshat::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::UpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::seshat::UpdateWeightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::UpdateWeightRequest, ::seshat::UpdateWeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateWeight_, context, request, response);
}

void SelectablesService::Stub::async::UpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest* request, ::seshat::UpdateWeightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::UpdateWeightRequest, ::seshat::UpdateWeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWeight_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::UpdateWeight(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest* request, ::seshat::UpdateWeightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::UpdateWeightResponse>* SelectablesService::Stub::PrepareAsyncUpdateWeightRaw(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::UpdateWeightResponse, ::seshat::UpdateWeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateWeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::UpdateWeightResponse>* SelectablesService::Stub::AsyncUpdateWeightRaw(::grpc::ClientContext* context, const ::seshat::UpdateWeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateWeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::Select(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::seshat::SelectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::SelectRequest, ::seshat::SelectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Select_, context, request, response);
}

void SelectablesService::Stub::async::Select(::grpc::ClientContext* context, const ::seshat::SelectRequest* request, ::seshat::SelectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::SelectRequest, ::seshat::SelectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Select_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::Select(::grpc::ClientContext* context, const ::seshat::SelectRequest* request, ::seshat::SelectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Select_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::SelectResponse>* SelectablesService::Stub::PrepareAsyncSelectRaw(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::SelectResponse, ::seshat::SelectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Select_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::SelectResponse>* SelectablesService::Stub::AsyncSelectRaw(::grpc::ClientContext* context, const ::seshat::SelectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::SelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::seshat::SelectMultipleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::SelectMultipleRequest, ::seshat::SelectMultipleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SelectMultiple_, context, request, response);
}

void SelectablesService::Stub::async::SelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest* request, ::seshat::SelectMultipleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::SelectMultipleRequest, ::seshat::SelectMultipleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectMultiple_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::SelectMultiple(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest* request, ::seshat::SelectMultipleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectMultiple_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::SelectMultipleResponse>* SelectablesService::Stub::PrepareAsyncSelectMultipleRaw(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::SelectMultipleResponse, ::seshat::SelectMultipleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SelectMultiple_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::SelectMultipleResponse>* SelectablesService::Stub::AsyncSelectMultipleRaw(::grpc::ClientContext* context, const ::seshat::SelectMultipleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectMultipleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::SelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::seshat::SelectWithContextResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::SelectWithContextRequest, ::seshat::SelectWithContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SelectWithContext_, context, request, response);
}

void SelectablesService::Stub::async::SelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest* request, ::seshat::SelectWithContextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::SelectWithContextRequest, ::seshat::SelectWithContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectWithContext_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::SelectWithContext(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest* request, ::seshat::SelectWithContextResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectWithContext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::SelectWithContextResponse>* SelectablesService::Stub::PrepareAsyncSelectWithContextRaw(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::SelectWithContextResponse, ::seshat::SelectWithContextRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SelectWithContext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::SelectWithContextResponse>* SelectablesService::Stub::AsyncSelectWithContextRaw(::grpc::ClientContext* context, const ::seshat::SelectWithContextRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectWithContextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::GetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::seshat::GetTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetTableRequest, ::seshat::GetTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTable_, context, request, response);
}

void SelectablesService::Stub::async::GetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest* request, ::seshat::GetTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetTableRequest, ::seshat::GetTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTable_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::GetTable(::grpc::ClientContext* context, const ::seshat::GetTableRequest* request, ::seshat::GetTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetTableResponse>* SelectablesService::Stub::PrepareAsyncGetTableRaw(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetTableResponse, ::seshat::GetTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetTableResponse>* SelectablesService::Stub::AsyncGetTableRaw(::grpc::ClientContext* context, const ::seshat::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::ListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::seshat::ListTablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ListTablesRequest, ::seshat::ListTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTables_, context, request, response);
}

void SelectablesService::Stub::async::ListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest* request, ::seshat::ListTablesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ListTablesRequest, ::seshat::ListTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTables_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::ListTables(::grpc::ClientContext* context, const ::seshat::ListTablesRequest* request, ::seshat::ListTablesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ListTablesResponse>* SelectablesService::Stub::PrepareAsyncListTablesRaw(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ListTablesResponse, ::seshat::ListTablesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ListTablesResponse>* SelectablesService::Stub::AsyncListTablesRaw(::grpc::ClientContext* context, const ::seshat::ListTablesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListTablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::DeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::seshat::DeleteTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::DeleteTableRequest, ::seshat::DeleteTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTable_, context, request, response);
}

void SelectablesService::Stub::async::DeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest* request, ::seshat::DeleteTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::DeleteTableRequest, ::seshat::DeleteTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTable_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::DeleteTable(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest* request, ::seshat::DeleteTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::DeleteTableResponse>* SelectablesService::Stub::PrepareAsyncDeleteTableRaw(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::DeleteTableResponse, ::seshat::DeleteTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::DeleteTableResponse>* SelectablesService::Stub::AsyncDeleteTableRaw(::grpc::ClientContext* context, const ::seshat::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::CloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::seshat::CloneTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CloneTableRequest, ::seshat::CloneTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CloneTable_, context, request, response);
}

void SelectablesService::Stub::async::CloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest* request, ::seshat::CloneTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CloneTableRequest, ::seshat::CloneTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloneTable_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::CloneTable(::grpc::ClientContext* context, const ::seshat::CloneTableRequest* request, ::seshat::CloneTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloneTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CloneTableResponse>* SelectablesService::Stub::PrepareAsyncCloneTableRaw(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CloneTableResponse, ::seshat::CloneTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CloneTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CloneTableResponse>* SelectablesService::Stub::AsyncCloneTableRaw(::grpc::ClientContext* context, const ::seshat::CloneTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloneTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::GetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::seshat::GetProbabilitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetProbabilitiesRequest, ::seshat::GetProbabilitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProbabilities_, context, request, response);
}

void SelectablesService::Stub::async::GetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest* request, ::seshat::GetProbabilitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetProbabilitiesRequest, ::seshat::GetProbabilitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProbabilities_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::GetProbabilities(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest* request, ::seshat::GetProbabilitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProbabilities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetProbabilitiesResponse>* SelectablesService::Stub::PrepareAsyncGetProbabilitiesRaw(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetProbabilitiesResponse, ::seshat::GetProbabilitiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProbabilities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetProbabilitiesResponse>* SelectablesService::Stub::AsyncGetProbabilitiesRaw(::grpc::ClientContext* context, const ::seshat::GetProbabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProbabilitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::TestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::seshat::TestDistributionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::TestDistributionRequest, ::seshat::TestDistributionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestDistribution_, context, request, response);
}

void SelectablesService::Stub::async::TestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest* request, ::seshat::TestDistributionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::TestDistributionRequest, ::seshat::TestDistributionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestDistribution_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::TestDistribution(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest* request, ::seshat::TestDistributionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestDistribution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::TestDistributionResponse>* SelectablesService::Stub::PrepareAsyncTestDistributionRaw(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::TestDistributionResponse, ::seshat::TestDistributionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestDistribution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::TestDistributionResponse>* SelectablesService::Stub::AsyncTestDistributionRaw(::grpc::ClientContext* context, const ::seshat::TestDistributionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestDistributionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SelectablesService::Stub::MergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::seshat::MergeTablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::MergeTablesRequest, ::seshat::MergeTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MergeTables_, context, request, response);
}

void SelectablesService::Stub::async::MergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest* request, ::seshat::MergeTablesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::MergeTablesRequest, ::seshat::MergeTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MergeTables_, context, request, response, std::move(f));
}

void SelectablesService::Stub::async::MergeTables(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest* request, ::seshat::MergeTablesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MergeTables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::MergeTablesResponse>* SelectablesService::Stub::PrepareAsyncMergeTablesRaw(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::MergeTablesResponse, ::seshat::MergeTablesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MergeTables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::MergeTablesResponse>* SelectablesService::Stub::AsyncMergeTablesRaw(::grpc::ClientContext* context, const ::seshat::MergeTablesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMergeTablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

SelectablesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::CreateTableRequest, ::seshat::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CreateTableRequest* req,
             ::seshat::CreateTableResponse* resp) {
               return service->CreateTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::AddItemRequest, ::seshat::AddItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::AddItemRequest* req,
             ::seshat::AddItemResponse* resp) {
               return service->AddItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::RemoveItemRequest, ::seshat::RemoveItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RemoveItemRequest* req,
             ::seshat::RemoveItemResponse* resp) {
               return service->RemoveItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::UpdateWeightRequest, ::seshat::UpdateWeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::UpdateWeightRequest* req,
             ::seshat::UpdateWeightResponse* resp) {
               return service->UpdateWeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::SelectRequest, ::seshat::SelectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::SelectRequest* req,
             ::seshat::SelectResponse* resp) {
               return service->Select(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::SelectMultipleRequest, ::seshat::SelectMultipleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::SelectMultipleRequest* req,
             ::seshat::SelectMultipleResponse* resp) {
               return service->SelectMultiple(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::SelectWithContextRequest, ::seshat::SelectWithContextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::SelectWithContextRequest* req,
             ::seshat::SelectWithContextResponse* resp) {
               return service->SelectWithContext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::GetTableRequest, ::seshat::GetTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetTableRequest* req,
             ::seshat::GetTableResponse* resp) {
               return service->GetTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::ListTablesRequest, ::seshat::ListTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ListTablesRequest* req,
             ::seshat::ListTablesResponse* resp) {
               return service->ListTables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::DeleteTableRequest, ::seshat::DeleteTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::DeleteTableRequest* req,
             ::seshat::DeleteTableResponse* resp) {
               return service->DeleteTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::CloneTableRequest, ::seshat::CloneTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CloneTableRequest* req,
             ::seshat::CloneTableResponse* resp) {
               return service->CloneTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::GetProbabilitiesRequest, ::seshat::GetProbabilitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetProbabilitiesRequest* req,
             ::seshat::GetProbabilitiesResponse* resp) {
               return service->GetProbabilities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::TestDistributionRequest, ::seshat::TestDistributionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::TestDistributionRequest* req,
             ::seshat::TestDistributionResponse* resp) {
               return service->TestDistribution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SelectablesService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SelectablesService::Service, ::seshat::MergeTablesRequest, ::seshat::MergeTablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SelectablesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::MergeTablesRequest* req,
             ::seshat::MergeTablesResponse* resp) {
               return service->MergeTables(ctx, req, resp);
             }, this)));
}

SelectablesService::Service::~Service() {
}

::grpc::Status SelectablesService::Service::CreateTable(::grpc::ServerContext* context, const ::seshat::CreateTableRequest* request, ::seshat::CreateTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::AddItem(::grpc::ServerContext* context, const ::seshat::AddItemRequest* request, ::seshat::AddItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::RemoveItem(::grpc::ServerContext* context, const ::seshat::RemoveItemRequest* request, ::seshat::RemoveItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::UpdateWeight(::grpc::ServerContext* context, const ::seshat::UpdateWeightRequest* request, ::seshat::UpdateWeightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::Select(::grpc::ServerContext* context, const ::seshat::SelectRequest* request, ::seshat::SelectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::SelectMultiple(::grpc::ServerContext* context, const ::seshat::SelectMultipleRequest* request, ::seshat::SelectMultipleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::SelectWithContext(::grpc::ServerContext* context, const ::seshat::SelectWithContextRequest* request, ::seshat::SelectWithContextResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::GetTable(::grpc::ServerContext* context, const ::seshat::GetTableRequest* request, ::seshat::GetTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::ListTables(::grpc::ServerContext* context, const ::seshat::ListTablesRequest* request, ::seshat::ListTablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::DeleteTable(::grpc::ServerContext* context, const ::seshat::DeleteTableRequest* request, ::seshat::DeleteTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::CloneTable(::grpc::ServerContext* context, const ::seshat::CloneTableRequest* request, ::seshat::CloneTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::GetProbabilities(::grpc::ServerContext* context, const ::seshat::GetProbabilitiesRequest* request, ::seshat::GetProbabilitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::TestDistribution(::grpc::ServerContext* context, const ::seshat::TestDistributionRequest* request, ::seshat::TestDistributionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SelectablesService::Service::MergeTables(::grpc::ServerContext* context, const ::seshat::MergeTablesRequest* request, ::seshat::MergeTablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace seshat
#include <grpcpp/ports_undef.inc>


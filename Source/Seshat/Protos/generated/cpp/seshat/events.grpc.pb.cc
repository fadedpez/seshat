// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/events.proto

#include "seshat/events.pb.h"
#include "seshat/events.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace seshat {

static const char* EventService_method_names[] = {
  "/seshat.EventService/PublishEvent",
  "/seshat.EventService/SubscribeToEvents",
  "/seshat.EventService/SubscribeToAllEvents",
  "/seshat.EventService/GetEventHistory",
  "/seshat.EventService/ClearEventHistory",
  "/seshat.EventService/GetSubscriptions",
  "/seshat.EventService/Unsubscribe",
};

std::unique_ptr< EventService::Stub> EventService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EventService::Stub> stub(new EventService::Stub(channel, options));
  return stub;
}

EventService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PublishEvent_(EventService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeToEvents_(EventService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeToAllEvents_(EventService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetEventHistory_(EventService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearEventHistory_(EventService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubscriptions_(EventService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unsubscribe_(EventService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EventService::Stub::PublishEvent(::grpc::ClientContext* context, const ::seshat::PublishEventRequest& request, ::seshat::PublishEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::PublishEventRequest, ::seshat::PublishEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PublishEvent_, context, request, response);
}

void EventService::Stub::async::PublishEvent(::grpc::ClientContext* context, const ::seshat::PublishEventRequest* request, ::seshat::PublishEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::PublishEventRequest, ::seshat::PublishEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishEvent_, context, request, response, std::move(f));
}

void EventService::Stub::async::PublishEvent(::grpc::ClientContext* context, const ::seshat::PublishEventRequest* request, ::seshat::PublishEventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::PublishEventResponse>* EventService::Stub::PrepareAsyncPublishEventRaw(::grpc::ClientContext* context, const ::seshat::PublishEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::PublishEventResponse, ::seshat::PublishEventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PublishEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::PublishEventResponse>* EventService::Stub::AsyncPublishEventRaw(::grpc::ClientContext* context, const ::seshat::PublishEventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::seshat::GameEvent>* EventService::Stub::SubscribeToEventsRaw(::grpc::ClientContext* context, const ::seshat::SubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::seshat::GameEvent>::Create(channel_.get(), rpcmethod_SubscribeToEvents_, context, request);
}

void EventService::Stub::async::SubscribeToEvents(::grpc::ClientContext* context, const ::seshat::SubscribeRequest* request, ::grpc::ClientReadReactor< ::seshat::GameEvent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::seshat::GameEvent>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::seshat::GameEvent>* EventService::Stub::AsyncSubscribeToEventsRaw(::grpc::ClientContext* context, const ::seshat::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::seshat::GameEvent>::Create(channel_.get(), cq, rpcmethod_SubscribeToEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::seshat::GameEvent>* EventService::Stub::PrepareAsyncSubscribeToEventsRaw(::grpc::ClientContext* context, const ::seshat::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::seshat::GameEvent>::Create(channel_.get(), cq, rpcmethod_SubscribeToEvents_, context, request, false, nullptr);
}

::grpc::ClientReader< ::seshat::GameEvent>* EventService::Stub::SubscribeToAllEventsRaw(::grpc::ClientContext* context, const ::seshat::SubscribeAllRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::seshat::GameEvent>::Create(channel_.get(), rpcmethod_SubscribeToAllEvents_, context, request);
}

void EventService::Stub::async::SubscribeToAllEvents(::grpc::ClientContext* context, const ::seshat::SubscribeAllRequest* request, ::grpc::ClientReadReactor< ::seshat::GameEvent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::seshat::GameEvent>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToAllEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::seshat::GameEvent>* EventService::Stub::AsyncSubscribeToAllEventsRaw(::grpc::ClientContext* context, const ::seshat::SubscribeAllRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::seshat::GameEvent>::Create(channel_.get(), cq, rpcmethod_SubscribeToAllEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::seshat::GameEvent>* EventService::Stub::PrepareAsyncSubscribeToAllEventsRaw(::grpc::ClientContext* context, const ::seshat::SubscribeAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::seshat::GameEvent>::Create(channel_.get(), cq, rpcmethod_SubscribeToAllEvents_, context, request, false, nullptr);
}

::grpc::Status EventService::Stub::GetEventHistory(::grpc::ClientContext* context, const ::seshat::EventHistoryRequest& request, ::seshat::EventHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::EventHistoryRequest, ::seshat::EventHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEventHistory_, context, request, response);
}

void EventService::Stub::async::GetEventHistory(::grpc::ClientContext* context, const ::seshat::EventHistoryRequest* request, ::seshat::EventHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::EventHistoryRequest, ::seshat::EventHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventHistory_, context, request, response, std::move(f));
}

void EventService::Stub::async::GetEventHistory(::grpc::ClientContext* context, const ::seshat::EventHistoryRequest* request, ::seshat::EventHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::EventHistoryResponse>* EventService::Stub::PrepareAsyncGetEventHistoryRaw(::grpc::ClientContext* context, const ::seshat::EventHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::EventHistoryResponse, ::seshat::EventHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEventHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::EventHistoryResponse>* EventService::Stub::AsyncGetEventHistoryRaw(::grpc::ClientContext* context, const ::seshat::EventHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEventHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EventService::Stub::ClearEventHistory(::grpc::ClientContext* context, const ::seshat::ClearEventHistoryRequest& request, ::seshat::ClearEventHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ClearEventHistoryRequest, ::seshat::ClearEventHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearEventHistory_, context, request, response);
}

void EventService::Stub::async::ClearEventHistory(::grpc::ClientContext* context, const ::seshat::ClearEventHistoryRequest* request, ::seshat::ClearEventHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ClearEventHistoryRequest, ::seshat::ClearEventHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearEventHistory_, context, request, response, std::move(f));
}

void EventService::Stub::async::ClearEventHistory(::grpc::ClientContext* context, const ::seshat::ClearEventHistoryRequest* request, ::seshat::ClearEventHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearEventHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ClearEventHistoryResponse>* EventService::Stub::PrepareAsyncClearEventHistoryRaw(::grpc::ClientContext* context, const ::seshat::ClearEventHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ClearEventHistoryResponse, ::seshat::ClearEventHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearEventHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ClearEventHistoryResponse>* EventService::Stub::AsyncClearEventHistoryRaw(::grpc::ClientContext* context, const ::seshat::ClearEventHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearEventHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EventService::Stub::GetSubscriptions(::grpc::ClientContext* context, const ::seshat::GetSubscriptionsRequest& request, ::seshat::GetSubscriptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetSubscriptionsRequest, ::seshat::GetSubscriptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSubscriptions_, context, request, response);
}

void EventService::Stub::async::GetSubscriptions(::grpc::ClientContext* context, const ::seshat::GetSubscriptionsRequest* request, ::seshat::GetSubscriptionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetSubscriptionsRequest, ::seshat::GetSubscriptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscriptions_, context, request, response, std::move(f));
}

void EventService::Stub::async::GetSubscriptions(::grpc::ClientContext* context, const ::seshat::GetSubscriptionsRequest* request, ::seshat::GetSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscriptions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSubscriptionsResponse>* EventService::Stub::PrepareAsyncGetSubscriptionsRaw(::grpc::ClientContext* context, const ::seshat::GetSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetSubscriptionsResponse, ::seshat::GetSubscriptionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSubscriptions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSubscriptionsResponse>* EventService::Stub::AsyncGetSubscriptionsRaw(::grpc::ClientContext* context, const ::seshat::GetSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubscriptionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EventService::Stub::Unsubscribe(::grpc::ClientContext* context, const ::seshat::UnsubscribeRequest& request, ::seshat::UnsubscribeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::UnsubscribeRequest, ::seshat::UnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unsubscribe_, context, request, response);
}

void EventService::Stub::async::Unsubscribe(::grpc::ClientContext* context, const ::seshat::UnsubscribeRequest* request, ::seshat::UnsubscribeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::UnsubscribeRequest, ::seshat::UnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, std::move(f));
}

void EventService::Stub::async::Unsubscribe(::grpc::ClientContext* context, const ::seshat::UnsubscribeRequest* request, ::seshat::UnsubscribeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::UnsubscribeResponse>* EventService::Stub::PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::seshat::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::UnsubscribeResponse, ::seshat::UnsubscribeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unsubscribe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::UnsubscribeResponse>* EventService::Stub::AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::seshat::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnsubscribeRaw(context, request, cq);
  result->StartCall();
  return result;
}

EventService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventService::Service, ::seshat::PublishEventRequest, ::seshat::PublishEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::PublishEventRequest* req,
             ::seshat::PublishEventResponse* resp) {
               return service->PublishEvent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EventService::Service, ::seshat::SubscribeRequest, ::seshat::GameEvent>(
          [](EventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::SubscribeRequest* req,
             ::grpc::ServerWriter<::seshat::GameEvent>* writer) {
               return service->SubscribeToEvents(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EventService::Service, ::seshat::SubscribeAllRequest, ::seshat::GameEvent>(
          [](EventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::SubscribeAllRequest* req,
             ::grpc::ServerWriter<::seshat::GameEvent>* writer) {
               return service->SubscribeToAllEvents(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventService::Service, ::seshat::EventHistoryRequest, ::seshat::EventHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::EventHistoryRequest* req,
             ::seshat::EventHistoryResponse* resp) {
               return service->GetEventHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventService::Service, ::seshat::ClearEventHistoryRequest, ::seshat::ClearEventHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ClearEventHistoryRequest* req,
             ::seshat::ClearEventHistoryResponse* resp) {
               return service->ClearEventHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventService::Service, ::seshat::GetSubscriptionsRequest, ::seshat::GetSubscriptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetSubscriptionsRequest* req,
             ::seshat::GetSubscriptionsResponse* resp) {
               return service->GetSubscriptions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventService::Service, ::seshat::UnsubscribeRequest, ::seshat::UnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::UnsubscribeRequest* req,
             ::seshat::UnsubscribeResponse* resp) {
               return service->Unsubscribe(ctx, req, resp);
             }, this)));
}

EventService::Service::~Service() {
}

::grpc::Status EventService::Service::PublishEvent(::grpc::ServerContext* context, const ::seshat::PublishEventRequest* request, ::seshat::PublishEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventService::Service::SubscribeToEvents(::grpc::ServerContext* context, const ::seshat::SubscribeRequest* request, ::grpc::ServerWriter< ::seshat::GameEvent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventService::Service::SubscribeToAllEvents(::grpc::ServerContext* context, const ::seshat::SubscribeAllRequest* request, ::grpc::ServerWriter< ::seshat::GameEvent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventService::Service::GetEventHistory(::grpc::ServerContext* context, const ::seshat::EventHistoryRequest* request, ::seshat::EventHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventService::Service::ClearEventHistory(::grpc::ServerContext* context, const ::seshat::ClearEventHistoryRequest* request, ::seshat::ClearEventHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventService::Service::GetSubscriptions(::grpc::ServerContext* context, const ::seshat::GetSubscriptionsRequest* request, ::seshat::GetSubscriptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventService::Service::Unsubscribe(::grpc::ServerContext* context, const ::seshat::UnsubscribeRequest* request, ::seshat::UnsubscribeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace seshat
#include <grpcpp/ports_undef.inc>


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: seshat/dice.proto
// Protobuf C++ Version: 6.31.1

#include "seshat/dice.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace seshat {

inline constexpr RollRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sides_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RollRequest::RollRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollRequestDefaultTypeInternal() {}
  union {
    RollRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollRequestDefaultTypeInternal _RollRequest_default_instance_;

inline constexpr RollRecord::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        individual_rolls_{},
        _individual_rolls_cached_byte_size_{0},
        formula_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{::int64_t{0}},
        result_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RollRecord::RollRecord(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollRecord_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollRecordDefaultTypeInternal() {}
  union {
    RollRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollRecordDefaultTypeInternal _RollRecord_default_instance_;

inline constexpr RollMultipleRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        count_{0},
        sides_{0},
        drop_lowest_{false},
        drop_highest_{false},
        keep_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RollMultipleRequest::RollMultipleRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollMultipleRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollMultipleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollMultipleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollMultipleRequestDefaultTypeInternal() {}
  union {
    RollMultipleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollMultipleRequestDefaultTypeInternal _RollMultipleRequest_default_instance_;

inline constexpr RollHistoryRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        since_timestamp_{::int64_t{0}},
        limit_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RollHistoryRequest::RollHistoryRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollHistoryRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollHistoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollHistoryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollHistoryRequestDefaultTypeInternal() {}
  union {
    RollHistoryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollHistoryRequestDefaultTypeInternal _RollHistoryRequest_default_instance_;

inline constexpr RollFormulaRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        formula_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR RollFormulaRequest::RollFormulaRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollFormulaRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollFormulaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollFormulaRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollFormulaRequestDefaultTypeInternal() {}
  union {
    RollFormulaRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollFormulaRequestDefaultTypeInternal _RollFormulaRequest_default_instance_;

inline constexpr FairnessTestRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sides_{0},
        sample_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FairnessTestRequest::FairnessTestRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FairnessTestRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FairnessTestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FairnessTestRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FairnessTestRequestDefaultTypeInternal() {}
  union {
    FairnessTestRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FairnessTestRequestDefaultTypeInternal _FairnessTestRequest_default_instance_;

inline constexpr DiceGroup::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rolls_{},
        _rolls_cached_byte_size_{0},
        operation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        count_{0},
        sides_{0},
        subtotal_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DiceGroup::DiceGroup(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DiceGroup_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DiceGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiceGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiceGroupDefaultTypeInternal() {}
  union {
    DiceGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiceGroupDefaultTypeInternal _DiceGroup_default_instance_;

inline constexpr RollResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{nullptr},
        timestamp_{::int64_t{0}},
        result_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RollResponse::RollResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollResponseDefaultTypeInternal() {}
  union {
    RollResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollResponseDefaultTypeInternal _RollResponse_default_instance_;

inline constexpr RollMultipleResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rolls_{},
        _rolls_cached_byte_size_{0},
        kept_rolls_{},
        _kept_rolls_cached_byte_size_{0},
        dropped_rolls_{},
        _dropped_rolls_cached_byte_size_{0},
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{nullptr},
        timestamp_{::int64_t{0}},
        total_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RollMultipleResponse::RollMultipleResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollMultipleResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollMultipleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollMultipleResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollMultipleResponseDefaultTypeInternal() {}
  union {
    RollMultipleResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollMultipleResponseDefaultTypeInternal _RollMultipleResponse_default_instance_;

inline constexpr RollHistoryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rolls_{},
        status_{nullptr},
        total_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RollHistoryResponse::RollHistoryResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollHistoryResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollHistoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollHistoryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollHistoryResponseDefaultTypeInternal() {}
  union {
    RollHistoryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollHistoryResponseDefaultTypeInternal _RollHistoryResponse_default_instance_;

inline constexpr RollFormulaResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        groups_{},
        formula_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        context_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{nullptr},
        total_{0},
        modifier_{0},
        timestamp_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR RollFormulaResponse::RollFormulaResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RollFormulaResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RollFormulaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollFormulaResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollFormulaResponseDefaultTypeInternal() {}
  union {
    RollFormulaResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollFormulaResponseDefaultTypeInternal _RollFormulaResponse_default_instance_;

inline constexpr FairnessTestResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        distribution_{},
        _distribution_cached_byte_size_{0},
        status_{nullptr},
        chi_squared_{0},
        p_value_{0},
        is_fair_{false},
        sample_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FairnessTestResponse::FairnessTestResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FairnessTestResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FairnessTestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FairnessTestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FairnessTestResponseDefaultTypeInternal() {}
  union {
    FairnessTestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FairnessTestResponseDefaultTypeInternal _FairnessTestResponse_default_instance_;
}  // namespace seshat
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_seshat_2fdice_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_seshat_2fdice_2eproto = nullptr;
const ::uint32_t
    TableStruct_seshat_2fdice_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::RollRequest, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::RollRequest, _impl_.sides_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollRequest, _impl_.context_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollRequest, _impl_.entity_id_),
        2,
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::RollResponse, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::RollResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollResponse, _impl_.context_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollResponse, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollResponse, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollResponse, _impl_.status_),
        4,
        0,
        1,
        3,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleRequest, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleRequest, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleRequest, _impl_.sides_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleRequest, _impl_.context_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleRequest, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleRequest, _impl_.drop_lowest_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleRequest, _impl_.drop_highest_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleRequest, _impl_.keep_count_),
        2,
        3,
        0,
        1,
        4,
        5,
        6,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleResponse, _impl_._has_bits_),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleResponse, _impl_.rolls_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleResponse, _impl_.total_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleResponse, _impl_.kept_rolls_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleResponse, _impl_.dropped_rolls_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleResponse, _impl_.context_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleResponse, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleResponse, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollMultipleResponse, _impl_.status_),
        ~0u,
        4,
        ~0u,
        ~0u,
        0,
        1,
        3,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaRequest, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaRequest, _impl_.formula_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaRequest, _impl_.context_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaRequest, _impl_.entity_id_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaResponse, _impl_._has_bits_),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaResponse, _impl_.formula_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaResponse, _impl_.groups_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaResponse, _impl_.total_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaResponse, _impl_.modifier_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaResponse, _impl_.context_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaResponse, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaResponse, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollFormulaResponse, _impl_.status_),
        0,
        ~0u,
        4,
        5,
        1,
        2,
        6,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::DiceGroup, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::DiceGroup, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::seshat::DiceGroup, _impl_.sides_),
        PROTOBUF_FIELD_OFFSET(::seshat::DiceGroup, _impl_.rolls_),
        PROTOBUF_FIELD_OFFSET(::seshat::DiceGroup, _impl_.subtotal_),
        PROTOBUF_FIELD_OFFSET(::seshat::DiceGroup, _impl_.operation_),
        1,
        2,
        ~0u,
        3,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::RollHistoryRequest, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::RollHistoryRequest, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollHistoryRequest, _impl_.context_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollHistoryRequest, _impl_.limit_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollHistoryRequest, _impl_.since_timestamp_),
        0,
        1,
        3,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::RollHistoryResponse, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::RollHistoryResponse, _impl_.rolls_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollHistoryResponse, _impl_.total_count_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollHistoryResponse, _impl_.status_),
        ~0u,
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::RollRecord, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::RollRecord, _impl_.formula_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollRecord, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollRecord, _impl_.context_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollRecord, _impl_.entity_id_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollRecord, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::seshat::RollRecord, _impl_.individual_rolls_),
        0,
        4,
        1,
        2,
        3,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::FairnessTestRequest, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::FairnessTestRequest, _impl_.sides_),
        PROTOBUF_FIELD_OFFSET(::seshat::FairnessTestRequest, _impl_.sample_size_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::seshat::FairnessTestResponse, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::seshat::FairnessTestResponse, _impl_.distribution_),
        PROTOBUF_FIELD_OFFSET(::seshat::FairnessTestResponse, _impl_.chi_squared_),
        PROTOBUF_FIELD_OFFSET(::seshat::FairnessTestResponse, _impl_.p_value_),
        PROTOBUF_FIELD_OFFSET(::seshat::FairnessTestResponse, _impl_.is_fair_),
        PROTOBUF_FIELD_OFFSET(::seshat::FairnessTestResponse, _impl_.sample_size_),
        PROTOBUF_FIELD_OFFSET(::seshat::FairnessTestResponse, _impl_.status_),
        ~0u,
        1,
        2,
        3,
        4,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::seshat::RollRequest)},
        {9, sizeof(::seshat::RollResponse)},
        {22, sizeof(::seshat::RollMultipleRequest)},
        {39, sizeof(::seshat::RollMultipleResponse)},
        {58, sizeof(::seshat::RollFormulaRequest)},
        {67, sizeof(::seshat::RollFormulaResponse)},
        {86, sizeof(::seshat::DiceGroup)},
        {99, sizeof(::seshat::RollHistoryRequest)},
        {110, sizeof(::seshat::RollHistoryResponse)},
        {119, sizeof(::seshat::RollRecord)},
        {134, sizeof(::seshat::FairnessTestRequest)},
        {141, sizeof(::seshat::FairnessTestResponse)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::seshat::_RollRequest_default_instance_._instance,
    &::seshat::_RollResponse_default_instance_._instance,
    &::seshat::_RollMultipleRequest_default_instance_._instance,
    &::seshat::_RollMultipleResponse_default_instance_._instance,
    &::seshat::_RollFormulaRequest_default_instance_._instance,
    &::seshat::_RollFormulaResponse_default_instance_._instance,
    &::seshat::_DiceGroup_default_instance_._instance,
    &::seshat::_RollHistoryRequest_default_instance_._instance,
    &::seshat::_RollHistoryResponse_default_instance_._instance,
    &::seshat::_RollRecord_default_instance_._instance,
    &::seshat::_FairnessTestRequest_default_instance_._instance,
    &::seshat::_FairnessTestResponse_default_instance_._instance,
};
const char descriptor_table_protodef_seshat_2fdice_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021seshat/dice.proto\022\006seshat\032\023seshat/comm"
    "on.proto\"Z\n\013RollRequest\022\024\n\005sides\030\001 \001(\005R\005"
    "sides\022\030\n\007context\030\002 \001(\tR\007context\022\033\n\tentit"
    "y_id\030\003 \001(\tR\010entityId\"\243\001\n\014RollResponse\022\026\n"
    "\006result\030\001 \001(\005R\006result\022\030\n\007context\030\002 \001(\tR\007"
    "context\022\033\n\tentity_id\030\003 \001(\tR\010entityId\022\034\n\t"
    "timestamp\030\004 \001(\003R\ttimestamp\022&\n\006status\030\005 \001"
    "(\0132\016.seshat.ResultR\006status\"\333\001\n\023RollMulti"
    "pleRequest\022\024\n\005count\030\001 \001(\005R\005count\022\024\n\005side"
    "s\030\002 \001(\005R\005sides\022\030\n\007context\030\003 \001(\tR\007context"
    "\022\033\n\tentity_id\030\004 \001(\tR\010entityId\022\037\n\013drop_lo"
    "west\030\005 \001(\010R\ndropLowest\022!\n\014drop_highest\030\006"
    " \001(\010R\013dropHighest\022\035\n\nkeep_count\030\007 \001(\005R\tk"
    "eepCount\"\203\002\n\024RollMultipleResponse\022\024\n\005rol"
    "ls\030\001 \003(\005R\005rolls\022\024\n\005total\030\002 \001(\005R\005total\022\035\n"
    "\nkept_rolls\030\003 \003(\005R\tkeptRolls\022#\n\rdropped_"
    "rolls\030\004 \003(\005R\014droppedRolls\022\030\n\007context\030\005 \001"
    "(\tR\007context\022\033\n\tentity_id\030\006 \001(\tR\010entityId"
    "\022\034\n\ttimestamp\030\007 \001(\003R\ttimestamp\022&\n\006status"
    "\030\010 \001(\0132\016.seshat.ResultR\006status\"e\n\022RollFo"
    "rmulaRequest\022\030\n\007formula\030\001 \001(\tR\007formula\022\030"
    "\n\007context\030\002 \001(\tR\007context\022\033\n\tentity_id\030\003 "
    "\001(\tR\010entityId\"\211\002\n\023RollFormulaResponse\022\030\n"
    "\007formula\030\001 \001(\tR\007formula\022)\n\006groups\030\002 \003(\0132"
    "\021.seshat.DiceGroupR\006groups\022\024\n\005total\030\003 \001("
    "\005R\005total\022\032\n\010modifier\030\004 \001(\005R\010modifier\022\030\n\007"
    "context\030\005 \001(\tR\007context\022\033\n\tentity_id\030\006 \001("
    "\tR\010entityId\022\034\n\ttimestamp\030\007 \001(\003R\ttimestam"
    "p\022&\n\006status\030\010 \001(\0132\016.seshat.ResultR\006statu"
    "s\"\207\001\n\tDiceGroup\022\024\n\005count\030\001 \001(\005R\005count\022\024\n"
    "\005sides\030\002 \001(\005R\005sides\022\024\n\005rolls\030\003 \003(\005R\005roll"
    "s\022\032\n\010subtotal\030\004 \001(\005R\010subtotal\022\034\n\toperati"
    "on\030\005 \001(\tR\toperation\"\212\001\n\022RollHistoryReque"
    "st\022\033\n\tentity_id\030\001 \001(\tR\010entityId\022\030\n\007conte"
    "xt\030\002 \001(\tR\007context\022\024\n\005limit\030\003 \001(\005R\005limit\022"
    "\'\n\017since_timestamp\030\004 \001(\003R\016sinceTimestamp"
    "\"\210\001\n\023RollHistoryResponse\022(\n\005rolls\030\001 \003(\0132"
    "\022.seshat.RollRecordR\005rolls\022\037\n\013total_coun"
    "t\030\002 \001(\005R\ntotalCount\022&\n\006status\030\003 \001(\0132\016.se"
    "shat.ResultR\006status\"\276\001\n\nRollRecord\022\030\n\007fo"
    "rmula\030\001 \001(\tR\007formula\022\026\n\006result\030\002 \001(\005R\006re"
    "sult\022\030\n\007context\030\003 \001(\tR\007context\022\033\n\tentity"
    "_id\030\004 \001(\tR\010entityId\022\034\n\ttimestamp\030\005 \001(\003R\t"
    "timestamp\022)\n\020individual_rolls\030\006 \003(\005R\017ind"
    "ividualRolls\"L\n\023FairnessTestRequest\022\024\n\005s"
    "ides\030\001 \001(\005R\005sides\022\037\n\013sample_size\030\002 \001(\005R\n"
    "sampleSize\"\326\001\n\024FairnessTestResponse\022\"\n\014d"
    "istribution\030\001 \003(\005R\014distribution\022\037\n\013chi_s"
    "quared\030\002 \001(\001R\nchiSquared\022\027\n\007p_value\030\003 \001("
    "\001R\006pValue\022\027\n\007is_fair\030\004 \001(\010R\006isFair\022\037\n\013sa"
    "mple_size\030\005 \001(\005R\nsampleSize\022&\n\006status\030\006 "
    "\001(\0132\016.seshat.ResultR\006status2\247\003\n\013DiceServ"
    "ice\0221\n\004Roll\022\023.seshat.RollRequest\032\024.sesha"
    "t.RollResponse\022I\n\014RollMultiple\022\033.seshat."
    "RollMultipleRequest\032\034.seshat.RollMultipl"
    "eResponse\022F\n\013RollFormula\022\032.seshat.RollFo"
    "rmulaRequest\032\033.seshat.RollFormulaRespons"
    "e\022<\n\013StreamRolls\022\023.seshat.RollRequest\032\024."
    "seshat.RollResponse(\0010\001\022I\n\016GetRollHistor"
    "y\022\032.seshat.RollHistoryRequest\032\033.seshat.R"
    "ollHistoryResponse\022I\n\014TestFairness\022\033.ses"
    "hat.FairnessTestRequest\032\034.seshat.Fairnes"
    "sTestResponseB!Z\037github.com/seshat/proto"
    "s/seshatb\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_seshat_2fdice_2eproto_deps[1] = {
        &::descriptor_table_seshat_2fcommon_2eproto,
};
static ::absl::once_flag descriptor_table_seshat_2fdice_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_seshat_2fdice_2eproto = {
    false,
    false,
    2536,
    descriptor_table_protodef_seshat_2fdice_2eproto,
    "seshat/dice.proto",
    &descriptor_table_seshat_2fdice_2eproto_once,
    descriptor_table_seshat_2fdice_2eproto_deps,
    1,
    12,
    schemas,
    file_default_instances,
    TableStruct_seshat_2fdice_2eproto::offsets,
    file_level_enum_descriptors_seshat_2fdice_2eproto,
    file_level_service_descriptors_seshat_2fdice_2eproto,
};
namespace seshat {
// ===================================================================

class RollRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollRequest, _impl_._has_bits_);
};

RollRequest::RollRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.RollRequest)
}
PROTOBUF_NDEBUG_INLINE RollRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::RollRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        context_(arena, from.context_),
        entity_id_(arena, from.entity_id_) {}

RollRequest::RollRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.sides_ = from._impl_.sides_;

  // @@protoc_insertion_point(copy_constructor:seshat.RollRequest)
}
PROTOBUF_NDEBUG_INLINE RollRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        context_(arena),
        entity_id_(arena) {}

inline void RollRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.sides_ = {};
}
RollRequest::~RollRequest() {
  // @@protoc_insertion_point(destructor:seshat.RollRequest)
  SharedDtor(*this);
}
inline void RollRequest::SharedDtor(MessageLite& self) {
  RollRequest& this_ = static_cast<RollRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.context_.Destroy();
  this_._impl_.entity_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollRequest(arena);
}
constexpr auto RollRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RollRequest),
                                            alignof(RollRequest));
}
constexpr auto RollRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollRequest>(), &RollRequest::ByteSizeLong,
              &RollRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollRequest, _impl_._cached_size_),
          false,
      },
      &RollRequest::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollRequest_class_data_ =
        RollRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollRequest_class_data_.tc_table);
  return RollRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 43, 2>
RollRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RollRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::RollRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 sides = 1 [json_name = "sides"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollRequest, _impl_.sides_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(RollRequest, _impl_.sides_)}},
    // string context = 2 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RollRequest, _impl_.context_)}},
    // string entity_id = 3 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(RollRequest, _impl_.entity_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 sides = 1 [json_name = "sides"];
    {PROTOBUF_FIELD_OFFSET(RollRequest, _impl_.sides_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string context = 2 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(RollRequest, _impl_.context_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 3 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(RollRequest, _impl_.entity_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\0\7\11\0\0\0\0"
    "seshat.RollRequest"
    "context"
    "entity_id"
  }},
};
PROTOBUF_NOINLINE void RollRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.RollRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.sides_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollRequest& this_ = static_cast<const RollRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.RollRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 sides = 1 [json_name = "sides"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_sides() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_sides(), target);
    }
  }

  // string context = 2 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollRequest.context");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string entity_id = 3 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollRequest.entity_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.RollRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollRequest::ByteSizeLong(const MessageLite& base) {
  const RollRequest& this_ = static_cast<const RollRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollRequest::ByteSizeLong() const {
  const RollRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.RollRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string context = 2 [json_name = "context"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
    // string entity_id = 3 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // int32 sides = 1 [json_name = "sides"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_sides() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_sides());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollRequest*>(&to_msg);
  auto& from = static_cast<const RollRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.RollRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_sides() != 0) {
        _this->_impl_.sides_ = from._impl_.sides_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollRequest::CopyFrom(const RollRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.RollRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollRequest::InternalSwap(RollRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  swap(_impl_.sides_, other->_impl_.sides_);
}

::google::protobuf::Metadata RollRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RollResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollResponse, _impl_._has_bits_);
};

void RollResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
RollResponse::RollResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.RollResponse)
}
PROTOBUF_NDEBUG_INLINE RollResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::RollResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        context_(arena, from.context_),
        entity_id_(arena, from.entity_id_) {}

RollResponse::RollResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.status_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, result_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::result_));

  // @@protoc_insertion_point(copy_constructor:seshat.RollResponse)
}
PROTOBUF_NDEBUG_INLINE RollResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        context_(arena),
        entity_id_(arena) {}

inline void RollResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           0,
           offsetof(Impl_, result_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::result_));
}
RollResponse::~RollResponse() {
  // @@protoc_insertion_point(destructor:seshat.RollResponse)
  SharedDtor(*this);
}
inline void RollResponse::SharedDtor(MessageLite& self) {
  RollResponse& this_ = static_cast<RollResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.context_.Destroy();
  this_._impl_.entity_id_.Destroy();
  delete this_._impl_.status_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollResponse(arena);
}
constexpr auto RollResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RollResponse),
                                            alignof(RollResponse));
}
constexpr auto RollResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollResponse>(), &RollResponse::ByteSizeLong,
              &RollResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollResponse, _impl_._cached_size_),
          false,
      },
      &RollResponse::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollResponse_class_data_ =
        RollResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollResponse_class_data_.tc_table);
  return RollResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 44, 2>
RollResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollResponse, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RollResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::RollResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 result = 1 [json_name = "result"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollResponse, _impl_.result_), 4>(),
     {8, 4, 0, PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.result_)}},
    // string context = 2 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.context_)}},
    // string entity_id = 3 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.entity_id_)}},
    // int64 timestamp = 4 [json_name = "timestamp"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RollResponse, _impl_.timestamp_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.timestamp_)}},
    // .seshat.Result status = 5 [json_name = "status"];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.status_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 result = 1 [json_name = "result"];
    {PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.result_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string context = 2 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.context_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 3 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.entity_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 4 [json_name = "timestamp"];
    {PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.timestamp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .seshat.Result status = 5 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.status_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::seshat::Result>()},
  }},
  {{
    "\23\0\7\11\0\0\0\0"
    "seshat.RollResponse"
    "context"
    "entity_id"
  }},
};
PROTOBUF_NOINLINE void RollResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.RollResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000018u) != 0) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollResponse& this_ = static_cast<const RollResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.RollResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 result = 1 [json_name = "result"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_result() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_result(), target);
    }
  }

  // string context = 2 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollResponse.context");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string entity_id = 3 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollResponse.entity_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // int64 timestamp = 4 [json_name = "timestamp"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
              stream, this_._internal_timestamp(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .seshat.Result status = 5 [json_name = "status"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.status_, this_._impl_.status_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.RollResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollResponse::ByteSizeLong(const MessageLite& base) {
  const RollResponse& this_ = static_cast<const RollResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollResponse::ByteSizeLong() const {
  const RollResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.RollResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string context = 2 [json_name = "context"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
    // string entity_id = 3 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // .seshat.Result status = 5 [json_name = "status"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.status_);
    }
    // int64 timestamp = 4 [json_name = "timestamp"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
    // int32 result = 1 [json_name = "result"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_result() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_result());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollResponse*>(&to_msg);
  auto& from = static_cast<const RollResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.RollResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.status_ != nullptr);
      if (_this->_impl_.status_ == nullptr) {
        _this->_impl_.status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_);
      } else {
        _this->_impl_.status_->MergeFrom(*from._impl_.status_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_result() != 0) {
        _this->_impl_.result_ = from._impl_.result_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollResponse::CopyFrom(const RollResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.RollResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollResponse::InternalSwap(RollResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.result_)
      + sizeof(RollResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(RollResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::google::protobuf::Metadata RollResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RollMultipleRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollMultipleRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_._has_bits_);
};

RollMultipleRequest::RollMultipleRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollMultipleRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.RollMultipleRequest)
}
PROTOBUF_NDEBUG_INLINE RollMultipleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::RollMultipleRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        context_(arena, from.context_),
        entity_id_(arena, from.entity_id_) {}

RollMultipleRequest::RollMultipleRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollMultipleRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollMultipleRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollMultipleRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, count_),
           offsetof(Impl_, keep_count_) -
               offsetof(Impl_, count_) +
               sizeof(Impl_::keep_count_));

  // @@protoc_insertion_point(copy_constructor:seshat.RollMultipleRequest)
}
PROTOBUF_NDEBUG_INLINE RollMultipleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        context_(arena),
        entity_id_(arena) {}

inline void RollMultipleRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, count_),
           0,
           offsetof(Impl_, keep_count_) -
               offsetof(Impl_, count_) +
               sizeof(Impl_::keep_count_));
}
RollMultipleRequest::~RollMultipleRequest() {
  // @@protoc_insertion_point(destructor:seshat.RollMultipleRequest)
  SharedDtor(*this);
}
inline void RollMultipleRequest::SharedDtor(MessageLite& self) {
  RollMultipleRequest& this_ = static_cast<RollMultipleRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.context_.Destroy();
  this_._impl_.entity_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollMultipleRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollMultipleRequest(arena);
}
constexpr auto RollMultipleRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RollMultipleRequest),
                                            alignof(RollMultipleRequest));
}
constexpr auto RollMultipleRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollMultipleRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollMultipleRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollMultipleRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollMultipleRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollMultipleRequest>(), &RollMultipleRequest::ByteSizeLong,
              &RollMultipleRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_._cached_size_),
          false,
      },
      &RollMultipleRequest::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollMultipleRequest_class_data_ =
        RollMultipleRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollMultipleRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollMultipleRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollMultipleRequest_class_data_.tc_table);
  return RollMultipleRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 51, 2>
RollMultipleRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RollMultipleRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::RollMultipleRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 count = 1 [json_name = "count"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollMultipleRequest, _impl_.count_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.count_)}},
    // int32 sides = 2 [json_name = "sides"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollMultipleRequest, _impl_.sides_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.sides_)}},
    // string context = 3 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.context_)}},
    // string entity_id = 4 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.entity_id_)}},
    // bool drop_lowest = 5 [json_name = "dropLowest"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RollMultipleRequest, _impl_.drop_lowest_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.drop_lowest_)}},
    // bool drop_highest = 6 [json_name = "dropHighest"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RollMultipleRequest, _impl_.drop_highest_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.drop_highest_)}},
    // int32 keep_count = 7 [json_name = "keepCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollMultipleRequest, _impl_.keep_count_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.keep_count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 count = 1 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.count_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 sides = 2 [json_name = "sides"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.sides_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string context = 3 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.context_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 4 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.entity_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool drop_lowest = 5 [json_name = "dropLowest"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.drop_lowest_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool drop_highest = 6 [json_name = "dropHighest"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.drop_highest_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // int32 keep_count = 7 [json_name = "keepCount"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.keep_count_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\32\0\0\7\11\0\0\0"
    "seshat.RollMultipleRequest"
    "context"
    "entity_id"
  }},
};
PROTOBUF_NOINLINE void RollMultipleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.RollMultipleRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000007cu) != 0) {
    ::memset(&_impl_.count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.keep_count_) -
        reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.keep_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollMultipleRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollMultipleRequest& this_ = static_cast<const RollMultipleRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollMultipleRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollMultipleRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.RollMultipleRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 count = 1 [json_name = "count"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_count(), target);
    }
  }

  // int32 sides = 2 [json_name = "sides"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_sides() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_sides(), target);
    }
  }

  // string context = 3 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollMultipleRequest.context");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string entity_id = 4 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollMultipleRequest.entity_id");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // bool drop_lowest = 5 [json_name = "dropLowest"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_drop_lowest() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_drop_lowest(), target);
    }
  }

  // bool drop_highest = 6 [json_name = "dropHighest"];
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_drop_highest() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_drop_highest(), target);
    }
  }

  // int32 keep_count = 7 [json_name = "keepCount"];
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_keep_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
              stream, this_._internal_keep_count(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.RollMultipleRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollMultipleRequest::ByteSizeLong(const MessageLite& base) {
  const RollMultipleRequest& this_ = static_cast<const RollMultipleRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollMultipleRequest::ByteSizeLong() const {
  const RollMultipleRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.RollMultipleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // string context = 3 [json_name = "context"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
    // string entity_id = 4 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // int32 count = 1 [json_name = "count"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_count());
      }
    }
    // int32 sides = 2 [json_name = "sides"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_sides() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_sides());
      }
    }
    // bool drop_lowest = 5 [json_name = "dropLowest"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_drop_lowest() != 0) {
        total_size += 2;
      }
    }
    // bool drop_highest = 6 [json_name = "dropHighest"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_drop_highest() != 0) {
        total_size += 2;
      }
    }
    // int32 keep_count = 7 [json_name = "keepCount"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_keep_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_keep_count());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollMultipleRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollMultipleRequest*>(&to_msg);
  auto& from = static_cast<const RollMultipleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.RollMultipleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_count() != 0) {
        _this->_impl_.count_ = from._impl_.count_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_sides() != 0) {
        _this->_impl_.sides_ = from._impl_.sides_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_drop_lowest() != 0) {
        _this->_impl_.drop_lowest_ = from._impl_.drop_lowest_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_drop_highest() != 0) {
        _this->_impl_.drop_highest_ = from._impl_.drop_highest_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_keep_count() != 0) {
        _this->_impl_.keep_count_ = from._impl_.keep_count_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollMultipleRequest::CopyFrom(const RollMultipleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.RollMultipleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollMultipleRequest::InternalSwap(RollMultipleRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.keep_count_)
      + sizeof(RollMultipleRequest::_impl_.keep_count_)
      - PROTOBUF_FIELD_OFFSET(RollMultipleRequest, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::google::protobuf::Metadata RollMultipleRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RollMultipleResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollMultipleResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_._has_bits_);
};

void RollMultipleResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
RollMultipleResponse::RollMultipleResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollMultipleResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.RollMultipleResponse)
}
PROTOBUF_NDEBUG_INLINE RollMultipleResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::RollMultipleResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        rolls_{visibility, arena, from.rolls_},
        _rolls_cached_byte_size_{0},
        kept_rolls_{visibility, arena, from.kept_rolls_},
        _kept_rolls_cached_byte_size_{0},
        dropped_rolls_{visibility, arena, from.dropped_rolls_},
        _dropped_rolls_cached_byte_size_{0},
        context_(arena, from.context_),
        entity_id_(arena, from.entity_id_) {}

RollMultipleResponse::RollMultipleResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollMultipleResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollMultipleResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollMultipleResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.status_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, total_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::total_));

  // @@protoc_insertion_point(copy_constructor:seshat.RollMultipleResponse)
}
PROTOBUF_NDEBUG_INLINE RollMultipleResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        rolls_{visibility, arena},
        _rolls_cached_byte_size_{0},
        kept_rolls_{visibility, arena},
        _kept_rolls_cached_byte_size_{0},
        dropped_rolls_{visibility, arena},
        _dropped_rolls_cached_byte_size_{0},
        context_(arena),
        entity_id_(arena) {}

inline void RollMultipleResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           0,
           offsetof(Impl_, total_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::total_));
}
RollMultipleResponse::~RollMultipleResponse() {
  // @@protoc_insertion_point(destructor:seshat.RollMultipleResponse)
  SharedDtor(*this);
}
inline void RollMultipleResponse::SharedDtor(MessageLite& self) {
  RollMultipleResponse& this_ = static_cast<RollMultipleResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.context_.Destroy();
  this_._impl_.entity_id_.Destroy();
  delete this_._impl_.status_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollMultipleResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollMultipleResponse(arena);
}
constexpr auto RollMultipleResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.rolls_) +
          decltype(RollMultipleResponse::_impl_.rolls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.kept_rolls_) +
          decltype(RollMultipleResponse::_impl_.kept_rolls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.dropped_rolls_) +
          decltype(RollMultipleResponse::_impl_.dropped_rolls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(RollMultipleResponse), alignof(RollMultipleResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RollMultipleResponse::PlacementNew_,
                                 sizeof(RollMultipleResponse),
                                 alignof(RollMultipleResponse));
  }
}
constexpr auto RollMultipleResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollMultipleResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollMultipleResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollMultipleResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollMultipleResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollMultipleResponse>(), &RollMultipleResponse::ByteSizeLong,
              &RollMultipleResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_._cached_size_),
          false,
      },
      &RollMultipleResponse::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollMultipleResponse_class_data_ =
        RollMultipleResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollMultipleResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollMultipleResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollMultipleResponse_class_data_.tc_table);
  return RollMultipleResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 60, 2>
RollMultipleResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RollMultipleResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::RollMultipleResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .seshat.Result status = 8 [json_name = "status"];
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 0, PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.status_)}},
    // repeated int32 rolls = 1 [json_name = "rolls"];
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.rolls_)}},
    // int32 total = 2 [json_name = "total"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollMultipleResponse, _impl_.total_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.total_)}},
    // repeated int32 kept_rolls = 3 [json_name = "keptRolls"];
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.kept_rolls_)}},
    // repeated int32 dropped_rolls = 4 [json_name = "droppedRolls"];
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.dropped_rolls_)}},
    // string context = 5 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.context_)}},
    // string entity_id = 6 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.entity_id_)}},
    // int64 timestamp = 7 [json_name = "timestamp"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RollMultipleResponse, _impl_.timestamp_), 3>(),
     {56, 3, 0, PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 rolls = 1 [json_name = "rolls"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.rolls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // int32 total = 2 [json_name = "total"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.total_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated int32 kept_rolls = 3 [json_name = "keptRolls"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.kept_rolls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 dropped_rolls = 4 [json_name = "droppedRolls"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.dropped_rolls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // string context = 5 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.context_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 6 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.entity_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 7 [json_name = "timestamp"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.timestamp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .seshat.Result status = 8 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.status_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::seshat::Result>()},
  }},
  {{
    "\33\0\0\0\0\7\11\0\0\0\0\0\0\0\0\0"
    "seshat.RollMultipleResponse"
    "context"
    "entity_id"
  }},
};
PROTOBUF_NOINLINE void RollMultipleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.RollMultipleResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rolls_.Clear();
  _impl_.kept_rolls_.Clear();
  _impl_.dropped_rolls_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000018u) != 0) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.total_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.total_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollMultipleResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollMultipleResponse& this_ = static_cast<const RollMultipleResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollMultipleResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollMultipleResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.RollMultipleResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 rolls = 1 [json_name = "rolls"];
  {
    int byte_size = this_._impl_._rolls_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, this_._internal_rolls(), byte_size, target);
    }
  }

  // int32 total = 2 [json_name = "total"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_total() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_total(), target);
    }
  }

  // repeated int32 kept_rolls = 3 [json_name = "keptRolls"];
  {
    int byte_size = this_._impl_._kept_rolls_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, this_._internal_kept_rolls(), byte_size, target);
    }
  }

  // repeated int32 dropped_rolls = 4 [json_name = "droppedRolls"];
  {
    int byte_size = this_._impl_._dropped_rolls_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, this_._internal_dropped_rolls(), byte_size, target);
    }
  }

  // string context = 5 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollMultipleResponse.context");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // string entity_id = 6 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollMultipleResponse.entity_id");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // int64 timestamp = 7 [json_name = "timestamp"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<7>(
              stream, this_._internal_timestamp(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .seshat.Result status = 8 [json_name = "status"];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.status_, this_._impl_.status_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.RollMultipleResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollMultipleResponse::ByteSizeLong(const MessageLite& base) {
  const RollMultipleResponse& this_ = static_cast<const RollMultipleResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollMultipleResponse::ByteSizeLong() const {
  const RollMultipleResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.RollMultipleResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated int32 rolls = 1 [json_name = "rolls"];
    {
      total_size +=
          ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
              this_._internal_rolls(), 1,
              this_._impl_._rolls_cached_byte_size_);
    }
    // repeated int32 kept_rolls = 3 [json_name = "keptRolls"];
    {
      total_size +=
          ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
              this_._internal_kept_rolls(), 1,
              this_._impl_._kept_rolls_cached_byte_size_);
    }
    // repeated int32 dropped_rolls = 4 [json_name = "droppedRolls"];
    {
      total_size +=
          ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
              this_._internal_dropped_rolls(), 1,
              this_._impl_._dropped_rolls_cached_byte_size_);
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string context = 5 [json_name = "context"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
    // string entity_id = 6 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // .seshat.Result status = 8 [json_name = "status"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.status_);
    }
    // int64 timestamp = 7 [json_name = "timestamp"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
    // int32 total = 2 [json_name = "total"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_total() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_total());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollMultipleResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollMultipleResponse*>(&to_msg);
  auto& from = static_cast<const RollMultipleResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.RollMultipleResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rolls()->MergeFrom(from._internal_rolls());
  _this->_internal_mutable_kept_rolls()->MergeFrom(from._internal_kept_rolls());
  _this->_internal_mutable_dropped_rolls()->MergeFrom(from._internal_dropped_rolls());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.status_ != nullptr);
      if (_this->_impl_.status_ == nullptr) {
        _this->_impl_.status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_);
      } else {
        _this->_impl_.status_->MergeFrom(*from._impl_.status_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_total() != 0) {
        _this->_impl_.total_ = from._impl_.total_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollMultipleResponse::CopyFrom(const RollMultipleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.RollMultipleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollMultipleResponse::InternalSwap(RollMultipleResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rolls_.InternalSwap(&other->_impl_.rolls_);
  _impl_.kept_rolls_.InternalSwap(&other->_impl_.kept_rolls_);
  _impl_.dropped_rolls_.InternalSwap(&other->_impl_.dropped_rolls_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.total_)
      + sizeof(RollMultipleResponse::_impl_.total_)
      - PROTOBUF_FIELD_OFFSET(RollMultipleResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::google::protobuf::Metadata RollMultipleResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RollFormulaRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollFormulaRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollFormulaRequest, _impl_._has_bits_);
};

RollFormulaRequest::RollFormulaRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollFormulaRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.RollFormulaRequest)
}
PROTOBUF_NDEBUG_INLINE RollFormulaRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::RollFormulaRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        formula_(arena, from.formula_),
        context_(arena, from.context_),
        entity_id_(arena, from.entity_id_) {}

RollFormulaRequest::RollFormulaRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollFormulaRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollFormulaRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollFormulaRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:seshat.RollFormulaRequest)
}
PROTOBUF_NDEBUG_INLINE RollFormulaRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        formula_(arena),
        context_(arena),
        entity_id_(arena) {}

inline void RollFormulaRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RollFormulaRequest::~RollFormulaRequest() {
  // @@protoc_insertion_point(destructor:seshat.RollFormulaRequest)
  SharedDtor(*this);
}
inline void RollFormulaRequest::SharedDtor(MessageLite& self) {
  RollFormulaRequest& this_ = static_cast<RollFormulaRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.formula_.Destroy();
  this_._impl_.context_.Destroy();
  this_._impl_.entity_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollFormulaRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollFormulaRequest(arena);
}
constexpr auto RollFormulaRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RollFormulaRequest),
                                            alignof(RollFormulaRequest));
}
constexpr auto RollFormulaRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollFormulaRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollFormulaRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollFormulaRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollFormulaRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollFormulaRequest>(), &RollFormulaRequest::ByteSizeLong,
              &RollFormulaRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollFormulaRequest, _impl_._cached_size_),
          false,
      },
      &RollFormulaRequest::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollFormulaRequest_class_data_ =
        RollFormulaRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollFormulaRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollFormulaRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollFormulaRequest_class_data_.tc_table);
  return RollFormulaRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 57, 2>
RollFormulaRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollFormulaRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RollFormulaRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::RollFormulaRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string formula = 1 [json_name = "formula"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RollFormulaRequest, _impl_.formula_)}},
    // string context = 2 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(RollFormulaRequest, _impl_.context_)}},
    // string entity_id = 3 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(RollFormulaRequest, _impl_.entity_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string formula = 1 [json_name = "formula"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaRequest, _impl_.formula_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string context = 2 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaRequest, _impl_.context_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 3 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaRequest, _impl_.entity_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\7\7\11\0\0\0\0"
    "seshat.RollFormulaRequest"
    "formula"
    "context"
    "entity_id"
  }},
};
PROTOBUF_NOINLINE void RollFormulaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.RollFormulaRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.formula_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollFormulaRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollFormulaRequest& this_ = static_cast<const RollFormulaRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollFormulaRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollFormulaRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.RollFormulaRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string formula = 1 [json_name = "formula"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_formula().empty()) {
      const ::std::string& _s = this_._internal_formula();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollFormulaRequest.formula");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string context = 2 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollFormulaRequest.context");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string entity_id = 3 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollFormulaRequest.entity_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.RollFormulaRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollFormulaRequest::ByteSizeLong(const MessageLite& base) {
  const RollFormulaRequest& this_ = static_cast<const RollFormulaRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollFormulaRequest::ByteSizeLong() const {
  const RollFormulaRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.RollFormulaRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string formula = 1 [json_name = "formula"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_formula().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_formula());
      }
    }
    // string context = 2 [json_name = "context"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
    // string entity_id = 3 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollFormulaRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollFormulaRequest*>(&to_msg);
  auto& from = static_cast<const RollFormulaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.RollFormulaRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_formula().empty()) {
        _this->_internal_set_formula(from._internal_formula());
      } else {
        if (_this->_impl_.formula_.IsDefault()) {
          _this->_internal_set_formula("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollFormulaRequest::CopyFrom(const RollFormulaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.RollFormulaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollFormulaRequest::InternalSwap(RollFormulaRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.formula_, &other->_impl_.formula_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
}

::google::protobuf::Metadata RollFormulaRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RollFormulaResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollFormulaResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_._has_bits_);
};

void RollFormulaResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RollFormulaResponse::RollFormulaResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollFormulaResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.RollFormulaResponse)
}
PROTOBUF_NDEBUG_INLINE RollFormulaResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::RollFormulaResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        groups_{visibility, arena, from.groups_},
        formula_(arena, from.formula_),
        context_(arena, from.context_),
        entity_id_(arena, from.entity_id_) {}

RollFormulaResponse::RollFormulaResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollFormulaResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollFormulaResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollFormulaResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.status_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_),
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, total_) +
               sizeof(Impl_::timestamp_));

  // @@protoc_insertion_point(copy_constructor:seshat.RollFormulaResponse)
}
PROTOBUF_NDEBUG_INLINE RollFormulaResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        groups_{visibility, arena},
        formula_(arena),
        context_(arena),
        entity_id_(arena) {}

inline void RollFormulaResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::timestamp_));
}
RollFormulaResponse::~RollFormulaResponse() {
  // @@protoc_insertion_point(destructor:seshat.RollFormulaResponse)
  SharedDtor(*this);
}
inline void RollFormulaResponse::SharedDtor(MessageLite& self) {
  RollFormulaResponse& this_ = static_cast<RollFormulaResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.formula_.Destroy();
  this_._impl_.context_.Destroy();
  this_._impl_.entity_id_.Destroy();
  delete this_._impl_.status_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollFormulaResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollFormulaResponse(arena);
}
constexpr auto RollFormulaResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.groups_) +
          decltype(RollFormulaResponse::_impl_.groups_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(RollFormulaResponse), alignof(RollFormulaResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RollFormulaResponse::PlacementNew_,
                                 sizeof(RollFormulaResponse),
                                 alignof(RollFormulaResponse));
  }
}
constexpr auto RollFormulaResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollFormulaResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollFormulaResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollFormulaResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollFormulaResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollFormulaResponse>(), &RollFormulaResponse::ByteSizeLong,
              &RollFormulaResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_._cached_size_),
          false,
      },
      &RollFormulaResponse::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollFormulaResponse_class_data_ =
        RollFormulaResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollFormulaResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollFormulaResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollFormulaResponse_class_data_.tc_table);
  return RollFormulaResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 2, 66, 2>
RollFormulaResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RollFormulaResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::RollFormulaResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .seshat.Result status = 8 [json_name = "status"];
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 1, PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.status_)}},
    // string formula = 1 [json_name = "formula"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.formula_)}},
    // repeated .seshat.DiceGroup groups = 2 [json_name = "groups"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.groups_)}},
    // int32 total = 3 [json_name = "total"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollFormulaResponse, _impl_.total_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.total_)}},
    // int32 modifier = 4 [json_name = "modifier"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollFormulaResponse, _impl_.modifier_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.modifier_)}},
    // string context = 5 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.context_)}},
    // string entity_id = 6 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.entity_id_)}},
    // int64 timestamp = 7 [json_name = "timestamp"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RollFormulaResponse, _impl_.timestamp_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string formula = 1 [json_name = "formula"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.formula_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .seshat.DiceGroup groups = 2 [json_name = "groups"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.groups_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 total = 3 [json_name = "total"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.total_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 modifier = 4 [json_name = "modifier"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.modifier_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string context = 5 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.context_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 6 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.entity_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 7 [json_name = "timestamp"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.timestamp_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .seshat.Result status = 8 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.status_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::seshat::DiceGroup>()},
      {::_pbi::TcParser::GetTable<::seshat::Result>()},
  }},
  {{
    "\32\7\0\0\0\7\11\0\0\0\0\0\0\0\0\0"
    "seshat.RollFormulaResponse"
    "formula"
    "context"
    "entity_id"
  }},
};
PROTOBUF_NOINLINE void RollFormulaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.RollFormulaResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groups_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.formula_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000070u) != 0) {
    ::memset(&_impl_.total_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollFormulaResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollFormulaResponse& this_ = static_cast<const RollFormulaResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollFormulaResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollFormulaResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.RollFormulaResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string formula = 1 [json_name = "formula"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_formula().empty()) {
      const ::std::string& _s = this_._internal_formula();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollFormulaResponse.formula");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // repeated .seshat.DiceGroup groups = 2 [json_name = "groups"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_groups_size());
       i < n; i++) {
    const auto& repfield = this_._internal_groups().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // int32 total = 3 [json_name = "total"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_total() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_total(), target);
    }
  }

  // int32 modifier = 4 [json_name = "modifier"];
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_modifier() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_modifier(), target);
    }
  }

  // string context = 5 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollFormulaResponse.context");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // string entity_id = 6 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollFormulaResponse.entity_id");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // int64 timestamp = 7 [json_name = "timestamp"];
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<7>(
              stream, this_._internal_timestamp(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .seshat.Result status = 8 [json_name = "status"];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.status_, this_._impl_.status_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.RollFormulaResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollFormulaResponse::ByteSizeLong(const MessageLite& base) {
  const RollFormulaResponse& this_ = static_cast<const RollFormulaResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollFormulaResponse::ByteSizeLong() const {
  const RollFormulaResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.RollFormulaResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .seshat.DiceGroup groups = 2 [json_name = "groups"];
    {
      total_size += 1UL * this_._internal_groups_size();
      for (const auto& msg : this_._internal_groups()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // string formula = 1 [json_name = "formula"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_formula().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_formula());
      }
    }
    // string context = 5 [json_name = "context"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
    // string entity_id = 6 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // .seshat.Result status = 8 [json_name = "status"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.status_);
    }
    // int32 total = 3 [json_name = "total"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_total() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_total());
      }
    }
    // int32 modifier = 4 [json_name = "modifier"];
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_modifier() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_modifier());
      }
    }
    // int64 timestamp = 7 [json_name = "timestamp"];
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollFormulaResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollFormulaResponse*>(&to_msg);
  auto& from = static_cast<const RollFormulaResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.RollFormulaResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_groups()->MergeFrom(
      from._internal_groups());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_formula().empty()) {
        _this->_internal_set_formula(from._internal_formula());
      } else {
        if (_this->_impl_.formula_.IsDefault()) {
          _this->_internal_set_formula("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.status_ != nullptr);
      if (_this->_impl_.status_ == nullptr) {
        _this->_impl_.status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_);
      } else {
        _this->_impl_.status_->MergeFrom(*from._impl_.status_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_total() != 0) {
        _this->_impl_.total_ = from._impl_.total_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_modifier() != 0) {
        _this->_impl_.modifier_ = from._impl_.modifier_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollFormulaResponse::CopyFrom(const RollFormulaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.RollFormulaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollFormulaResponse::InternalSwap(RollFormulaResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.formula_, &other->_impl_.formula_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.timestamp_)
      + sizeof(RollFormulaResponse::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(RollFormulaResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::google::protobuf::Metadata RollFormulaResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DiceGroup::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<DiceGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_._has_bits_);
};

DiceGroup::DiceGroup(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DiceGroup_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.DiceGroup)
}
PROTOBUF_NDEBUG_INLINE DiceGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::DiceGroup& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        rolls_{visibility, arena, from.rolls_},
        _rolls_cached_byte_size_{0},
        operation_(arena, from.operation_) {}

DiceGroup::DiceGroup(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DiceGroup& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DiceGroup_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DiceGroup* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, count_),
           offsetof(Impl_, subtotal_) -
               offsetof(Impl_, count_) +
               sizeof(Impl_::subtotal_));

  // @@protoc_insertion_point(copy_constructor:seshat.DiceGroup)
}
PROTOBUF_NDEBUG_INLINE DiceGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        rolls_{visibility, arena},
        _rolls_cached_byte_size_{0},
        operation_(arena) {}

inline void DiceGroup::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, count_),
           0,
           offsetof(Impl_, subtotal_) -
               offsetof(Impl_, count_) +
               sizeof(Impl_::subtotal_));
}
DiceGroup::~DiceGroup() {
  // @@protoc_insertion_point(destructor:seshat.DiceGroup)
  SharedDtor(*this);
}
inline void DiceGroup::SharedDtor(MessageLite& self) {
  DiceGroup& this_ = static_cast<DiceGroup&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.operation_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DiceGroup::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DiceGroup(arena);
}
constexpr auto DiceGroup::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.rolls_) +
          decltype(DiceGroup::_impl_.rolls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DiceGroup), alignof(DiceGroup), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DiceGroup::PlacementNew_,
                                 sizeof(DiceGroup),
                                 alignof(DiceGroup));
  }
}
constexpr auto DiceGroup::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DiceGroup_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DiceGroup::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DiceGroup>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DiceGroup::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DiceGroup>(), &DiceGroup::ByteSizeLong,
              &DiceGroup::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_._cached_size_),
          false,
      },
      &DiceGroup::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DiceGroup_class_data_ =
        DiceGroup::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DiceGroup::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DiceGroup_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DiceGroup_class_data_.tc_table);
  return DiceGroup_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 34, 2>
DiceGroup::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DiceGroup_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::DiceGroup>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 count = 1 [json_name = "count"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DiceGroup, _impl_.count_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.count_)}},
    // int32 sides = 2 [json_name = "sides"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DiceGroup, _impl_.sides_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.sides_)}},
    // repeated int32 rolls = 3 [json_name = "rolls"];
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.rolls_)}},
    // int32 subtotal = 4 [json_name = "subtotal"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DiceGroup, _impl_.subtotal_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.subtotal_)}},
    // string operation = 5 [json_name = "operation"];
    {::_pbi::TcParser::FastUS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.operation_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 count = 1 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.count_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 sides = 2 [json_name = "sides"];
    {PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.sides_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated int32 rolls = 3 [json_name = "rolls"];
    {PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.rolls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // int32 subtotal = 4 [json_name = "subtotal"];
    {PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.subtotal_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string operation = 5 [json_name = "operation"];
    {PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.operation_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\0\0\0\0\11\0\0"
    "seshat.DiceGroup"
    "operation"
  }},
};
PROTOBUF_NOINLINE void DiceGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.DiceGroup)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rolls_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.operation_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.subtotal_) -
        reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.subtotal_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DiceGroup::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DiceGroup& this_ = static_cast<const DiceGroup&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DiceGroup::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DiceGroup& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.DiceGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 count = 1 [json_name = "count"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_count(), target);
    }
  }

  // int32 sides = 2 [json_name = "sides"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_sides() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_sides(), target);
    }
  }

  // repeated int32 rolls = 3 [json_name = "rolls"];
  {
    int byte_size = this_._impl_._rolls_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, this_._internal_rolls(), byte_size, target);
    }
  }

  // int32 subtotal = 4 [json_name = "subtotal"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_subtotal() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_subtotal(), target);
    }
  }

  // string operation = 5 [json_name = "operation"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_operation().empty()) {
      const ::std::string& _s = this_._internal_operation();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.DiceGroup.operation");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.DiceGroup)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DiceGroup::ByteSizeLong(const MessageLite& base) {
  const DiceGroup& this_ = static_cast<const DiceGroup&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DiceGroup::ByteSizeLong() const {
  const DiceGroup& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.DiceGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated int32 rolls = 3 [json_name = "rolls"];
    {
      total_size +=
          ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
              this_._internal_rolls(), 1,
              this_._impl_._rolls_cached_byte_size_);
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string operation = 5 [json_name = "operation"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_operation().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_operation());
      }
    }
    // int32 count = 1 [json_name = "count"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_count());
      }
    }
    // int32 sides = 2 [json_name = "sides"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_sides() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_sides());
      }
    }
    // int32 subtotal = 4 [json_name = "subtotal"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_subtotal() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_subtotal());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DiceGroup::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DiceGroup*>(&to_msg);
  auto& from = static_cast<const DiceGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.DiceGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rolls()->MergeFrom(from._internal_rolls());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_operation().empty()) {
        _this->_internal_set_operation(from._internal_operation());
      } else {
        if (_this->_impl_.operation_.IsDefault()) {
          _this->_internal_set_operation("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_count() != 0) {
        _this->_impl_.count_ = from._impl_.count_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_sides() != 0) {
        _this->_impl_.sides_ = from._impl_.sides_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_subtotal() != 0) {
        _this->_impl_.subtotal_ = from._impl_.subtotal_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DiceGroup::CopyFrom(const DiceGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.DiceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DiceGroup::InternalSwap(DiceGroup* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rolls_.InternalSwap(&other->_impl_.rolls_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_, &other->_impl_.operation_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.subtotal_)
      + sizeof(DiceGroup::_impl_.subtotal_)
      - PROTOBUF_FIELD_OFFSET(DiceGroup, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::google::protobuf::Metadata DiceGroup::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RollHistoryRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollHistoryRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_._has_bits_);
};

RollHistoryRequest::RollHistoryRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollHistoryRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.RollHistoryRequest)
}
PROTOBUF_NDEBUG_INLINE RollHistoryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::RollHistoryRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entity_id_(arena, from.entity_id_),
        context_(arena, from.context_) {}

RollHistoryRequest::RollHistoryRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollHistoryRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollHistoryRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollHistoryRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, since_timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, since_timestamp_),
           offsetof(Impl_, limit_) -
               offsetof(Impl_, since_timestamp_) +
               sizeof(Impl_::limit_));

  // @@protoc_insertion_point(copy_constructor:seshat.RollHistoryRequest)
}
PROTOBUF_NDEBUG_INLINE RollHistoryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        entity_id_(arena),
        context_(arena) {}

inline void RollHistoryRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, since_timestamp_),
           0,
           offsetof(Impl_, limit_) -
               offsetof(Impl_, since_timestamp_) +
               sizeof(Impl_::limit_));
}
RollHistoryRequest::~RollHistoryRequest() {
  // @@protoc_insertion_point(destructor:seshat.RollHistoryRequest)
  SharedDtor(*this);
}
inline void RollHistoryRequest::SharedDtor(MessageLite& self) {
  RollHistoryRequest& this_ = static_cast<RollHistoryRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.entity_id_.Destroy();
  this_._impl_.context_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollHistoryRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollHistoryRequest(arena);
}
constexpr auto RollHistoryRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RollHistoryRequest),
                                            alignof(RollHistoryRequest));
}
constexpr auto RollHistoryRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollHistoryRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollHistoryRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollHistoryRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollHistoryRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollHistoryRequest>(), &RollHistoryRequest::ByteSizeLong,
              &RollHistoryRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_._cached_size_),
          false,
      },
      &RollHistoryRequest::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollHistoryRequest_class_data_ =
        RollHistoryRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollHistoryRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollHistoryRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollHistoryRequest_class_data_.tc_table);
  return RollHistoryRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 50, 2>
RollHistoryRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RollHistoryRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::RollHistoryRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 since_timestamp = 4 [json_name = "sinceTimestamp"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RollHistoryRequest, _impl_.since_timestamp_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_.since_timestamp_)}},
    // string entity_id = 1 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_.entity_id_)}},
    // string context = 2 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_.context_)}},
    // int32 limit = 3 [json_name = "limit"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollHistoryRequest, _impl_.limit_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_.limit_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_.entity_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string context = 2 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_.context_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 limit = 3 [json_name = "limit"];
    {PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_.limit_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int64 since_timestamp = 4 [json_name = "sinceTimestamp"];
    {PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_.since_timestamp_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\31\11\7\0\0\0\0\0"
    "seshat.RollHistoryRequest"
    "entity_id"
    "context"
  }},
};
PROTOBUF_NOINLINE void RollHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.RollHistoryRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000000cu) != 0) {
    ::memset(&_impl_.since_timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.limit_) -
        reinterpret_cast<char*>(&_impl_.since_timestamp_)) + sizeof(_impl_.limit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollHistoryRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollHistoryRequest& this_ = static_cast<const RollHistoryRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollHistoryRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollHistoryRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.RollHistoryRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollHistoryRequest.entity_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string context = 2 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollHistoryRequest.context");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int32 limit = 3 [json_name = "limit"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_limit() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_limit(), target);
    }
  }

  // int64 since_timestamp = 4 [json_name = "sinceTimestamp"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_since_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
              stream, this_._internal_since_timestamp(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.RollHistoryRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollHistoryRequest::ByteSizeLong(const MessageLite& base) {
  const RollHistoryRequest& this_ = static_cast<const RollHistoryRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollHistoryRequest::ByteSizeLong() const {
  const RollHistoryRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.RollHistoryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string entity_id = 1 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // string context = 2 [json_name = "context"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
    // int64 since_timestamp = 4 [json_name = "sinceTimestamp"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_since_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_since_timestamp());
      }
    }
    // int32 limit = 3 [json_name = "limit"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_limit() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_limit());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollHistoryRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollHistoryRequest*>(&to_msg);
  auto& from = static_cast<const RollHistoryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.RollHistoryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_since_timestamp() != 0) {
        _this->_impl_.since_timestamp_ = from._impl_.since_timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_limit() != 0) {
        _this->_impl_.limit_ = from._impl_.limit_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollHistoryRequest::CopyFrom(const RollHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.RollHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollHistoryRequest::InternalSwap(RollHistoryRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_.limit_)
      + sizeof(RollHistoryRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(RollHistoryRequest, _impl_.since_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.since_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.since_timestamp_));
}

::google::protobuf::Metadata RollHistoryRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RollHistoryResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollHistoryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_._has_bits_);
};

void RollHistoryResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RollHistoryResponse::RollHistoryResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollHistoryResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.RollHistoryResponse)
}
PROTOBUF_NDEBUG_INLINE RollHistoryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::RollHistoryResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        rolls_{visibility, arena, from.rolls_} {}

RollHistoryResponse::RollHistoryResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollHistoryResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollHistoryResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollHistoryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.status_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_)
                : nullptr;
  _impl_.total_count_ = from._impl_.total_count_;

  // @@protoc_insertion_point(copy_constructor:seshat.RollHistoryResponse)
}
PROTOBUF_NDEBUG_INLINE RollHistoryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        rolls_{visibility, arena} {}

inline void RollHistoryResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           0,
           offsetof(Impl_, total_count_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::total_count_));
}
RollHistoryResponse::~RollHistoryResponse() {
  // @@protoc_insertion_point(destructor:seshat.RollHistoryResponse)
  SharedDtor(*this);
}
inline void RollHistoryResponse::SharedDtor(MessageLite& self) {
  RollHistoryResponse& this_ = static_cast<RollHistoryResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.status_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollHistoryResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollHistoryResponse(arena);
}
constexpr auto RollHistoryResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_.rolls_) +
          decltype(RollHistoryResponse::_impl_.rolls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(RollHistoryResponse), alignof(RollHistoryResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RollHistoryResponse::PlacementNew_,
                                 sizeof(RollHistoryResponse),
                                 alignof(RollHistoryResponse));
  }
}
constexpr auto RollHistoryResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollHistoryResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollHistoryResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollHistoryResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollHistoryResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollHistoryResponse>(), &RollHistoryResponse::ByteSizeLong,
              &RollHistoryResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_._cached_size_),
          false,
      },
      &RollHistoryResponse::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollHistoryResponse_class_data_ =
        RollHistoryResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollHistoryResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollHistoryResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollHistoryResponse_class_data_.tc_table);
  return RollHistoryResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2>
RollHistoryResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RollHistoryResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::RollHistoryResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .seshat.RollRecord rolls = 1 [json_name = "rolls"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_.rolls_)}},
    // int32 total_count = 2 [json_name = "totalCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollHistoryResponse, _impl_.total_count_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_.total_count_)}},
    // .seshat.Result status = 3 [json_name = "status"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .seshat.RollRecord rolls = 1 [json_name = "rolls"];
    {PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_.rolls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 total_count = 2 [json_name = "totalCount"];
    {PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_.total_count_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .seshat.Result status = 3 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_.status_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::seshat::RollRecord>()},
      {::_pbi::TcParser::GetTable<::seshat::Result>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RollHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.RollHistoryResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rolls_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_.total_count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollHistoryResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollHistoryResponse& this_ = static_cast<const RollHistoryResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollHistoryResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollHistoryResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.RollHistoryResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .seshat.RollRecord rolls = 1 [json_name = "rolls"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_rolls_size());
       i < n; i++) {
    const auto& repfield = this_._internal_rolls().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // int32 total_count = 2 [json_name = "totalCount"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_total_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_total_count(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .seshat.Result status = 3 [json_name = "status"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.status_, this_._impl_.status_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.RollHistoryResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollHistoryResponse::ByteSizeLong(const MessageLite& base) {
  const RollHistoryResponse& this_ = static_cast<const RollHistoryResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollHistoryResponse::ByteSizeLong() const {
  const RollHistoryResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.RollHistoryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .seshat.RollRecord rolls = 1 [json_name = "rolls"];
    {
      total_size += 1UL * this_._internal_rolls_size();
      for (const auto& msg : this_._internal_rolls()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .seshat.Result status = 3 [json_name = "status"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.status_);
    }
    // int32 total_count = 2 [json_name = "totalCount"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_total_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_total_count());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollHistoryResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollHistoryResponse*>(&to_msg);
  auto& from = static_cast<const RollHistoryResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.RollHistoryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rolls()->MergeFrom(
      from._internal_rolls());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.status_ != nullptr);
      if (_this->_impl_.status_ == nullptr) {
        _this->_impl_.status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_);
      } else {
        _this->_impl_.status_->MergeFrom(*from._impl_.status_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_total_count() != 0) {
        _this->_impl_.total_count_ = from._impl_.total_count_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollHistoryResponse::CopyFrom(const RollHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.RollHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollHistoryResponse::InternalSwap(RollHistoryResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rolls_.InternalSwap(&other->_impl_.rolls_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_.total_count_)
      + sizeof(RollHistoryResponse::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(RollHistoryResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::google::protobuf::Metadata RollHistoryResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RollRecord::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RollRecord>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RollRecord, _impl_._has_bits_);
};

RollRecord::RollRecord(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollRecord_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.RollRecord)
}
PROTOBUF_NDEBUG_INLINE RollRecord::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::RollRecord& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        individual_rolls_{visibility, arena, from.individual_rolls_},
        _individual_rolls_cached_byte_size_{0},
        formula_(arena, from.formula_),
        context_(arena, from.context_),
        entity_id_(arena, from.entity_id_) {}

RollRecord::RollRecord(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RollRecord& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RollRecord_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RollRecord* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, result_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::result_));

  // @@protoc_insertion_point(copy_constructor:seshat.RollRecord)
}
PROTOBUF_NDEBUG_INLINE RollRecord::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        individual_rolls_{visibility, arena},
        _individual_rolls_cached_byte_size_{0},
        formula_(arena),
        context_(arena),
        entity_id_(arena) {}

inline void RollRecord::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, result_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::result_));
}
RollRecord::~RollRecord() {
  // @@protoc_insertion_point(destructor:seshat.RollRecord)
  SharedDtor(*this);
}
inline void RollRecord::SharedDtor(MessageLite& self) {
  RollRecord& this_ = static_cast<RollRecord&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.formula_.Destroy();
  this_._impl_.context_.Destroy();
  this_._impl_.entity_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RollRecord::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RollRecord(arena);
}
constexpr auto RollRecord::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.individual_rolls_) +
          decltype(RollRecord::_impl_.individual_rolls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(RollRecord), alignof(RollRecord), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RollRecord::PlacementNew_,
                                 sizeof(RollRecord),
                                 alignof(RollRecord));
  }
}
constexpr auto RollRecord::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RollRecord_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RollRecord::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RollRecord>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RollRecord::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RollRecord>(), &RollRecord::ByteSizeLong,
              &RollRecord::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RollRecord, _impl_._cached_size_),
          false,
      },
      &RollRecord::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RollRecord_class_data_ =
        RollRecord::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RollRecord::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RollRecord_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RollRecord_class_data_.tc_table);
  return RollRecord_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 49, 2>
RollRecord::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollRecord, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RollRecord_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::RollRecord>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string formula = 1 [json_name = "formula"];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.formula_)}},
    // int32 result = 2 [json_name = "result"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RollRecord, _impl_.result_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.result_)}},
    // string context = 3 [json_name = "context"];
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.context_)}},
    // string entity_id = 4 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.entity_id_)}},
    // int64 timestamp = 5 [json_name = "timestamp"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RollRecord, _impl_.timestamp_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.timestamp_)}},
    // repeated int32 individual_rolls = 6 [json_name = "individualRolls"];
    {::_pbi::TcParser::FastV32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.individual_rolls_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string formula = 1 [json_name = "formula"];
    {PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.formula_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 result = 2 [json_name = "result"];
    {PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.result_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string context = 3 [json_name = "context"];
    {PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.context_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 4 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.entity_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 5 [json_name = "timestamp"];
    {PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.timestamp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // repeated int32 individual_rolls = 6 [json_name = "individualRolls"];
    {PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.individual_rolls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
    "\21\7\0\7\11\0\0\0"
    "seshat.RollRecord"
    "formula"
    "context"
    "entity_id"
  }},
};
PROTOBUF_NOINLINE void RollRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.RollRecord)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.individual_rolls_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.formula_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.context_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.entity_id_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000018u) != 0) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RollRecord::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RollRecord& this_ = static_cast<const RollRecord&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RollRecord::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RollRecord& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.RollRecord)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string formula = 1 [json_name = "formula"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_formula().empty()) {
      const ::std::string& _s = this_._internal_formula();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollRecord.formula");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int32 result = 2 [json_name = "result"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_result() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_result(), target);
    }
  }

  // string context = 3 [json_name = "context"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_context().empty()) {
      const ::std::string& _s = this_._internal_context();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollRecord.context");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string entity_id = 4 [json_name = "entityId"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_entity_id().empty()) {
      const ::std::string& _s = this_._internal_entity_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seshat.RollRecord.entity_id");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // int64 timestamp = 5 [json_name = "timestamp"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<5>(
              stream, this_._internal_timestamp(), target);
    }
  }

  // repeated int32 individual_rolls = 6 [json_name = "individualRolls"];
  {
    int byte_size = this_._impl_._individual_rolls_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, this_._internal_individual_rolls(), byte_size, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.RollRecord)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RollRecord::ByteSizeLong(const MessageLite& base) {
  const RollRecord& this_ = static_cast<const RollRecord&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RollRecord::ByteSizeLong() const {
  const RollRecord& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.RollRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated int32 individual_rolls = 6 [json_name = "individualRolls"];
    {
      total_size +=
          ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
              this_._internal_individual_rolls(), 1,
              this_._impl_._individual_rolls_cached_byte_size_);
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string formula = 1 [json_name = "formula"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_formula().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_formula());
      }
    }
    // string context = 3 [json_name = "context"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_context().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_context());
      }
    }
    // string entity_id = 4 [json_name = "entityId"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_entity_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_entity_id());
      }
    }
    // int64 timestamp = 5 [json_name = "timestamp"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
    // int32 result = 2 [json_name = "result"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_result() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_result());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RollRecord::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RollRecord*>(&to_msg);
  auto& from = static_cast<const RollRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.RollRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_individual_rolls()->MergeFrom(from._internal_individual_rolls());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_formula().empty()) {
        _this->_internal_set_formula(from._internal_formula());
      } else {
        if (_this->_impl_.formula_.IsDefault()) {
          _this->_internal_set_formula("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_context().empty()) {
        _this->_internal_set_context(from._internal_context());
      } else {
        if (_this->_impl_.context_.IsDefault()) {
          _this->_internal_set_context("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_entity_id().empty()) {
        _this->_internal_set_entity_id(from._internal_entity_id());
      } else {
        if (_this->_impl_.entity_id_.IsDefault()) {
          _this->_internal_set_entity_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_result() != 0) {
        _this->_impl_.result_ = from._impl_.result_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollRecord::CopyFrom(const RollRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.RollRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RollRecord::InternalSwap(RollRecord* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.individual_rolls_.InternalSwap(&other->_impl_.individual_rolls_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.formula_, &other->_impl_.formula_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.context_, &other->_impl_.context_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.result_)
      + sizeof(RollRecord::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(RollRecord, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata RollRecord::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FairnessTestRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<FairnessTestRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FairnessTestRequest, _impl_._has_bits_);
};

FairnessTestRequest::FairnessTestRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FairnessTestRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.FairnessTestRequest)
}
FairnessTestRequest::FairnessTestRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FairnessTestRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FairnessTestRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE FairnessTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void FairnessTestRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sides_),
           0,
           offsetof(Impl_, sample_size_) -
               offsetof(Impl_, sides_) +
               sizeof(Impl_::sample_size_));
}
FairnessTestRequest::~FairnessTestRequest() {
  // @@protoc_insertion_point(destructor:seshat.FairnessTestRequest)
  SharedDtor(*this);
}
inline void FairnessTestRequest::SharedDtor(MessageLite& self) {
  FairnessTestRequest& this_ = static_cast<FairnessTestRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FairnessTestRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FairnessTestRequest(arena);
}
constexpr auto FairnessTestRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(FairnessTestRequest),
                                            alignof(FairnessTestRequest));
}
constexpr auto FairnessTestRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FairnessTestRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &FairnessTestRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FairnessTestRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FairnessTestRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FairnessTestRequest>(), &FairnessTestRequest::ByteSizeLong,
              &FairnessTestRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FairnessTestRequest, _impl_._cached_size_),
          false,
      },
      &FairnessTestRequest::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull FairnessTestRequest_class_data_ =
        FairnessTestRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
FairnessTestRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FairnessTestRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FairnessTestRequest_class_data_.tc_table);
  return FairnessTestRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
FairnessTestRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FairnessTestRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    FairnessTestRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::FairnessTestRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 sample_size = 2 [json_name = "sampleSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FairnessTestRequest, _impl_.sample_size_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(FairnessTestRequest, _impl_.sample_size_)}},
    // int32 sides = 1 [json_name = "sides"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FairnessTestRequest, _impl_.sides_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(FairnessTestRequest, _impl_.sides_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 sides = 1 [json_name = "sides"];
    {PROTOBUF_FIELD_OFFSET(FairnessTestRequest, _impl_.sides_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 sample_size = 2 [json_name = "sampleSize"];
    {PROTOBUF_FIELD_OFFSET(FairnessTestRequest, _impl_.sample_size_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void FairnessTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.FairnessTestRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.sides_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sample_size_) -
        reinterpret_cast<char*>(&_impl_.sides_)) + sizeof(_impl_.sample_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL FairnessTestRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FairnessTestRequest& this_ = static_cast<const FairnessTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FairnessTestRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FairnessTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.FairnessTestRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 sides = 1 [json_name = "sides"];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_sides() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_sides(), target);
    }
  }

  // int32 sample_size = 2 [json_name = "sampleSize"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_sample_size() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_sample_size(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.FairnessTestRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FairnessTestRequest::ByteSizeLong(const MessageLite& base) {
  const FairnessTestRequest& this_ = static_cast<const FairnessTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t FairnessTestRequest::ByteSizeLong() const {
  const FairnessTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.FairnessTestRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // int32 sides = 1 [json_name = "sides"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_sides() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_sides());
      }
    }
    // int32 sample_size = 2 [json_name = "sampleSize"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_sample_size() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_sample_size());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void FairnessTestRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FairnessTestRequest*>(&to_msg);
  auto& from = static_cast<const FairnessTestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.FairnessTestRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_sides() != 0) {
        _this->_impl_.sides_ = from._impl_.sides_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_sample_size() != 0) {
        _this->_impl_.sample_size_ = from._impl_.sample_size_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FairnessTestRequest::CopyFrom(const FairnessTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.FairnessTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FairnessTestRequest::InternalSwap(FairnessTestRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FairnessTestRequest, _impl_.sample_size_)
      + sizeof(FairnessTestRequest::_impl_.sample_size_)
      - PROTOBUF_FIELD_OFFSET(FairnessTestRequest, _impl_.sides_)>(
          reinterpret_cast<char*>(&_impl_.sides_),
          reinterpret_cast<char*>(&other->_impl_.sides_));
}

::google::protobuf::Metadata FairnessTestRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FairnessTestResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<FairnessTestResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_._has_bits_);
};

void FairnessTestResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FairnessTestResponse::FairnessTestResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FairnessTestResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seshat.FairnessTestResponse)
}
PROTOBUF_NDEBUG_INLINE FairnessTestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::seshat::FairnessTestResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        distribution_{visibility, arena, from.distribution_},
        _distribution_cached_byte_size_{0} {}

FairnessTestResponse::FairnessTestResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const FairnessTestResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FairnessTestResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FairnessTestResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.status_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, chi_squared_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, chi_squared_),
           offsetof(Impl_, sample_size_) -
               offsetof(Impl_, chi_squared_) +
               sizeof(Impl_::sample_size_));

  // @@protoc_insertion_point(copy_constructor:seshat.FairnessTestResponse)
}
PROTOBUF_NDEBUG_INLINE FairnessTestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        distribution_{visibility, arena},
        _distribution_cached_byte_size_{0} {}

inline void FairnessTestResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           0,
           offsetof(Impl_, sample_size_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::sample_size_));
}
FairnessTestResponse::~FairnessTestResponse() {
  // @@protoc_insertion_point(destructor:seshat.FairnessTestResponse)
  SharedDtor(*this);
}
inline void FairnessTestResponse::SharedDtor(MessageLite& self) {
  FairnessTestResponse& this_ = static_cast<FairnessTestResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.status_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FairnessTestResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FairnessTestResponse(arena);
}
constexpr auto FairnessTestResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.distribution_) +
          decltype(FairnessTestResponse::_impl_.distribution_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(FairnessTestResponse), alignof(FairnessTestResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&FairnessTestResponse::PlacementNew_,
                                 sizeof(FairnessTestResponse),
                                 alignof(FairnessTestResponse));
  }
}
constexpr auto FairnessTestResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FairnessTestResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &FairnessTestResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FairnessTestResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FairnessTestResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FairnessTestResponse>(), &FairnessTestResponse::ByteSizeLong,
              &FairnessTestResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_._cached_size_),
          false,
      },
      &FairnessTestResponse::kDescriptorMethods,
      &descriptor_table_seshat_2fdice_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull FairnessTestResponse_class_data_ =
        FairnessTestResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
FairnessTestResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FairnessTestResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FairnessTestResponse_class_data_.tc_table);
  return FairnessTestResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2>
FairnessTestResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    FairnessTestResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seshat::FairnessTestResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 distribution = 1 [json_name = "distribution"];
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.distribution_)}},
    // double chi_squared = 2 [json_name = "chiSquared"];
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.chi_squared_)}},
    // double p_value = 3 [json_name = "pValue"];
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.p_value_)}},
    // bool is_fair = 4 [json_name = "isFair"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FairnessTestResponse, _impl_.is_fair_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.is_fair_)}},
    // int32 sample_size = 5 [json_name = "sampleSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FairnessTestResponse, _impl_.sample_size_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.sample_size_)}},
    // .seshat.Result status = 6 [json_name = "status"];
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.status_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 distribution = 1 [json_name = "distribution"];
    {PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.distribution_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // double chi_squared = 2 [json_name = "chiSquared"];
    {PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.chi_squared_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double p_value = 3 [json_name = "pValue"];
    {PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.p_value_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // bool is_fair = 4 [json_name = "isFair"];
    {PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.is_fair_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // int32 sample_size = 5 [json_name = "sampleSize"];
    {PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.sample_size_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .seshat.Result status = 6 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::seshat::Result>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void FairnessTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seshat.FairnessTestResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.distribution_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  if ((cached_has_bits & 0x0000001eu) != 0) {
    ::memset(&_impl_.chi_squared_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sample_size_) -
        reinterpret_cast<char*>(&_impl_.chi_squared_)) + sizeof(_impl_.sample_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL FairnessTestResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FairnessTestResponse& this_ = static_cast<const FairnessTestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FairnessTestResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FairnessTestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:seshat.FairnessTestResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 distribution = 1 [json_name = "distribution"];
  {
    int byte_size = this_._impl_._distribution_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, this_._internal_distribution(), byte_size, target);
    }
  }

  // double chi_squared = 2 [json_name = "chiSquared"];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_chi_squared()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          2, this_._internal_chi_squared(), target);
    }
  }

  // double p_value = 3 [json_name = "pValue"];
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_p_value()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_p_value(), target);
    }
  }

  // bool is_fair = 4 [json_name = "isFair"];
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_is_fair() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_is_fair(), target);
    }
  }

  // int32 sample_size = 5 [json_name = "sampleSize"];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_sample_size() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
              stream, this_._internal_sample_size(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .seshat.Result status = 6 [json_name = "status"];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.status_, this_._impl_.status_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seshat.FairnessTestResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FairnessTestResponse::ByteSizeLong(const MessageLite& base) {
  const FairnessTestResponse& this_ = static_cast<const FairnessTestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t FairnessTestResponse::ByteSizeLong() const {
  const FairnessTestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:seshat.FairnessTestResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated int32 distribution = 1 [json_name = "distribution"];
    {
      total_size +=
          ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
              this_._internal_distribution(), 1,
              this_._impl_._distribution_cached_byte_size_);
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // .seshat.Result status = 6 [json_name = "status"];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.status_);
    }
    // double chi_squared = 2 [json_name = "chiSquared"];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_chi_squared()) != 0) {
        total_size += 9;
      }
    }
    // double p_value = 3 [json_name = "pValue"];
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_p_value()) != 0) {
        total_size += 9;
      }
    }
    // bool is_fair = 4 [json_name = "isFair"];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_is_fair() != 0) {
        total_size += 2;
      }
    }
    // int32 sample_size = 5 [json_name = "sampleSize"];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_sample_size() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_sample_size());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void FairnessTestResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FairnessTestResponse*>(&to_msg);
  auto& from = static_cast<const FairnessTestResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seshat.FairnessTestResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_distribution()->MergeFrom(from._internal_distribution());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.status_ != nullptr);
      if (_this->_impl_.status_ == nullptr) {
        _this->_impl_.status_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.status_);
      } else {
        _this->_impl_.status_->MergeFrom(*from._impl_.status_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_chi_squared()) != 0) {
        _this->_impl_.chi_squared_ = from._impl_.chi_squared_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_p_value()) != 0) {
        _this->_impl_.p_value_ = from._impl_.p_value_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_is_fair() != 0) {
        _this->_impl_.is_fair_ = from._impl_.is_fair_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_sample_size() != 0) {
        _this->_impl_.sample_size_ = from._impl_.sample_size_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FairnessTestResponse::CopyFrom(const FairnessTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seshat.FairnessTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FairnessTestResponse::InternalSwap(FairnessTestResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.distribution_.InternalSwap(&other->_impl_.distribution_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.sample_size_)
      + sizeof(FairnessTestResponse::_impl_.sample_size_)
      - PROTOBUF_FIELD_OFFSET(FairnessTestResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::google::protobuf::Metadata FairnessTestResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace seshat
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_seshat_2fdice_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

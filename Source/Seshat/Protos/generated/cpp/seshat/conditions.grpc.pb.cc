// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/conditions.proto

#include "seshat/conditions.pb.h"
#include "seshat/conditions.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace seshat {

static const char* ConditionsService_method_names[] = {
  "/seshat.ConditionsService/ApplyCondition",
  "/seshat.ConditionsService/RemoveCondition",
  "/seshat.ConditionsService/GetConditions",
  "/seshat.ConditionsService/UpdateCondition",
  "/seshat.ConditionsService/HasCondition",
  "/seshat.ConditionsService/GetConditionsByType",
  "/seshat.ConditionsService/GetActiveConditions",
  "/seshat.ConditionsService/CheckImmunity",
  "/seshat.ConditionsService/GetConflictingConditions",
  "/seshat.ConditionsService/ResolveConflicts",
  "/seshat.ConditionsService/GetConditionTemplates",
  "/seshat.ConditionsService/CreateConditionTemplate",
  "/seshat.ConditionsService/ProcessConditionTick",
  "/seshat.ConditionsService/GetConditionHistory",
};

std::unique_ptr< ConditionsService::Stub> ConditionsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConditionsService::Stub> stub(new ConditionsService::Stub(channel, options));
  return stub;
}

ConditionsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ApplyCondition_(ConditionsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveCondition_(ConditionsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConditions_(ConditionsService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCondition_(ConditionsService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasCondition_(ConditionsService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConditionsByType_(ConditionsService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActiveConditions_(ConditionsService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckImmunity_(ConditionsService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConflictingConditions_(ConditionsService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResolveConflicts_(ConditionsService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConditionTemplates_(ConditionsService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateConditionTemplate_(ConditionsService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcessConditionTick_(ConditionsService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConditionHistory_(ConditionsService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConditionsService::Stub::ApplyCondition(::grpc::ClientContext* context, const ::seshat::ApplyConditionRequest& request, ::seshat::ApplyConditionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ApplyConditionRequest, ::seshat::ApplyConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApplyCondition_, context, request, response);
}

void ConditionsService::Stub::async::ApplyCondition(::grpc::ClientContext* context, const ::seshat::ApplyConditionRequest* request, ::seshat::ApplyConditionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ApplyConditionRequest, ::seshat::ApplyConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyCondition_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::ApplyCondition(::grpc::ClientContext* context, const ::seshat::ApplyConditionRequest* request, ::seshat::ApplyConditionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ApplyConditionResponse>* ConditionsService::Stub::PrepareAsyncApplyConditionRaw(::grpc::ClientContext* context, const ::seshat::ApplyConditionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ApplyConditionResponse, ::seshat::ApplyConditionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApplyCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ApplyConditionResponse>* ConditionsService::Stub::AsyncApplyConditionRaw(::grpc::ClientContext* context, const ::seshat::ApplyConditionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplyConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::RemoveCondition(::grpc::ClientContext* context, const ::seshat::RemoveConditionRequest& request, ::seshat::RemoveConditionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RemoveConditionRequest, ::seshat::RemoveConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveCondition_, context, request, response);
}

void ConditionsService::Stub::async::RemoveCondition(::grpc::ClientContext* context, const ::seshat::RemoveConditionRequest* request, ::seshat::RemoveConditionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RemoveConditionRequest, ::seshat::RemoveConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveCondition_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::RemoveCondition(::grpc::ClientContext* context, const ::seshat::RemoveConditionRequest* request, ::seshat::RemoveConditionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RemoveConditionResponse>* ConditionsService::Stub::PrepareAsyncRemoveConditionRaw(::grpc::ClientContext* context, const ::seshat::RemoveConditionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RemoveConditionResponse, ::seshat::RemoveConditionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RemoveConditionResponse>* ConditionsService::Stub::AsyncRemoveConditionRaw(::grpc::ClientContext* context, const ::seshat::RemoveConditionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::GetConditions(::grpc::ClientContext* context, const ::seshat::GetConditionsRequest& request, ::seshat::GetConditionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetConditionsRequest, ::seshat::GetConditionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConditions_, context, request, response);
}

void ConditionsService::Stub::async::GetConditions(::grpc::ClientContext* context, const ::seshat::GetConditionsRequest* request, ::seshat::GetConditionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetConditionsRequest, ::seshat::GetConditionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConditions_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::GetConditions(::grpc::ClientContext* context, const ::seshat::GetConditionsRequest* request, ::seshat::GetConditionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConditions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConditionsResponse>* ConditionsService::Stub::PrepareAsyncGetConditionsRaw(::grpc::ClientContext* context, const ::seshat::GetConditionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetConditionsResponse, ::seshat::GetConditionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConditions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConditionsResponse>* ConditionsService::Stub::AsyncGetConditionsRaw(::grpc::ClientContext* context, const ::seshat::GetConditionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConditionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::UpdateCondition(::grpc::ClientContext* context, const ::seshat::UpdateConditionRequest& request, ::seshat::UpdateConditionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::UpdateConditionRequest, ::seshat::UpdateConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateCondition_, context, request, response);
}

void ConditionsService::Stub::async::UpdateCondition(::grpc::ClientContext* context, const ::seshat::UpdateConditionRequest* request, ::seshat::UpdateConditionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::UpdateConditionRequest, ::seshat::UpdateConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCondition_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::UpdateCondition(::grpc::ClientContext* context, const ::seshat::UpdateConditionRequest* request, ::seshat::UpdateConditionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::UpdateConditionResponse>* ConditionsService::Stub::PrepareAsyncUpdateConditionRaw(::grpc::ClientContext* context, const ::seshat::UpdateConditionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::UpdateConditionResponse, ::seshat::UpdateConditionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::UpdateConditionResponse>* ConditionsService::Stub::AsyncUpdateConditionRaw(::grpc::ClientContext* context, const ::seshat::UpdateConditionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::HasCondition(::grpc::ClientContext* context, const ::seshat::HasConditionRequest& request, ::seshat::HasConditionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::HasConditionRequest, ::seshat::HasConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HasCondition_, context, request, response);
}

void ConditionsService::Stub::async::HasCondition(::grpc::ClientContext* context, const ::seshat::HasConditionRequest* request, ::seshat::HasConditionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::HasConditionRequest, ::seshat::HasConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasCondition_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::HasCondition(::grpc::ClientContext* context, const ::seshat::HasConditionRequest* request, ::seshat::HasConditionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::HasConditionResponse>* ConditionsService::Stub::PrepareAsyncHasConditionRaw(::grpc::ClientContext* context, const ::seshat::HasConditionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::HasConditionResponse, ::seshat::HasConditionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HasCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::HasConditionResponse>* ConditionsService::Stub::AsyncHasConditionRaw(::grpc::ClientContext* context, const ::seshat::HasConditionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::GetConditionsByType(::grpc::ClientContext* context, const ::seshat::GetConditionsByTypeRequest& request, ::seshat::GetConditionsByTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetConditionsByTypeRequest, ::seshat::GetConditionsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConditionsByType_, context, request, response);
}

void ConditionsService::Stub::async::GetConditionsByType(::grpc::ClientContext* context, const ::seshat::GetConditionsByTypeRequest* request, ::seshat::GetConditionsByTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetConditionsByTypeRequest, ::seshat::GetConditionsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConditionsByType_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::GetConditionsByType(::grpc::ClientContext* context, const ::seshat::GetConditionsByTypeRequest* request, ::seshat::GetConditionsByTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConditionsByType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConditionsByTypeResponse>* ConditionsService::Stub::PrepareAsyncGetConditionsByTypeRaw(::grpc::ClientContext* context, const ::seshat::GetConditionsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetConditionsByTypeResponse, ::seshat::GetConditionsByTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConditionsByType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConditionsByTypeResponse>* ConditionsService::Stub::AsyncGetConditionsByTypeRaw(::grpc::ClientContext* context, const ::seshat::GetConditionsByTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConditionsByTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::GetActiveConditions(::grpc::ClientContext* context, const ::seshat::GetActiveConditionsRequest& request, ::seshat::GetActiveConditionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetActiveConditionsRequest, ::seshat::GetActiveConditionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetActiveConditions_, context, request, response);
}

void ConditionsService::Stub::async::GetActiveConditions(::grpc::ClientContext* context, const ::seshat::GetActiveConditionsRequest* request, ::seshat::GetActiveConditionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetActiveConditionsRequest, ::seshat::GetActiveConditionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActiveConditions_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::GetActiveConditions(::grpc::ClientContext* context, const ::seshat::GetActiveConditionsRequest* request, ::seshat::GetActiveConditionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActiveConditions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetActiveConditionsResponse>* ConditionsService::Stub::PrepareAsyncGetActiveConditionsRaw(::grpc::ClientContext* context, const ::seshat::GetActiveConditionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetActiveConditionsResponse, ::seshat::GetActiveConditionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetActiveConditions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetActiveConditionsResponse>* ConditionsService::Stub::AsyncGetActiveConditionsRaw(::grpc::ClientContext* context, const ::seshat::GetActiveConditionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetActiveConditionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::CheckImmunity(::grpc::ClientContext* context, const ::seshat::CheckImmunityRequest& request, ::seshat::CheckImmunityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CheckImmunityRequest, ::seshat::CheckImmunityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckImmunity_, context, request, response);
}

void ConditionsService::Stub::async::CheckImmunity(::grpc::ClientContext* context, const ::seshat::CheckImmunityRequest* request, ::seshat::CheckImmunityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CheckImmunityRequest, ::seshat::CheckImmunityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckImmunity_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::CheckImmunity(::grpc::ClientContext* context, const ::seshat::CheckImmunityRequest* request, ::seshat::CheckImmunityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckImmunity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CheckImmunityResponse>* ConditionsService::Stub::PrepareAsyncCheckImmunityRaw(::grpc::ClientContext* context, const ::seshat::CheckImmunityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CheckImmunityResponse, ::seshat::CheckImmunityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckImmunity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CheckImmunityResponse>* ConditionsService::Stub::AsyncCheckImmunityRaw(::grpc::ClientContext* context, const ::seshat::CheckImmunityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckImmunityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::GetConflictingConditions(::grpc::ClientContext* context, const ::seshat::GetConflictingConditionsRequest& request, ::seshat::GetConflictingConditionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetConflictingConditionsRequest, ::seshat::GetConflictingConditionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConflictingConditions_, context, request, response);
}

void ConditionsService::Stub::async::GetConflictingConditions(::grpc::ClientContext* context, const ::seshat::GetConflictingConditionsRequest* request, ::seshat::GetConflictingConditionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetConflictingConditionsRequest, ::seshat::GetConflictingConditionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConflictingConditions_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::GetConflictingConditions(::grpc::ClientContext* context, const ::seshat::GetConflictingConditionsRequest* request, ::seshat::GetConflictingConditionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConflictingConditions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConflictingConditionsResponse>* ConditionsService::Stub::PrepareAsyncGetConflictingConditionsRaw(::grpc::ClientContext* context, const ::seshat::GetConflictingConditionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetConflictingConditionsResponse, ::seshat::GetConflictingConditionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConflictingConditions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConflictingConditionsResponse>* ConditionsService::Stub::AsyncGetConflictingConditionsRaw(::grpc::ClientContext* context, const ::seshat::GetConflictingConditionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConflictingConditionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::ResolveConflicts(::grpc::ClientContext* context, const ::seshat::ResolveConflictsRequest& request, ::seshat::ResolveConflictsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ResolveConflictsRequest, ::seshat::ResolveConflictsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResolveConflicts_, context, request, response);
}

void ConditionsService::Stub::async::ResolveConflicts(::grpc::ClientContext* context, const ::seshat::ResolveConflictsRequest* request, ::seshat::ResolveConflictsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ResolveConflictsRequest, ::seshat::ResolveConflictsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResolveConflicts_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::ResolveConflicts(::grpc::ClientContext* context, const ::seshat::ResolveConflictsRequest* request, ::seshat::ResolveConflictsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResolveConflicts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ResolveConflictsResponse>* ConditionsService::Stub::PrepareAsyncResolveConflictsRaw(::grpc::ClientContext* context, const ::seshat::ResolveConflictsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ResolveConflictsResponse, ::seshat::ResolveConflictsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResolveConflicts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ResolveConflictsResponse>* ConditionsService::Stub::AsyncResolveConflictsRaw(::grpc::ClientContext* context, const ::seshat::ResolveConflictsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResolveConflictsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::GetConditionTemplates(::grpc::ClientContext* context, const ::seshat::GetConditionTemplatesRequest& request, ::seshat::GetConditionTemplatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetConditionTemplatesRequest, ::seshat::GetConditionTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConditionTemplates_, context, request, response);
}

void ConditionsService::Stub::async::GetConditionTemplates(::grpc::ClientContext* context, const ::seshat::GetConditionTemplatesRequest* request, ::seshat::GetConditionTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetConditionTemplatesRequest, ::seshat::GetConditionTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConditionTemplates_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::GetConditionTemplates(::grpc::ClientContext* context, const ::seshat::GetConditionTemplatesRequest* request, ::seshat::GetConditionTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConditionTemplates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConditionTemplatesResponse>* ConditionsService::Stub::PrepareAsyncGetConditionTemplatesRaw(::grpc::ClientContext* context, const ::seshat::GetConditionTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetConditionTemplatesResponse, ::seshat::GetConditionTemplatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConditionTemplates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConditionTemplatesResponse>* ConditionsService::Stub::AsyncGetConditionTemplatesRaw(::grpc::ClientContext* context, const ::seshat::GetConditionTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConditionTemplatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::CreateConditionTemplate(::grpc::ClientContext* context, const ::seshat::CreateConditionTemplateRequest& request, ::seshat::CreateConditionTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CreateConditionTemplateRequest, ::seshat::CreateConditionTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateConditionTemplate_, context, request, response);
}

void ConditionsService::Stub::async::CreateConditionTemplate(::grpc::ClientContext* context, const ::seshat::CreateConditionTemplateRequest* request, ::seshat::CreateConditionTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CreateConditionTemplateRequest, ::seshat::CreateConditionTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConditionTemplate_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::CreateConditionTemplate(::grpc::ClientContext* context, const ::seshat::CreateConditionTemplateRequest* request, ::seshat::CreateConditionTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConditionTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateConditionTemplateResponse>* ConditionsService::Stub::PrepareAsyncCreateConditionTemplateRaw(::grpc::ClientContext* context, const ::seshat::CreateConditionTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CreateConditionTemplateResponse, ::seshat::CreateConditionTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateConditionTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateConditionTemplateResponse>* ConditionsService::Stub::AsyncCreateConditionTemplateRaw(::grpc::ClientContext* context, const ::seshat::CreateConditionTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateConditionTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::ProcessConditionTick(::grpc::ClientContext* context, const ::seshat::ProcessConditionTickRequest& request, ::seshat::ProcessConditionTickResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ProcessConditionTickRequest, ::seshat::ProcessConditionTickResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessConditionTick_, context, request, response);
}

void ConditionsService::Stub::async::ProcessConditionTick(::grpc::ClientContext* context, const ::seshat::ProcessConditionTickRequest* request, ::seshat::ProcessConditionTickResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ProcessConditionTickRequest, ::seshat::ProcessConditionTickResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessConditionTick_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::ProcessConditionTick(::grpc::ClientContext* context, const ::seshat::ProcessConditionTickRequest* request, ::seshat::ProcessConditionTickResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessConditionTick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ProcessConditionTickResponse>* ConditionsService::Stub::PrepareAsyncProcessConditionTickRaw(::grpc::ClientContext* context, const ::seshat::ProcessConditionTickRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ProcessConditionTickResponse, ::seshat::ProcessConditionTickRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessConditionTick_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ProcessConditionTickResponse>* ConditionsService::Stub::AsyncProcessConditionTickRaw(::grpc::ClientContext* context, const ::seshat::ProcessConditionTickRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessConditionTickRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConditionsService::Stub::GetConditionHistory(::grpc::ClientContext* context, const ::seshat::GetConditionHistoryRequest& request, ::seshat::GetConditionHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetConditionHistoryRequest, ::seshat::GetConditionHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConditionHistory_, context, request, response);
}

void ConditionsService::Stub::async::GetConditionHistory(::grpc::ClientContext* context, const ::seshat::GetConditionHistoryRequest* request, ::seshat::GetConditionHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetConditionHistoryRequest, ::seshat::GetConditionHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConditionHistory_, context, request, response, std::move(f));
}

void ConditionsService::Stub::async::GetConditionHistory(::grpc::ClientContext* context, const ::seshat::GetConditionHistoryRequest* request, ::seshat::GetConditionHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConditionHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConditionHistoryResponse>* ConditionsService::Stub::PrepareAsyncGetConditionHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetConditionHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetConditionHistoryResponse, ::seshat::GetConditionHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConditionHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConditionHistoryResponse>* ConditionsService::Stub::AsyncGetConditionHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetConditionHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConditionHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConditionsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::ApplyConditionRequest, ::seshat::ApplyConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ApplyConditionRequest* req,
             ::seshat::ApplyConditionResponse* resp) {
               return service->ApplyCondition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::RemoveConditionRequest, ::seshat::RemoveConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RemoveConditionRequest* req,
             ::seshat::RemoveConditionResponse* resp) {
               return service->RemoveCondition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::GetConditionsRequest, ::seshat::GetConditionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetConditionsRequest* req,
             ::seshat::GetConditionsResponse* resp) {
               return service->GetConditions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::UpdateConditionRequest, ::seshat::UpdateConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::UpdateConditionRequest* req,
             ::seshat::UpdateConditionResponse* resp) {
               return service->UpdateCondition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::HasConditionRequest, ::seshat::HasConditionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::HasConditionRequest* req,
             ::seshat::HasConditionResponse* resp) {
               return service->HasCondition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::GetConditionsByTypeRequest, ::seshat::GetConditionsByTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetConditionsByTypeRequest* req,
             ::seshat::GetConditionsByTypeResponse* resp) {
               return service->GetConditionsByType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::GetActiveConditionsRequest, ::seshat::GetActiveConditionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetActiveConditionsRequest* req,
             ::seshat::GetActiveConditionsResponse* resp) {
               return service->GetActiveConditions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::CheckImmunityRequest, ::seshat::CheckImmunityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CheckImmunityRequest* req,
             ::seshat::CheckImmunityResponse* resp) {
               return service->CheckImmunity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::GetConflictingConditionsRequest, ::seshat::GetConflictingConditionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetConflictingConditionsRequest* req,
             ::seshat::GetConflictingConditionsResponse* resp) {
               return service->GetConflictingConditions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::ResolveConflictsRequest, ::seshat::ResolveConflictsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ResolveConflictsRequest* req,
             ::seshat::ResolveConflictsResponse* resp) {
               return service->ResolveConflicts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::GetConditionTemplatesRequest, ::seshat::GetConditionTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetConditionTemplatesRequest* req,
             ::seshat::GetConditionTemplatesResponse* resp) {
               return service->GetConditionTemplates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::CreateConditionTemplateRequest, ::seshat::CreateConditionTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CreateConditionTemplateRequest* req,
             ::seshat::CreateConditionTemplateResponse* resp) {
               return service->CreateConditionTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::ProcessConditionTickRequest, ::seshat::ProcessConditionTickResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ProcessConditionTickRequest* req,
             ::seshat::ProcessConditionTickResponse* resp) {
               return service->ProcessConditionTick(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConditionsService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConditionsService::Service, ::seshat::GetConditionHistoryRequest, ::seshat::GetConditionHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConditionsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetConditionHistoryRequest* req,
             ::seshat::GetConditionHistoryResponse* resp) {
               return service->GetConditionHistory(ctx, req, resp);
             }, this)));
}

ConditionsService::Service::~Service() {
}

::grpc::Status ConditionsService::Service::ApplyCondition(::grpc::ServerContext* context, const ::seshat::ApplyConditionRequest* request, ::seshat::ApplyConditionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::RemoveCondition(::grpc::ServerContext* context, const ::seshat::RemoveConditionRequest* request, ::seshat::RemoveConditionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::GetConditions(::grpc::ServerContext* context, const ::seshat::GetConditionsRequest* request, ::seshat::GetConditionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::UpdateCondition(::grpc::ServerContext* context, const ::seshat::UpdateConditionRequest* request, ::seshat::UpdateConditionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::HasCondition(::grpc::ServerContext* context, const ::seshat::HasConditionRequest* request, ::seshat::HasConditionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::GetConditionsByType(::grpc::ServerContext* context, const ::seshat::GetConditionsByTypeRequest* request, ::seshat::GetConditionsByTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::GetActiveConditions(::grpc::ServerContext* context, const ::seshat::GetActiveConditionsRequest* request, ::seshat::GetActiveConditionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::CheckImmunity(::grpc::ServerContext* context, const ::seshat::CheckImmunityRequest* request, ::seshat::CheckImmunityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::GetConflictingConditions(::grpc::ServerContext* context, const ::seshat::GetConflictingConditionsRequest* request, ::seshat::GetConflictingConditionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::ResolveConflicts(::grpc::ServerContext* context, const ::seshat::ResolveConflictsRequest* request, ::seshat::ResolveConflictsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::GetConditionTemplates(::grpc::ServerContext* context, const ::seshat::GetConditionTemplatesRequest* request, ::seshat::GetConditionTemplatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::CreateConditionTemplate(::grpc::ServerContext* context, const ::seshat::CreateConditionTemplateRequest* request, ::seshat::CreateConditionTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::ProcessConditionTick(::grpc::ServerContext* context, const ::seshat::ProcessConditionTickRequest* request, ::seshat::ProcessConditionTickResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConditionsService::Service::GetConditionHistory(::grpc::ServerContext* context, const ::seshat::GetConditionHistoryRequest* request, ::seshat::GetConditionHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace seshat
#include <grpcpp/ports_undef.inc>


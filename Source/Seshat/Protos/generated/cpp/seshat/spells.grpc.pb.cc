// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/spells.proto

#include "seshat/spells.pb.h"
#include "seshat/spells.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace seshat {

static const char* SpellService_method_names[] = {
  "/seshat.SpellService/GetSpell",
  "/seshat.SpellService/ListSpells",
  "/seshat.SpellService/CreateCustomSpell",
  "/seshat.SpellService/CastSpell",
  "/seshat.SpellService/CanCastSpell",
  "/seshat.SpellService/GetCastingOptions",
  "/seshat.SpellService/GetSpellSlots",
  "/seshat.SpellService/UpdateSpellSlots",
  "/seshat.SpellService/GetPreparedSpells",
  "/seshat.SpellService/PrepareSpell",
  "/seshat.SpellService/UnprepareSpell",
  "/seshat.SpellService/StartConcentration",
  "/seshat.SpellService/EndConcentration",
  "/seshat.SpellService/GetConcentrationStatus",
  "/seshat.SpellService/MakeConcentrationCheck",
  "/seshat.SpellService/GetSpellTargets",
  "/seshat.SpellService/ApplySpellEffects",
  "/seshat.SpellService/GetSpellAreas",
  "/seshat.SpellService/GetSpellHistory",
  "/seshat.SpellService/GetActiveSpells",
};

std::unique_ptr< SpellService::Stub> SpellService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpellService::Stub> stub(new SpellService::Stub(channel, options));
  return stub;
}

SpellService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetSpell_(SpellService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSpells_(SpellService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCustomSpell_(SpellService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CastSpell_(SpellService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CanCastSpell_(SpellService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCastingOptions_(SpellService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpellSlots_(SpellService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSpellSlots_(SpellService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPreparedSpells_(SpellService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareSpell_(SpellService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnprepareSpell_(SpellService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartConcentration_(SpellService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndConcentration_(SpellService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConcentrationStatus_(SpellService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakeConcentrationCheck_(SpellService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpellTargets_(SpellService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ApplySpellEffects_(SpellService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpellAreas_(SpellService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpellHistory_(SpellService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActiveSpells_(SpellService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SpellService::Stub::GetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::seshat::GetSpellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetSpellRequest, ::seshat::GetSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpell_, context, request, response);
}

void SpellService::Stub::async::GetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest* request, ::seshat::GetSpellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetSpellRequest, ::seshat::GetSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpell_, context, request, response, std::move(f));
}

void SpellService::Stub::async::GetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest* request, ::seshat::GetSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpellResponse>* SpellService::Stub::PrepareAsyncGetSpellRaw(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetSpellResponse, ::seshat::GetSpellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpellResponse>* SpellService::Stub::AsyncGetSpellRaw(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::ListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::seshat::ListSpellsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ListSpellsRequest, ::seshat::ListSpellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSpells_, context, request, response);
}

void SpellService::Stub::async::ListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest* request, ::seshat::ListSpellsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ListSpellsRequest, ::seshat::ListSpellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSpells_, context, request, response, std::move(f));
}

void SpellService::Stub::async::ListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest* request, ::seshat::ListSpellsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSpells_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ListSpellsResponse>* SpellService::Stub::PrepareAsyncListSpellsRaw(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ListSpellsResponse, ::seshat::ListSpellsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSpells_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ListSpellsResponse>* SpellService::Stub::AsyncListSpellsRaw(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSpellsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::CreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::seshat::CreateCustomSpellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CreateCustomSpellRequest, ::seshat::CreateCustomSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCustomSpell_, context, request, response);
}

void SpellService::Stub::async::CreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest* request, ::seshat::CreateCustomSpellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CreateCustomSpellRequest, ::seshat::CreateCustomSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCustomSpell_, context, request, response, std::move(f));
}

void SpellService::Stub::async::CreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest* request, ::seshat::CreateCustomSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCustomSpell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateCustomSpellResponse>* SpellService::Stub::PrepareAsyncCreateCustomSpellRaw(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CreateCustomSpellResponse, ::seshat::CreateCustomSpellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCustomSpell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateCustomSpellResponse>* SpellService::Stub::AsyncCreateCustomSpellRaw(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCustomSpellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::CastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::seshat::CastSpellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CastSpellRequest, ::seshat::CastSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CastSpell_, context, request, response);
}

void SpellService::Stub::async::CastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest* request, ::seshat::CastSpellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CastSpellRequest, ::seshat::CastSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CastSpell_, context, request, response, std::move(f));
}

void SpellService::Stub::async::CastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest* request, ::seshat::CastSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CastSpell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CastSpellResponse>* SpellService::Stub::PrepareAsyncCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CastSpellResponse, ::seshat::CastSpellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CastSpell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CastSpellResponse>* SpellService::Stub::AsyncCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCastSpellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::CanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::seshat::CanCastSpellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CanCastSpellRequest, ::seshat::CanCastSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CanCastSpell_, context, request, response);
}

void SpellService::Stub::async::CanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest* request, ::seshat::CanCastSpellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CanCastSpellRequest, ::seshat::CanCastSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CanCastSpell_, context, request, response, std::move(f));
}

void SpellService::Stub::async::CanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest* request, ::seshat::CanCastSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CanCastSpell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CanCastSpellResponse>* SpellService::Stub::PrepareAsyncCanCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CanCastSpellResponse, ::seshat::CanCastSpellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CanCastSpell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CanCastSpellResponse>* SpellService::Stub::AsyncCanCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCanCastSpellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::GetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::seshat::GetCastingOptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetCastingOptionsRequest, ::seshat::GetCastingOptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCastingOptions_, context, request, response);
}

void SpellService::Stub::async::GetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest* request, ::seshat::GetCastingOptionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetCastingOptionsRequest, ::seshat::GetCastingOptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCastingOptions_, context, request, response, std::move(f));
}

void SpellService::Stub::async::GetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest* request, ::seshat::GetCastingOptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCastingOptions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetCastingOptionsResponse>* SpellService::Stub::PrepareAsyncGetCastingOptionsRaw(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetCastingOptionsResponse, ::seshat::GetCastingOptionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCastingOptions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetCastingOptionsResponse>* SpellService::Stub::AsyncGetCastingOptionsRaw(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCastingOptionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::GetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::seshat::GetSpellSlotsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetSpellSlotsRequest, ::seshat::GetSpellSlotsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpellSlots_, context, request, response);
}

void SpellService::Stub::async::GetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest* request, ::seshat::GetSpellSlotsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetSpellSlotsRequest, ::seshat::GetSpellSlotsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpellSlots_, context, request, response, std::move(f));
}

void SpellService::Stub::async::GetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest* request, ::seshat::GetSpellSlotsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpellSlots_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpellSlotsResponse>* SpellService::Stub::PrepareAsyncGetSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetSpellSlotsResponse, ::seshat::GetSpellSlotsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpellSlots_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpellSlotsResponse>* SpellService::Stub::AsyncGetSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpellSlotsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::UpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::seshat::UpdateSpellSlotsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::UpdateSpellSlotsRequest, ::seshat::UpdateSpellSlotsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSpellSlots_, context, request, response);
}

void SpellService::Stub::async::UpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest* request, ::seshat::UpdateSpellSlotsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::UpdateSpellSlotsRequest, ::seshat::UpdateSpellSlotsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSpellSlots_, context, request, response, std::move(f));
}

void SpellService::Stub::async::UpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest* request, ::seshat::UpdateSpellSlotsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSpellSlots_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::UpdateSpellSlotsResponse>* SpellService::Stub::PrepareAsyncUpdateSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::UpdateSpellSlotsResponse, ::seshat::UpdateSpellSlotsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSpellSlots_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::UpdateSpellSlotsResponse>* SpellService::Stub::AsyncUpdateSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSpellSlotsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::GetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::seshat::GetPreparedSpellsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetPreparedSpellsRequest, ::seshat::GetPreparedSpellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPreparedSpells_, context, request, response);
}

void SpellService::Stub::async::GetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest* request, ::seshat::GetPreparedSpellsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetPreparedSpellsRequest, ::seshat::GetPreparedSpellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPreparedSpells_, context, request, response, std::move(f));
}

void SpellService::Stub::async::GetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest* request, ::seshat::GetPreparedSpellsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPreparedSpells_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetPreparedSpellsResponse>* SpellService::Stub::PrepareAsyncGetPreparedSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetPreparedSpellsResponse, ::seshat::GetPreparedSpellsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPreparedSpells_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetPreparedSpellsResponse>* SpellService::Stub::AsyncGetPreparedSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPreparedSpellsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::PrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::seshat::PrepareSpellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::PrepareSpellRequest, ::seshat::PrepareSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareSpell_, context, request, response);
}

void SpellService::Stub::async::PrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest* request, ::seshat::PrepareSpellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::PrepareSpellRequest, ::seshat::PrepareSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareSpell_, context, request, response, std::move(f));
}

void SpellService::Stub::async::PrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest* request, ::seshat::PrepareSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareSpell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::PrepareSpellResponse>* SpellService::Stub::PrepareAsyncPrepareSpellRaw(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::PrepareSpellResponse, ::seshat::PrepareSpellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareSpell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::PrepareSpellResponse>* SpellService::Stub::AsyncPrepareSpellRaw(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareSpellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::UnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::seshat::UnprepareSpellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::UnprepareSpellRequest, ::seshat::UnprepareSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnprepareSpell_, context, request, response);
}

void SpellService::Stub::async::UnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest* request, ::seshat::UnprepareSpellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::UnprepareSpellRequest, ::seshat::UnprepareSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnprepareSpell_, context, request, response, std::move(f));
}

void SpellService::Stub::async::UnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest* request, ::seshat::UnprepareSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnprepareSpell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::UnprepareSpellResponse>* SpellService::Stub::PrepareAsyncUnprepareSpellRaw(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::UnprepareSpellResponse, ::seshat::UnprepareSpellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnprepareSpell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::UnprepareSpellResponse>* SpellService::Stub::AsyncUnprepareSpellRaw(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnprepareSpellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::StartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::seshat::StartConcentrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::StartConcentrationRequest, ::seshat::StartConcentrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartConcentration_, context, request, response);
}

void SpellService::Stub::async::StartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest* request, ::seshat::StartConcentrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::StartConcentrationRequest, ::seshat::StartConcentrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartConcentration_, context, request, response, std::move(f));
}

void SpellService::Stub::async::StartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest* request, ::seshat::StartConcentrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartConcentration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::StartConcentrationResponse>* SpellService::Stub::PrepareAsyncStartConcentrationRaw(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::StartConcentrationResponse, ::seshat::StartConcentrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartConcentration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::StartConcentrationResponse>* SpellService::Stub::AsyncStartConcentrationRaw(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartConcentrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::EndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::seshat::EndConcentrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::EndConcentrationRequest, ::seshat::EndConcentrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndConcentration_, context, request, response);
}

void SpellService::Stub::async::EndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest* request, ::seshat::EndConcentrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::EndConcentrationRequest, ::seshat::EndConcentrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndConcentration_, context, request, response, std::move(f));
}

void SpellService::Stub::async::EndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest* request, ::seshat::EndConcentrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndConcentration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::EndConcentrationResponse>* SpellService::Stub::PrepareAsyncEndConcentrationRaw(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::EndConcentrationResponse, ::seshat::EndConcentrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndConcentration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::EndConcentrationResponse>* SpellService::Stub::AsyncEndConcentrationRaw(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndConcentrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::GetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::seshat::GetConcentrationStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetConcentrationStatusRequest, ::seshat::GetConcentrationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConcentrationStatus_, context, request, response);
}

void SpellService::Stub::async::GetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest* request, ::seshat::GetConcentrationStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetConcentrationStatusRequest, ::seshat::GetConcentrationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConcentrationStatus_, context, request, response, std::move(f));
}

void SpellService::Stub::async::GetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest* request, ::seshat::GetConcentrationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConcentrationStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConcentrationStatusResponse>* SpellService::Stub::PrepareAsyncGetConcentrationStatusRaw(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetConcentrationStatusResponse, ::seshat::GetConcentrationStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConcentrationStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConcentrationStatusResponse>* SpellService::Stub::AsyncGetConcentrationStatusRaw(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConcentrationStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::MakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::seshat::MakeConcentrationCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::MakeConcentrationCheckRequest, ::seshat::MakeConcentrationCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MakeConcentrationCheck_, context, request, response);
}

void SpellService::Stub::async::MakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest* request, ::seshat::MakeConcentrationCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::MakeConcentrationCheckRequest, ::seshat::MakeConcentrationCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeConcentrationCheck_, context, request, response, std::move(f));
}

void SpellService::Stub::async::MakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest* request, ::seshat::MakeConcentrationCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeConcentrationCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::MakeConcentrationCheckResponse>* SpellService::Stub::PrepareAsyncMakeConcentrationCheckRaw(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::MakeConcentrationCheckResponse, ::seshat::MakeConcentrationCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MakeConcentrationCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::MakeConcentrationCheckResponse>* SpellService::Stub::AsyncMakeConcentrationCheckRaw(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMakeConcentrationCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::GetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::seshat::GetSpellTargetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetSpellTargetsRequest, ::seshat::GetSpellTargetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpellTargets_, context, request, response);
}

void SpellService::Stub::async::GetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest* request, ::seshat::GetSpellTargetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetSpellTargetsRequest, ::seshat::GetSpellTargetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpellTargets_, context, request, response, std::move(f));
}

void SpellService::Stub::async::GetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest* request, ::seshat::GetSpellTargetsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpellTargets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpellTargetsResponse>* SpellService::Stub::PrepareAsyncGetSpellTargetsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetSpellTargetsResponse, ::seshat::GetSpellTargetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpellTargets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpellTargetsResponse>* SpellService::Stub::AsyncGetSpellTargetsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpellTargetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::ApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::seshat::ApplySpellEffectsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ApplySpellEffectsRequest, ::seshat::ApplySpellEffectsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApplySpellEffects_, context, request, response);
}

void SpellService::Stub::async::ApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest* request, ::seshat::ApplySpellEffectsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ApplySpellEffectsRequest, ::seshat::ApplySpellEffectsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplySpellEffects_, context, request, response, std::move(f));
}

void SpellService::Stub::async::ApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest* request, ::seshat::ApplySpellEffectsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplySpellEffects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ApplySpellEffectsResponse>* SpellService::Stub::PrepareAsyncApplySpellEffectsRaw(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ApplySpellEffectsResponse, ::seshat::ApplySpellEffectsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApplySpellEffects_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ApplySpellEffectsResponse>* SpellService::Stub::AsyncApplySpellEffectsRaw(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplySpellEffectsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::GetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::seshat::GetSpellAreasResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetSpellAreasRequest, ::seshat::GetSpellAreasResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpellAreas_, context, request, response);
}

void SpellService::Stub::async::GetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest* request, ::seshat::GetSpellAreasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetSpellAreasRequest, ::seshat::GetSpellAreasResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpellAreas_, context, request, response, std::move(f));
}

void SpellService::Stub::async::GetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest* request, ::seshat::GetSpellAreasResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpellAreas_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpellAreasResponse>* SpellService::Stub::PrepareAsyncGetSpellAreasRaw(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetSpellAreasResponse, ::seshat::GetSpellAreasRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpellAreas_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpellAreasResponse>* SpellService::Stub::AsyncGetSpellAreasRaw(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpellAreasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::GetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::seshat::GetSpellHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetSpellHistoryRequest, ::seshat::GetSpellHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpellHistory_, context, request, response);
}

void SpellService::Stub::async::GetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest* request, ::seshat::GetSpellHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetSpellHistoryRequest, ::seshat::GetSpellHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpellHistory_, context, request, response, std::move(f));
}

void SpellService::Stub::async::GetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest* request, ::seshat::GetSpellHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpellHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpellHistoryResponse>* SpellService::Stub::PrepareAsyncGetSpellHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetSpellHistoryResponse, ::seshat::GetSpellHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpellHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetSpellHistoryResponse>* SpellService::Stub::AsyncGetSpellHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpellHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpellService::Stub::GetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::seshat::GetActiveSpellsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetActiveSpellsRequest, ::seshat::GetActiveSpellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetActiveSpells_, context, request, response);
}

void SpellService::Stub::async::GetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest* request, ::seshat::GetActiveSpellsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetActiveSpellsRequest, ::seshat::GetActiveSpellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActiveSpells_, context, request, response, std::move(f));
}

void SpellService::Stub::async::GetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest* request, ::seshat::GetActiveSpellsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActiveSpells_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetActiveSpellsResponse>* SpellService::Stub::PrepareAsyncGetActiveSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetActiveSpellsResponse, ::seshat::GetActiveSpellsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetActiveSpells_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetActiveSpellsResponse>* SpellService::Stub::AsyncGetActiveSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetActiveSpellsRaw(context, request, cq);
  result->StartCall();
  return result;
}

SpellService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::GetSpellRequest, ::seshat::GetSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetSpellRequest* req,
             ::seshat::GetSpellResponse* resp) {
               return service->GetSpell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::ListSpellsRequest, ::seshat::ListSpellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ListSpellsRequest* req,
             ::seshat::ListSpellsResponse* resp) {
               return service->ListSpells(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::CreateCustomSpellRequest, ::seshat::CreateCustomSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CreateCustomSpellRequest* req,
             ::seshat::CreateCustomSpellResponse* resp) {
               return service->CreateCustomSpell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::CastSpellRequest, ::seshat::CastSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CastSpellRequest* req,
             ::seshat::CastSpellResponse* resp) {
               return service->CastSpell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::CanCastSpellRequest, ::seshat::CanCastSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CanCastSpellRequest* req,
             ::seshat::CanCastSpellResponse* resp) {
               return service->CanCastSpell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::GetCastingOptionsRequest, ::seshat::GetCastingOptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetCastingOptionsRequest* req,
             ::seshat::GetCastingOptionsResponse* resp) {
               return service->GetCastingOptions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::GetSpellSlotsRequest, ::seshat::GetSpellSlotsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetSpellSlotsRequest* req,
             ::seshat::GetSpellSlotsResponse* resp) {
               return service->GetSpellSlots(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::UpdateSpellSlotsRequest, ::seshat::UpdateSpellSlotsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::UpdateSpellSlotsRequest* req,
             ::seshat::UpdateSpellSlotsResponse* resp) {
               return service->UpdateSpellSlots(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::GetPreparedSpellsRequest, ::seshat::GetPreparedSpellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetPreparedSpellsRequest* req,
             ::seshat::GetPreparedSpellsResponse* resp) {
               return service->GetPreparedSpells(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::PrepareSpellRequest, ::seshat::PrepareSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::PrepareSpellRequest* req,
             ::seshat::PrepareSpellResponse* resp) {
               return service->PrepareSpell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::UnprepareSpellRequest, ::seshat::UnprepareSpellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::UnprepareSpellRequest* req,
             ::seshat::UnprepareSpellResponse* resp) {
               return service->UnprepareSpell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::StartConcentrationRequest, ::seshat::StartConcentrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::StartConcentrationRequest* req,
             ::seshat::StartConcentrationResponse* resp) {
               return service->StartConcentration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::EndConcentrationRequest, ::seshat::EndConcentrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::EndConcentrationRequest* req,
             ::seshat::EndConcentrationResponse* resp) {
               return service->EndConcentration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::GetConcentrationStatusRequest, ::seshat::GetConcentrationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetConcentrationStatusRequest* req,
             ::seshat::GetConcentrationStatusResponse* resp) {
               return service->GetConcentrationStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::MakeConcentrationCheckRequest, ::seshat::MakeConcentrationCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::MakeConcentrationCheckRequest* req,
             ::seshat::MakeConcentrationCheckResponse* resp) {
               return service->MakeConcentrationCheck(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::GetSpellTargetsRequest, ::seshat::GetSpellTargetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetSpellTargetsRequest* req,
             ::seshat::GetSpellTargetsResponse* resp) {
               return service->GetSpellTargets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::ApplySpellEffectsRequest, ::seshat::ApplySpellEffectsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ApplySpellEffectsRequest* req,
             ::seshat::ApplySpellEffectsResponse* resp) {
               return service->ApplySpellEffects(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::GetSpellAreasRequest, ::seshat::GetSpellAreasResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetSpellAreasRequest* req,
             ::seshat::GetSpellAreasResponse* resp) {
               return service->GetSpellAreas(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::GetSpellHistoryRequest, ::seshat::GetSpellHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetSpellHistoryRequest* req,
             ::seshat::GetSpellHistoryResponse* resp) {
               return service->GetSpellHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpellService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpellService::Service, ::seshat::GetActiveSpellsRequest, ::seshat::GetActiveSpellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpellService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetActiveSpellsRequest* req,
             ::seshat::GetActiveSpellsResponse* resp) {
               return service->GetActiveSpells(ctx, req, resp);
             }, this)));
}

SpellService::Service::~Service() {
}

::grpc::Status SpellService::Service::GetSpell(::grpc::ServerContext* context, const ::seshat::GetSpellRequest* request, ::seshat::GetSpellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::ListSpells(::grpc::ServerContext* context, const ::seshat::ListSpellsRequest* request, ::seshat::ListSpellsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::CreateCustomSpell(::grpc::ServerContext* context, const ::seshat::CreateCustomSpellRequest* request, ::seshat::CreateCustomSpellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::CastSpell(::grpc::ServerContext* context, const ::seshat::CastSpellRequest* request, ::seshat::CastSpellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::CanCastSpell(::grpc::ServerContext* context, const ::seshat::CanCastSpellRequest* request, ::seshat::CanCastSpellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::GetCastingOptions(::grpc::ServerContext* context, const ::seshat::GetCastingOptionsRequest* request, ::seshat::GetCastingOptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::GetSpellSlots(::grpc::ServerContext* context, const ::seshat::GetSpellSlotsRequest* request, ::seshat::GetSpellSlotsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::UpdateSpellSlots(::grpc::ServerContext* context, const ::seshat::UpdateSpellSlotsRequest* request, ::seshat::UpdateSpellSlotsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::GetPreparedSpells(::grpc::ServerContext* context, const ::seshat::GetPreparedSpellsRequest* request, ::seshat::GetPreparedSpellsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::PrepareSpell(::grpc::ServerContext* context, const ::seshat::PrepareSpellRequest* request, ::seshat::PrepareSpellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::UnprepareSpell(::grpc::ServerContext* context, const ::seshat::UnprepareSpellRequest* request, ::seshat::UnprepareSpellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::StartConcentration(::grpc::ServerContext* context, const ::seshat::StartConcentrationRequest* request, ::seshat::StartConcentrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::EndConcentration(::grpc::ServerContext* context, const ::seshat::EndConcentrationRequest* request, ::seshat::EndConcentrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::GetConcentrationStatus(::grpc::ServerContext* context, const ::seshat::GetConcentrationStatusRequest* request, ::seshat::GetConcentrationStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::MakeConcentrationCheck(::grpc::ServerContext* context, const ::seshat::MakeConcentrationCheckRequest* request, ::seshat::MakeConcentrationCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::GetSpellTargets(::grpc::ServerContext* context, const ::seshat::GetSpellTargetsRequest* request, ::seshat::GetSpellTargetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::ApplySpellEffects(::grpc::ServerContext* context, const ::seshat::ApplySpellEffectsRequest* request, ::seshat::ApplySpellEffectsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::GetSpellAreas(::grpc::ServerContext* context, const ::seshat::GetSpellAreasRequest* request, ::seshat::GetSpellAreasResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::GetSpellHistory(::grpc::ServerContext* context, const ::seshat::GetSpellHistoryRequest* request, ::seshat::GetSpellHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpellService::Service::GetActiveSpells(::grpc::ServerContext* context, const ::seshat::GetActiveSpellsRequest* request, ::seshat::GetActiveSpellsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace seshat
#include <grpcpp/ports_undef.inc>


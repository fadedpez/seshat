// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/dice.proto

#include "seshat/dice.pb.h"
#include "seshat/dice.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace seshat {

static const char* DiceService_method_names[] = {
  "/seshat.DiceService/Roll",
  "/seshat.DiceService/RollMultiple",
  "/seshat.DiceService/RollFormula",
  "/seshat.DiceService/StreamRolls",
  "/seshat.DiceService/GetRollHistory",
  "/seshat.DiceService/TestFairness",
};

std::unique_ptr< DiceService::Stub> DiceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DiceService::Stub> stub(new DiceService::Stub(channel, options));
  return stub;
}

DiceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Roll_(DiceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RollMultiple_(DiceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RollFormula_(DiceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamRolls_(DiceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_GetRollHistory_(DiceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestFairness_(DiceService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DiceService::Stub::Roll(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::seshat::RollResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RollRequest, ::seshat::RollResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Roll_, context, request, response);
}

void DiceService::Stub::async::Roll(::grpc::ClientContext* context, const ::seshat::RollRequest* request, ::seshat::RollResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RollRequest, ::seshat::RollResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Roll_, context, request, response, std::move(f));
}

void DiceService::Stub::async::Roll(::grpc::ClientContext* context, const ::seshat::RollRequest* request, ::seshat::RollResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Roll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RollResponse>* DiceService::Stub::PrepareAsyncRollRaw(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RollResponse, ::seshat::RollRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Roll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RollResponse>* DiceService::Stub::AsyncRollRaw(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DiceService::Stub::RollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::seshat::RollMultipleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RollMultipleRequest, ::seshat::RollMultipleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RollMultiple_, context, request, response);
}

void DiceService::Stub::async::RollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest* request, ::seshat::RollMultipleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RollMultipleRequest, ::seshat::RollMultipleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollMultiple_, context, request, response, std::move(f));
}

void DiceService::Stub::async::RollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest* request, ::seshat::RollMultipleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollMultiple_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RollMultipleResponse>* DiceService::Stub::PrepareAsyncRollMultipleRaw(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RollMultipleResponse, ::seshat::RollMultipleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RollMultiple_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RollMultipleResponse>* DiceService::Stub::AsyncRollMultipleRaw(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollMultipleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DiceService::Stub::RollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::seshat::RollFormulaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RollFormulaRequest, ::seshat::RollFormulaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RollFormula_, context, request, response);
}

void DiceService::Stub::async::RollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest* request, ::seshat::RollFormulaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RollFormulaRequest, ::seshat::RollFormulaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollFormula_, context, request, response, std::move(f));
}

void DiceService::Stub::async::RollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest* request, ::seshat::RollFormulaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollFormula_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RollFormulaResponse>* DiceService::Stub::PrepareAsyncRollFormulaRaw(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RollFormulaResponse, ::seshat::RollFormulaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RollFormula_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RollFormulaResponse>* DiceService::Stub::AsyncRollFormulaRaw(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollFormulaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>* DiceService::Stub::StreamRollsRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::seshat::RollRequest, ::seshat::RollResponse>::Create(channel_.get(), rpcmethod_StreamRolls_, context);
}

void DiceService::Stub::async::StreamRolls(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::seshat::RollRequest,::seshat::RollResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::seshat::RollRequest,::seshat::RollResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamRolls_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>* DiceService::Stub::AsyncStreamRollsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::seshat::RollRequest, ::seshat::RollResponse>::Create(channel_.get(), cq, rpcmethod_StreamRolls_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>* DiceService::Stub::PrepareAsyncStreamRollsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::seshat::RollRequest, ::seshat::RollResponse>::Create(channel_.get(), cq, rpcmethod_StreamRolls_, context, false, nullptr);
}

::grpc::Status DiceService::Stub::GetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::seshat::RollHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RollHistoryRequest, ::seshat::RollHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRollHistory_, context, request, response);
}

void DiceService::Stub::async::GetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest* request, ::seshat::RollHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RollHistoryRequest, ::seshat::RollHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRollHistory_, context, request, response, std::move(f));
}

void DiceService::Stub::async::GetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest* request, ::seshat::RollHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRollHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RollHistoryResponse>* DiceService::Stub::PrepareAsyncGetRollHistoryRaw(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RollHistoryResponse, ::seshat::RollHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRollHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RollHistoryResponse>* DiceService::Stub::AsyncGetRollHistoryRaw(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRollHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DiceService::Stub::TestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::seshat::FairnessTestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::FairnessTestRequest, ::seshat::FairnessTestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestFairness_, context, request, response);
}

void DiceService::Stub::async::TestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest* request, ::seshat::FairnessTestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::FairnessTestRequest, ::seshat::FairnessTestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestFairness_, context, request, response, std::move(f));
}

void DiceService::Stub::async::TestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest* request, ::seshat::FairnessTestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestFairness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::FairnessTestResponse>* DiceService::Stub::PrepareAsyncTestFairnessRaw(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::FairnessTestResponse, ::seshat::FairnessTestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestFairness_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::FairnessTestResponse>* DiceService::Stub::AsyncTestFairnessRaw(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestFairnessRaw(context, request, cq);
  result->StartCall();
  return result;
}

DiceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiceService::Service, ::seshat::RollRequest, ::seshat::RollResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RollRequest* req,
             ::seshat::RollResponse* resp) {
               return service->Roll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiceService::Service, ::seshat::RollMultipleRequest, ::seshat::RollMultipleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RollMultipleRequest* req,
             ::seshat::RollMultipleResponse* resp) {
               return service->RollMultiple(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiceService::Service, ::seshat::RollFormulaRequest, ::seshat::RollFormulaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RollFormulaRequest* req,
             ::seshat::RollFormulaResponse* resp) {
               return service->RollFormula(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiceService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< DiceService::Service, ::seshat::RollRequest, ::seshat::RollResponse>(
          [](DiceService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::seshat::RollResponse,
             ::seshat::RollRequest>* stream) {
               return service->StreamRolls(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiceService::Service, ::seshat::RollHistoryRequest, ::seshat::RollHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RollHistoryRequest* req,
             ::seshat::RollHistoryResponse* resp) {
               return service->GetRollHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DiceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DiceService::Service, ::seshat::FairnessTestRequest, ::seshat::FairnessTestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DiceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::FairnessTestRequest* req,
             ::seshat::FairnessTestResponse* resp) {
               return service->TestFairness(ctx, req, resp);
             }, this)));
}

DiceService::Service::~Service() {
}

::grpc::Status DiceService::Service::Roll(::grpc::ServerContext* context, const ::seshat::RollRequest* request, ::seshat::RollResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiceService::Service::RollMultiple(::grpc::ServerContext* context, const ::seshat::RollMultipleRequest* request, ::seshat::RollMultipleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiceService::Service::RollFormula(::grpc::ServerContext* context, const ::seshat::RollFormulaRequest* request, ::seshat::RollFormulaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiceService::Service::StreamRolls(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::seshat::RollResponse, ::seshat::RollRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiceService::Service::GetRollHistory(::grpc::ServerContext* context, const ::seshat::RollHistoryRequest* request, ::seshat::RollHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DiceService::Service::TestFairness(::grpc::ServerContext* context, const ::seshat::FairnessTestRequest* request, ::seshat::FairnessTestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace seshat
#include <grpcpp/ports_undef.inc>


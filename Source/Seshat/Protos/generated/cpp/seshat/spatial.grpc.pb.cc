// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/spatial.proto

#include "seshat/spatial.pb.h"
#include "seshat/spatial.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace seshat {

static const char* SpatialService_method_names[] = {
  "/seshat.SpatialService/CreateRoom",
  "/seshat.SpatialService/GetRoom",
  "/seshat.SpatialService/ListRooms",
  "/seshat.SpatialService/DeleteRoom",
  "/seshat.SpatialService/PlaceEntity",
  "/seshat.SpatialService/MoveEntity",
  "/seshat.SpatialService/RemoveEntity",
  "/seshat.SpatialService/GetEntityPosition",
  "/seshat.SpatialService/GetEntitiesAt",
  "/seshat.SpatialService/GetEntitiesInRange",
  "/seshat.SpatialService/GetEntitiesInArea",
  "/seshat.SpatialService/GetEntitiesInLine",
  "/seshat.SpatialService/FindPath",
  "/seshat.SpatialService/GetDistance",
  "/seshat.SpatialService/CheckLineOfSight",
  "/seshat.SpatialService/CreateConnection",
  "/seshat.SpatialService/GetConnections",
  "/seshat.SpatialService/MoveEntityBetweenRooms",
  "/seshat.SpatialService/GetValidPositions",
  "/seshat.SpatialService/IsValidPosition",
};

std::unique_ptr< SpatialService::Stub> SpatialService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpatialService::Stub> stub(new SpatialService::Stub(channel, options));
  return stub;
}

SpatialService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateRoom_(SpatialService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoom_(SpatialService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRooms_(SpatialService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRoom_(SpatialService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlaceEntity_(SpatialService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveEntity_(SpatialService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveEntity_(SpatialService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntityPosition_(SpatialService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntitiesAt_(SpatialService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntitiesInRange_(SpatialService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntitiesInArea_(SpatialService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntitiesInLine_(SpatialService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindPath_(SpatialService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDistance_(SpatialService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckLineOfSight_(SpatialService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateConnection_(SpatialService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConnections_(SpatialService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveEntityBetweenRooms_(SpatialService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetValidPositions_(SpatialService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsValidPosition_(SpatialService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SpatialService::Stub::CreateRoom(::grpc::ClientContext* context, const ::seshat::CreateRoomRequest& request, ::seshat::CreateRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CreateRoomRequest, ::seshat::CreateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRoom_, context, request, response);
}

void SpatialService::Stub::async::CreateRoom(::grpc::ClientContext* context, const ::seshat::CreateRoomRequest* request, ::seshat::CreateRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CreateRoomRequest, ::seshat::CreateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRoom_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::CreateRoom(::grpc::ClientContext* context, const ::seshat::CreateRoomRequest* request, ::seshat::CreateRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateRoomResponse>* SpatialService::Stub::PrepareAsyncCreateRoomRaw(::grpc::ClientContext* context, const ::seshat::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CreateRoomResponse, ::seshat::CreateRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateRoomResponse>* SpatialService::Stub::AsyncCreateRoomRaw(::grpc::ClientContext* context, const ::seshat::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::GetRoom(::grpc::ClientContext* context, const ::seshat::GetRoomRequest& request, ::seshat::GetRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetRoomRequest, ::seshat::GetRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoom_, context, request, response);
}

void SpatialService::Stub::async::GetRoom(::grpc::ClientContext* context, const ::seshat::GetRoomRequest* request, ::seshat::GetRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetRoomRequest, ::seshat::GetRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoom_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::GetRoom(::grpc::ClientContext* context, const ::seshat::GetRoomRequest* request, ::seshat::GetRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetRoomResponse>* SpatialService::Stub::PrepareAsyncGetRoomRaw(::grpc::ClientContext* context, const ::seshat::GetRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetRoomResponse, ::seshat::GetRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetRoomResponse>* SpatialService::Stub::AsyncGetRoomRaw(::grpc::ClientContext* context, const ::seshat::GetRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::ListRooms(::grpc::ClientContext* context, const ::seshat::ListRoomsRequest& request, ::seshat::ListRoomsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ListRoomsRequest, ::seshat::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListRooms_, context, request, response);
}

void SpatialService::Stub::async::ListRooms(::grpc::ClientContext* context, const ::seshat::ListRoomsRequest* request, ::seshat::ListRoomsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ListRoomsRequest, ::seshat::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRooms_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::ListRooms(::grpc::ClientContext* context, const ::seshat::ListRoomsRequest* request, ::seshat::ListRoomsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRooms_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ListRoomsResponse>* SpatialService::Stub::PrepareAsyncListRoomsRaw(::grpc::ClientContext* context, const ::seshat::ListRoomsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ListRoomsResponse, ::seshat::ListRoomsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListRooms_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ListRoomsResponse>* SpatialService::Stub::AsyncListRoomsRaw(::grpc::ClientContext* context, const ::seshat::ListRoomsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRoomsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::DeleteRoom(::grpc::ClientContext* context, const ::seshat::DeleteRoomRequest& request, ::seshat::DeleteRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::DeleteRoomRequest, ::seshat::DeleteRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRoom_, context, request, response);
}

void SpatialService::Stub::async::DeleteRoom(::grpc::ClientContext* context, const ::seshat::DeleteRoomRequest* request, ::seshat::DeleteRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::DeleteRoomRequest, ::seshat::DeleteRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRoom_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::DeleteRoom(::grpc::ClientContext* context, const ::seshat::DeleteRoomRequest* request, ::seshat::DeleteRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::DeleteRoomResponse>* SpatialService::Stub::PrepareAsyncDeleteRoomRaw(::grpc::ClientContext* context, const ::seshat::DeleteRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::DeleteRoomResponse, ::seshat::DeleteRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::DeleteRoomResponse>* SpatialService::Stub::AsyncDeleteRoomRaw(::grpc::ClientContext* context, const ::seshat::DeleteRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::PlaceEntity(::grpc::ClientContext* context, const ::seshat::PlaceEntityRequest& request, ::seshat::PlaceEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::PlaceEntityRequest, ::seshat::PlaceEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlaceEntity_, context, request, response);
}

void SpatialService::Stub::async::PlaceEntity(::grpc::ClientContext* context, const ::seshat::PlaceEntityRequest* request, ::seshat::PlaceEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::PlaceEntityRequest, ::seshat::PlaceEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaceEntity_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::PlaceEntity(::grpc::ClientContext* context, const ::seshat::PlaceEntityRequest* request, ::seshat::PlaceEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaceEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::PlaceEntityResponse>* SpatialService::Stub::PrepareAsyncPlaceEntityRaw(::grpc::ClientContext* context, const ::seshat::PlaceEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::PlaceEntityResponse, ::seshat::PlaceEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlaceEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::PlaceEntityResponse>* SpatialService::Stub::AsyncPlaceEntityRaw(::grpc::ClientContext* context, const ::seshat::PlaceEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlaceEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::MoveEntity(::grpc::ClientContext* context, const ::seshat::MoveEntityRequest& request, ::seshat::MoveEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::MoveEntityRequest, ::seshat::MoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveEntity_, context, request, response);
}

void SpatialService::Stub::async::MoveEntity(::grpc::ClientContext* context, const ::seshat::MoveEntityRequest* request, ::seshat::MoveEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::MoveEntityRequest, ::seshat::MoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveEntity_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::MoveEntity(::grpc::ClientContext* context, const ::seshat::MoveEntityRequest* request, ::seshat::MoveEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::MoveEntityResponse>* SpatialService::Stub::PrepareAsyncMoveEntityRaw(::grpc::ClientContext* context, const ::seshat::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::MoveEntityResponse, ::seshat::MoveEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::MoveEntityResponse>* SpatialService::Stub::AsyncMoveEntityRaw(::grpc::ClientContext* context, const ::seshat::MoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::RemoveEntity(::grpc::ClientContext* context, const ::seshat::RemoveEntityRequest& request, ::seshat::RemoveEntityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RemoveEntityRequest, ::seshat::RemoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveEntity_, context, request, response);
}

void SpatialService::Stub::async::RemoveEntity(::grpc::ClientContext* context, const ::seshat::RemoveEntityRequest* request, ::seshat::RemoveEntityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RemoveEntityRequest, ::seshat::RemoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveEntity_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::RemoveEntity(::grpc::ClientContext* context, const ::seshat::RemoveEntityRequest* request, ::seshat::RemoveEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RemoveEntityResponse>* SpatialService::Stub::PrepareAsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::seshat::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RemoveEntityResponse, ::seshat::RemoveEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RemoveEntityResponse>* SpatialService::Stub::AsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::seshat::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::GetEntityPosition(::grpc::ClientContext* context, const ::seshat::GetEntityPositionRequest& request, ::seshat::GetEntityPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetEntityPositionRequest, ::seshat::GetEntityPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEntityPosition_, context, request, response);
}

void SpatialService::Stub::async::GetEntityPosition(::grpc::ClientContext* context, const ::seshat::GetEntityPositionRequest* request, ::seshat::GetEntityPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetEntityPositionRequest, ::seshat::GetEntityPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntityPosition_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::GetEntityPosition(::grpc::ClientContext* context, const ::seshat::GetEntityPositionRequest* request, ::seshat::GetEntityPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntityPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetEntityPositionResponse>* SpatialService::Stub::PrepareAsyncGetEntityPositionRaw(::grpc::ClientContext* context, const ::seshat::GetEntityPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetEntityPositionResponse, ::seshat::GetEntityPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEntityPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetEntityPositionResponse>* SpatialService::Stub::AsyncGetEntityPositionRaw(::grpc::ClientContext* context, const ::seshat::GetEntityPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEntityPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::GetEntitiesAt(::grpc::ClientContext* context, const ::seshat::GetEntitiesAtRequest& request, ::seshat::GetEntitiesAtResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetEntitiesAtRequest, ::seshat::GetEntitiesAtResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEntitiesAt_, context, request, response);
}

void SpatialService::Stub::async::GetEntitiesAt(::grpc::ClientContext* context, const ::seshat::GetEntitiesAtRequest* request, ::seshat::GetEntitiesAtResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetEntitiesAtRequest, ::seshat::GetEntitiesAtResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntitiesAt_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::GetEntitiesAt(::grpc::ClientContext* context, const ::seshat::GetEntitiesAtRequest* request, ::seshat::GetEntitiesAtResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntitiesAt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetEntitiesAtResponse>* SpatialService::Stub::PrepareAsyncGetEntitiesAtRaw(::grpc::ClientContext* context, const ::seshat::GetEntitiesAtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetEntitiesAtResponse, ::seshat::GetEntitiesAtRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEntitiesAt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetEntitiesAtResponse>* SpatialService::Stub::AsyncGetEntitiesAtRaw(::grpc::ClientContext* context, const ::seshat::GetEntitiesAtRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEntitiesAtRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::GetEntitiesInRange(::grpc::ClientContext* context, const ::seshat::GetEntitiesInRangeRequest& request, ::seshat::GetEntitiesInRangeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetEntitiesInRangeRequest, ::seshat::GetEntitiesInRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEntitiesInRange_, context, request, response);
}

void SpatialService::Stub::async::GetEntitiesInRange(::grpc::ClientContext* context, const ::seshat::GetEntitiesInRangeRequest* request, ::seshat::GetEntitiesInRangeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetEntitiesInRangeRequest, ::seshat::GetEntitiesInRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntitiesInRange_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::GetEntitiesInRange(::grpc::ClientContext* context, const ::seshat::GetEntitiesInRangeRequest* request, ::seshat::GetEntitiesInRangeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntitiesInRange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetEntitiesInRangeResponse>* SpatialService::Stub::PrepareAsyncGetEntitiesInRangeRaw(::grpc::ClientContext* context, const ::seshat::GetEntitiesInRangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetEntitiesInRangeResponse, ::seshat::GetEntitiesInRangeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEntitiesInRange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetEntitiesInRangeResponse>* SpatialService::Stub::AsyncGetEntitiesInRangeRaw(::grpc::ClientContext* context, const ::seshat::GetEntitiesInRangeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEntitiesInRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::GetEntitiesInArea(::grpc::ClientContext* context, const ::seshat::GetEntitiesInAreaRequest& request, ::seshat::GetEntitiesInAreaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetEntitiesInAreaRequest, ::seshat::GetEntitiesInAreaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEntitiesInArea_, context, request, response);
}

void SpatialService::Stub::async::GetEntitiesInArea(::grpc::ClientContext* context, const ::seshat::GetEntitiesInAreaRequest* request, ::seshat::GetEntitiesInAreaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetEntitiesInAreaRequest, ::seshat::GetEntitiesInAreaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntitiesInArea_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::GetEntitiesInArea(::grpc::ClientContext* context, const ::seshat::GetEntitiesInAreaRequest* request, ::seshat::GetEntitiesInAreaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntitiesInArea_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetEntitiesInAreaResponse>* SpatialService::Stub::PrepareAsyncGetEntitiesInAreaRaw(::grpc::ClientContext* context, const ::seshat::GetEntitiesInAreaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetEntitiesInAreaResponse, ::seshat::GetEntitiesInAreaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEntitiesInArea_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetEntitiesInAreaResponse>* SpatialService::Stub::AsyncGetEntitiesInAreaRaw(::grpc::ClientContext* context, const ::seshat::GetEntitiesInAreaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEntitiesInAreaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::GetEntitiesInLine(::grpc::ClientContext* context, const ::seshat::GetEntitiesInLineRequest& request, ::seshat::GetEntitiesInLineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetEntitiesInLineRequest, ::seshat::GetEntitiesInLineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEntitiesInLine_, context, request, response);
}

void SpatialService::Stub::async::GetEntitiesInLine(::grpc::ClientContext* context, const ::seshat::GetEntitiesInLineRequest* request, ::seshat::GetEntitiesInLineResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetEntitiesInLineRequest, ::seshat::GetEntitiesInLineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntitiesInLine_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::GetEntitiesInLine(::grpc::ClientContext* context, const ::seshat::GetEntitiesInLineRequest* request, ::seshat::GetEntitiesInLineResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEntitiesInLine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetEntitiesInLineResponse>* SpatialService::Stub::PrepareAsyncGetEntitiesInLineRaw(::grpc::ClientContext* context, const ::seshat::GetEntitiesInLineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetEntitiesInLineResponse, ::seshat::GetEntitiesInLineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEntitiesInLine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetEntitiesInLineResponse>* SpatialService::Stub::AsyncGetEntitiesInLineRaw(::grpc::ClientContext* context, const ::seshat::GetEntitiesInLineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEntitiesInLineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::FindPath(::grpc::ClientContext* context, const ::seshat::FindPathRequest& request, ::seshat::FindPathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::FindPathRequest, ::seshat::FindPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindPath_, context, request, response);
}

void SpatialService::Stub::async::FindPath(::grpc::ClientContext* context, const ::seshat::FindPathRequest* request, ::seshat::FindPathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::FindPathRequest, ::seshat::FindPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindPath_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::FindPath(::grpc::ClientContext* context, const ::seshat::FindPathRequest* request, ::seshat::FindPathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::FindPathResponse>* SpatialService::Stub::PrepareAsyncFindPathRaw(::grpc::ClientContext* context, const ::seshat::FindPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::FindPathResponse, ::seshat::FindPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::FindPathResponse>* SpatialService::Stub::AsyncFindPathRaw(::grpc::ClientContext* context, const ::seshat::FindPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::GetDistance(::grpc::ClientContext* context, const ::seshat::GetDistanceRequest& request, ::seshat::GetDistanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetDistanceRequest, ::seshat::GetDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDistance_, context, request, response);
}

void SpatialService::Stub::async::GetDistance(::grpc::ClientContext* context, const ::seshat::GetDistanceRequest* request, ::seshat::GetDistanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetDistanceRequest, ::seshat::GetDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDistance_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::GetDistance(::grpc::ClientContext* context, const ::seshat::GetDistanceRequest* request, ::seshat::GetDistanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDistance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetDistanceResponse>* SpatialService::Stub::PrepareAsyncGetDistanceRaw(::grpc::ClientContext* context, const ::seshat::GetDistanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetDistanceResponse, ::seshat::GetDistanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDistance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetDistanceResponse>* SpatialService::Stub::AsyncGetDistanceRaw(::grpc::ClientContext* context, const ::seshat::GetDistanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDistanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::CheckLineOfSight(::grpc::ClientContext* context, const ::seshat::LineOfSightRequest& request, ::seshat::LineOfSightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::LineOfSightRequest, ::seshat::LineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckLineOfSight_, context, request, response);
}

void SpatialService::Stub::async::CheckLineOfSight(::grpc::ClientContext* context, const ::seshat::LineOfSightRequest* request, ::seshat::LineOfSightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::LineOfSightRequest, ::seshat::LineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckLineOfSight_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::CheckLineOfSight(::grpc::ClientContext* context, const ::seshat::LineOfSightRequest* request, ::seshat::LineOfSightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckLineOfSight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::LineOfSightResponse>* SpatialService::Stub::PrepareAsyncCheckLineOfSightRaw(::grpc::ClientContext* context, const ::seshat::LineOfSightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::LineOfSightResponse, ::seshat::LineOfSightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckLineOfSight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::LineOfSightResponse>* SpatialService::Stub::AsyncCheckLineOfSightRaw(::grpc::ClientContext* context, const ::seshat::LineOfSightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckLineOfSightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::CreateConnection(::grpc::ClientContext* context, const ::seshat::CreateConnectionRequest& request, ::seshat::CreateConnectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CreateConnectionRequest, ::seshat::CreateConnectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateConnection_, context, request, response);
}

void SpatialService::Stub::async::CreateConnection(::grpc::ClientContext* context, const ::seshat::CreateConnectionRequest* request, ::seshat::CreateConnectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CreateConnectionRequest, ::seshat::CreateConnectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConnection_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::CreateConnection(::grpc::ClientContext* context, const ::seshat::CreateConnectionRequest* request, ::seshat::CreateConnectionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateConnectionResponse>* SpatialService::Stub::PrepareAsyncCreateConnectionRaw(::grpc::ClientContext* context, const ::seshat::CreateConnectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CreateConnectionResponse, ::seshat::CreateConnectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateConnectionResponse>* SpatialService::Stub::AsyncCreateConnectionRaw(::grpc::ClientContext* context, const ::seshat::CreateConnectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::GetConnections(::grpc::ClientContext* context, const ::seshat::GetConnectionsRequest& request, ::seshat::GetConnectionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetConnectionsRequest, ::seshat::GetConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConnections_, context, request, response);
}

void SpatialService::Stub::async::GetConnections(::grpc::ClientContext* context, const ::seshat::GetConnectionsRequest* request, ::seshat::GetConnectionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetConnectionsRequest, ::seshat::GetConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConnections_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::GetConnections(::grpc::ClientContext* context, const ::seshat::GetConnectionsRequest* request, ::seshat::GetConnectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConnections_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConnectionsResponse>* SpatialService::Stub::PrepareAsyncGetConnectionsRaw(::grpc::ClientContext* context, const ::seshat::GetConnectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetConnectionsResponse, ::seshat::GetConnectionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConnections_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetConnectionsResponse>* SpatialService::Stub::AsyncGetConnectionsRaw(::grpc::ClientContext* context, const ::seshat::GetConnectionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConnectionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::MoveEntityBetweenRooms(::grpc::ClientContext* context, const ::seshat::MoveEntityBetweenRoomsRequest& request, ::seshat::MoveEntityBetweenRoomsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::MoveEntityBetweenRoomsRequest, ::seshat::MoveEntityBetweenRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveEntityBetweenRooms_, context, request, response);
}

void SpatialService::Stub::async::MoveEntityBetweenRooms(::grpc::ClientContext* context, const ::seshat::MoveEntityBetweenRoomsRequest* request, ::seshat::MoveEntityBetweenRoomsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::MoveEntityBetweenRoomsRequest, ::seshat::MoveEntityBetweenRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveEntityBetweenRooms_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::MoveEntityBetweenRooms(::grpc::ClientContext* context, const ::seshat::MoveEntityBetweenRoomsRequest* request, ::seshat::MoveEntityBetweenRoomsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveEntityBetweenRooms_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::MoveEntityBetweenRoomsResponse>* SpatialService::Stub::PrepareAsyncMoveEntityBetweenRoomsRaw(::grpc::ClientContext* context, const ::seshat::MoveEntityBetweenRoomsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::MoveEntityBetweenRoomsResponse, ::seshat::MoveEntityBetweenRoomsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveEntityBetweenRooms_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::MoveEntityBetweenRoomsResponse>* SpatialService::Stub::AsyncMoveEntityBetweenRoomsRaw(::grpc::ClientContext* context, const ::seshat::MoveEntityBetweenRoomsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveEntityBetweenRoomsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::GetValidPositions(::grpc::ClientContext* context, const ::seshat::GetValidPositionsRequest& request, ::seshat::GetValidPositionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetValidPositionsRequest, ::seshat::GetValidPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetValidPositions_, context, request, response);
}

void SpatialService::Stub::async::GetValidPositions(::grpc::ClientContext* context, const ::seshat::GetValidPositionsRequest* request, ::seshat::GetValidPositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetValidPositionsRequest, ::seshat::GetValidPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValidPositions_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::GetValidPositions(::grpc::ClientContext* context, const ::seshat::GetValidPositionsRequest* request, ::seshat::GetValidPositionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValidPositions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetValidPositionsResponse>* SpatialService::Stub::PrepareAsyncGetValidPositionsRaw(::grpc::ClientContext* context, const ::seshat::GetValidPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetValidPositionsResponse, ::seshat::GetValidPositionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetValidPositions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetValidPositionsResponse>* SpatialService::Stub::AsyncGetValidPositionsRaw(::grpc::ClientContext* context, const ::seshat::GetValidPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetValidPositionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SpatialService::Stub::IsValidPosition(::grpc::ClientContext* context, const ::seshat::IsValidPositionRequest& request, ::seshat::IsValidPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::IsValidPositionRequest, ::seshat::IsValidPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsValidPosition_, context, request, response);
}

void SpatialService::Stub::async::IsValidPosition(::grpc::ClientContext* context, const ::seshat::IsValidPositionRequest* request, ::seshat::IsValidPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::IsValidPositionRequest, ::seshat::IsValidPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsValidPosition_, context, request, response, std::move(f));
}

void SpatialService::Stub::async::IsValidPosition(::grpc::ClientContext* context, const ::seshat::IsValidPositionRequest* request, ::seshat::IsValidPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsValidPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::IsValidPositionResponse>* SpatialService::Stub::PrepareAsyncIsValidPositionRaw(::grpc::ClientContext* context, const ::seshat::IsValidPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::IsValidPositionResponse, ::seshat::IsValidPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsValidPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::IsValidPositionResponse>* SpatialService::Stub::AsyncIsValidPositionRaw(::grpc::ClientContext* context, const ::seshat::IsValidPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsValidPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

SpatialService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::CreateRoomRequest, ::seshat::CreateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CreateRoomRequest* req,
             ::seshat::CreateRoomResponse* resp) {
               return service->CreateRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::GetRoomRequest, ::seshat::GetRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetRoomRequest* req,
             ::seshat::GetRoomResponse* resp) {
               return service->GetRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::ListRoomsRequest, ::seshat::ListRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ListRoomsRequest* req,
             ::seshat::ListRoomsResponse* resp) {
               return service->ListRooms(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::DeleteRoomRequest, ::seshat::DeleteRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::DeleteRoomRequest* req,
             ::seshat::DeleteRoomResponse* resp) {
               return service->DeleteRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::PlaceEntityRequest, ::seshat::PlaceEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::PlaceEntityRequest* req,
             ::seshat::PlaceEntityResponse* resp) {
               return service->PlaceEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::MoveEntityRequest, ::seshat::MoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::MoveEntityRequest* req,
             ::seshat::MoveEntityResponse* resp) {
               return service->MoveEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::RemoveEntityRequest, ::seshat::RemoveEntityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RemoveEntityRequest* req,
             ::seshat::RemoveEntityResponse* resp) {
               return service->RemoveEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::GetEntityPositionRequest, ::seshat::GetEntityPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetEntityPositionRequest* req,
             ::seshat::GetEntityPositionResponse* resp) {
               return service->GetEntityPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::GetEntitiesAtRequest, ::seshat::GetEntitiesAtResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetEntitiesAtRequest* req,
             ::seshat::GetEntitiesAtResponse* resp) {
               return service->GetEntitiesAt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::GetEntitiesInRangeRequest, ::seshat::GetEntitiesInRangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetEntitiesInRangeRequest* req,
             ::seshat::GetEntitiesInRangeResponse* resp) {
               return service->GetEntitiesInRange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::GetEntitiesInAreaRequest, ::seshat::GetEntitiesInAreaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetEntitiesInAreaRequest* req,
             ::seshat::GetEntitiesInAreaResponse* resp) {
               return service->GetEntitiesInArea(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::GetEntitiesInLineRequest, ::seshat::GetEntitiesInLineResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetEntitiesInLineRequest* req,
             ::seshat::GetEntitiesInLineResponse* resp) {
               return service->GetEntitiesInLine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::FindPathRequest, ::seshat::FindPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::FindPathRequest* req,
             ::seshat::FindPathResponse* resp) {
               return service->FindPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::GetDistanceRequest, ::seshat::GetDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetDistanceRequest* req,
             ::seshat::GetDistanceResponse* resp) {
               return service->GetDistance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::LineOfSightRequest, ::seshat::LineOfSightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::LineOfSightRequest* req,
             ::seshat::LineOfSightResponse* resp) {
               return service->CheckLineOfSight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::CreateConnectionRequest, ::seshat::CreateConnectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CreateConnectionRequest* req,
             ::seshat::CreateConnectionResponse* resp) {
               return service->CreateConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::GetConnectionsRequest, ::seshat::GetConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetConnectionsRequest* req,
             ::seshat::GetConnectionsResponse* resp) {
               return service->GetConnections(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::MoveEntityBetweenRoomsRequest, ::seshat::MoveEntityBetweenRoomsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::MoveEntityBetweenRoomsRequest* req,
             ::seshat::MoveEntityBetweenRoomsResponse* resp) {
               return service->MoveEntityBetweenRooms(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::GetValidPositionsRequest, ::seshat::GetValidPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetValidPositionsRequest* req,
             ::seshat::GetValidPositionsResponse* resp) {
               return service->GetValidPositions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpatialService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpatialService::Service, ::seshat::IsValidPositionRequest, ::seshat::IsValidPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SpatialService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::IsValidPositionRequest* req,
             ::seshat::IsValidPositionResponse* resp) {
               return service->IsValidPosition(ctx, req, resp);
             }, this)));
}

SpatialService::Service::~Service() {
}

::grpc::Status SpatialService::Service::CreateRoom(::grpc::ServerContext* context, const ::seshat::CreateRoomRequest* request, ::seshat::CreateRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::GetRoom(::grpc::ServerContext* context, const ::seshat::GetRoomRequest* request, ::seshat::GetRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::ListRooms(::grpc::ServerContext* context, const ::seshat::ListRoomsRequest* request, ::seshat::ListRoomsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::DeleteRoom(::grpc::ServerContext* context, const ::seshat::DeleteRoomRequest* request, ::seshat::DeleteRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::PlaceEntity(::grpc::ServerContext* context, const ::seshat::PlaceEntityRequest* request, ::seshat::PlaceEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::MoveEntity(::grpc::ServerContext* context, const ::seshat::MoveEntityRequest* request, ::seshat::MoveEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::RemoveEntity(::grpc::ServerContext* context, const ::seshat::RemoveEntityRequest* request, ::seshat::RemoveEntityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::GetEntityPosition(::grpc::ServerContext* context, const ::seshat::GetEntityPositionRequest* request, ::seshat::GetEntityPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::GetEntitiesAt(::grpc::ServerContext* context, const ::seshat::GetEntitiesAtRequest* request, ::seshat::GetEntitiesAtResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::GetEntitiesInRange(::grpc::ServerContext* context, const ::seshat::GetEntitiesInRangeRequest* request, ::seshat::GetEntitiesInRangeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::GetEntitiesInArea(::grpc::ServerContext* context, const ::seshat::GetEntitiesInAreaRequest* request, ::seshat::GetEntitiesInAreaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::GetEntitiesInLine(::grpc::ServerContext* context, const ::seshat::GetEntitiesInLineRequest* request, ::seshat::GetEntitiesInLineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::FindPath(::grpc::ServerContext* context, const ::seshat::FindPathRequest* request, ::seshat::FindPathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::GetDistance(::grpc::ServerContext* context, const ::seshat::GetDistanceRequest* request, ::seshat::GetDistanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::CheckLineOfSight(::grpc::ServerContext* context, const ::seshat::LineOfSightRequest* request, ::seshat::LineOfSightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::CreateConnection(::grpc::ServerContext* context, const ::seshat::CreateConnectionRequest* request, ::seshat::CreateConnectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::GetConnections(::grpc::ServerContext* context, const ::seshat::GetConnectionsRequest* request, ::seshat::GetConnectionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::MoveEntityBetweenRooms(::grpc::ServerContext* context, const ::seshat::MoveEntityBetweenRoomsRequest* request, ::seshat::MoveEntityBetweenRoomsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::GetValidPositions(::grpc::ServerContext* context, const ::seshat::GetValidPositionsRequest* request, ::seshat::GetValidPositionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpatialService::Service::IsValidPosition(::grpc::ServerContext* context, const ::seshat::IsValidPositionRequest* request, ::seshat::IsValidPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace seshat
#include <grpcpp/ports_undef.inc>


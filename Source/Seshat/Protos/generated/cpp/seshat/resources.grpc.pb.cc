// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/resources.proto

#include "seshat/resources.pb.h"
#include "seshat/resources.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace seshat {

static const char* ResourceService_method_names[] = {
  "/seshat.ResourceService/CreateResourcePool",
  "/seshat.ResourceService/GetResourcePool",
  "/seshat.ResourceService/UpdateResourcePool",
  "/seshat.ResourceService/DeleteResourcePool",
  "/seshat.ResourceService/ConsumeResource",
  "/seshat.ResourceService/RestoreResource",
  "/seshat.ResourceService/GetResourceStatus",
  "/seshat.ResourceService/ConsumeMultipleResources",
  "/seshat.ResourceService/RestoreAllResources",
  "/seshat.ResourceService/TriggerRestoration",
  "/seshat.ResourceService/GetRestorationTriggers",
  "/seshat.ResourceService/GetResourceHistory",
  "/seshat.ResourceService/GetLowResourceAlerts",
  "/seshat.ResourceService/GetResourceTemplates",
  "/seshat.ResourceService/CreateResourceTemplate",
};

std::unique_ptr< ResourceService::Stub> ResourceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ResourceService::Stub> stub(new ResourceService::Stub(channel, options));
  return stub;
}

ResourceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateResourcePool_(ResourceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetResourcePool_(ResourceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateResourcePool_(ResourceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteResourcePool_(ResourceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConsumeResource_(ResourceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestoreResource_(ResourceService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetResourceStatus_(ResourceService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConsumeMultipleResources_(ResourceService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestoreAllResources_(ResourceService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerRestoration_(ResourceService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRestorationTriggers_(ResourceService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetResourceHistory_(ResourceService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLowResourceAlerts_(ResourceService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetResourceTemplates_(ResourceService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateResourceTemplate_(ResourceService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ResourceService::Stub::CreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::seshat::CreateResourcePoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CreateResourcePoolRequest, ::seshat::CreateResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateResourcePool_, context, request, response);
}

void ResourceService::Stub::async::CreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest* request, ::seshat::CreateResourcePoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CreateResourcePoolRequest, ::seshat::CreateResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateResourcePool_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::CreateResourcePool(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest* request, ::seshat::CreateResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateResourcePool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateResourcePoolResponse>* ResourceService::Stub::PrepareAsyncCreateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CreateResourcePoolResponse, ::seshat::CreateResourcePoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateResourcePool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateResourcePoolResponse>* ResourceService::Stub::AsyncCreateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::CreateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateResourcePoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::GetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::seshat::GetResourcePoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetResourcePoolRequest, ::seshat::GetResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetResourcePool_, context, request, response);
}

void ResourceService::Stub::async::GetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest* request, ::seshat::GetResourcePoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetResourcePoolRequest, ::seshat::GetResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourcePool_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::GetResourcePool(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest* request, ::seshat::GetResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourcePool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetResourcePoolResponse>* ResourceService::Stub::PrepareAsyncGetResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetResourcePoolResponse, ::seshat::GetResourcePoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetResourcePool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetResourcePoolResponse>* ResourceService::Stub::AsyncGetResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::GetResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetResourcePoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::UpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::seshat::UpdateResourcePoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::UpdateResourcePoolRequest, ::seshat::UpdateResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateResourcePool_, context, request, response);
}

void ResourceService::Stub::async::UpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest* request, ::seshat::UpdateResourcePoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::UpdateResourcePoolRequest, ::seshat::UpdateResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateResourcePool_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::UpdateResourcePool(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest* request, ::seshat::UpdateResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateResourcePool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::UpdateResourcePoolResponse>* ResourceService::Stub::PrepareAsyncUpdateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::UpdateResourcePoolResponse, ::seshat::UpdateResourcePoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateResourcePool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::UpdateResourcePoolResponse>* ResourceService::Stub::AsyncUpdateResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::UpdateResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateResourcePoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::DeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::seshat::DeleteResourcePoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::DeleteResourcePoolRequest, ::seshat::DeleteResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteResourcePool_, context, request, response);
}

void ResourceService::Stub::async::DeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest* request, ::seshat::DeleteResourcePoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::DeleteResourcePoolRequest, ::seshat::DeleteResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteResourcePool_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::DeleteResourcePool(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest* request, ::seshat::DeleteResourcePoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteResourcePool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::DeleteResourcePoolResponse>* ResourceService::Stub::PrepareAsyncDeleteResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::DeleteResourcePoolResponse, ::seshat::DeleteResourcePoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteResourcePool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::DeleteResourcePoolResponse>* ResourceService::Stub::AsyncDeleteResourcePoolRaw(::grpc::ClientContext* context, const ::seshat::DeleteResourcePoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteResourcePoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::ConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::seshat::ConsumeResourceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ConsumeResourceRequest, ::seshat::ConsumeResourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConsumeResource_, context, request, response);
}

void ResourceService::Stub::async::ConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest* request, ::seshat::ConsumeResourceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ConsumeResourceRequest, ::seshat::ConsumeResourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsumeResource_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::ConsumeResource(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest* request, ::seshat::ConsumeResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsumeResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ConsumeResourceResponse>* ResourceService::Stub::PrepareAsyncConsumeResourceRaw(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ConsumeResourceResponse, ::seshat::ConsumeResourceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConsumeResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ConsumeResourceResponse>* ResourceService::Stub::AsyncConsumeResourceRaw(::grpc::ClientContext* context, const ::seshat::ConsumeResourceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConsumeResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::RestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::seshat::RestoreResourceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RestoreResourceRequest, ::seshat::RestoreResourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RestoreResource_, context, request, response);
}

void ResourceService::Stub::async::RestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest* request, ::seshat::RestoreResourceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RestoreResourceRequest, ::seshat::RestoreResourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RestoreResource_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::RestoreResource(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest* request, ::seshat::RestoreResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RestoreResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RestoreResourceResponse>* ResourceService::Stub::PrepareAsyncRestoreResourceRaw(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RestoreResourceResponse, ::seshat::RestoreResourceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RestoreResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RestoreResourceResponse>* ResourceService::Stub::AsyncRestoreResourceRaw(::grpc::ClientContext* context, const ::seshat::RestoreResourceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRestoreResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::GetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::seshat::GetResourceStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetResourceStatusRequest, ::seshat::GetResourceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetResourceStatus_, context, request, response);
}

void ResourceService::Stub::async::GetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest* request, ::seshat::GetResourceStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetResourceStatusRequest, ::seshat::GetResourceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourceStatus_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::GetResourceStatus(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest* request, ::seshat::GetResourceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetResourceStatusResponse>* ResourceService::Stub::PrepareAsyncGetResourceStatusRaw(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetResourceStatusResponse, ::seshat::GetResourceStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetResourceStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetResourceStatusResponse>* ResourceService::Stub::AsyncGetResourceStatusRaw(::grpc::ClientContext* context, const ::seshat::GetResourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetResourceStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::ConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::seshat::ConsumeMultipleResourcesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ConsumeMultipleResourcesRequest, ::seshat::ConsumeMultipleResourcesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConsumeMultipleResources_, context, request, response);
}

void ResourceService::Stub::async::ConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest* request, ::seshat::ConsumeMultipleResourcesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ConsumeMultipleResourcesRequest, ::seshat::ConsumeMultipleResourcesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsumeMultipleResources_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::ConsumeMultipleResources(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest* request, ::seshat::ConsumeMultipleResourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsumeMultipleResources_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ConsumeMultipleResourcesResponse>* ResourceService::Stub::PrepareAsyncConsumeMultipleResourcesRaw(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ConsumeMultipleResourcesResponse, ::seshat::ConsumeMultipleResourcesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConsumeMultipleResources_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ConsumeMultipleResourcesResponse>* ResourceService::Stub::AsyncConsumeMultipleResourcesRaw(::grpc::ClientContext* context, const ::seshat::ConsumeMultipleResourcesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConsumeMultipleResourcesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::RestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::seshat::RestoreAllResourcesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::RestoreAllResourcesRequest, ::seshat::RestoreAllResourcesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RestoreAllResources_, context, request, response);
}

void ResourceService::Stub::async::RestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest* request, ::seshat::RestoreAllResourcesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::RestoreAllResourcesRequest, ::seshat::RestoreAllResourcesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RestoreAllResources_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::RestoreAllResources(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest* request, ::seshat::RestoreAllResourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RestoreAllResources_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::RestoreAllResourcesResponse>* ResourceService::Stub::PrepareAsyncRestoreAllResourcesRaw(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::RestoreAllResourcesResponse, ::seshat::RestoreAllResourcesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RestoreAllResources_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::RestoreAllResourcesResponse>* ResourceService::Stub::AsyncRestoreAllResourcesRaw(::grpc::ClientContext* context, const ::seshat::RestoreAllResourcesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRestoreAllResourcesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::TriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::seshat::TriggerRestorationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::TriggerRestorationRequest, ::seshat::TriggerRestorationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerRestoration_, context, request, response);
}

void ResourceService::Stub::async::TriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest* request, ::seshat::TriggerRestorationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::TriggerRestorationRequest, ::seshat::TriggerRestorationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerRestoration_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::TriggerRestoration(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest* request, ::seshat::TriggerRestorationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerRestoration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::TriggerRestorationResponse>* ResourceService::Stub::PrepareAsyncTriggerRestorationRaw(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::TriggerRestorationResponse, ::seshat::TriggerRestorationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerRestoration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::TriggerRestorationResponse>* ResourceService::Stub::AsyncTriggerRestorationRaw(::grpc::ClientContext* context, const ::seshat::TriggerRestorationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerRestorationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::GetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::seshat::GetRestorationTriggersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetRestorationTriggersRequest, ::seshat::GetRestorationTriggersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRestorationTriggers_, context, request, response);
}

void ResourceService::Stub::async::GetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest* request, ::seshat::GetRestorationTriggersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetRestorationTriggersRequest, ::seshat::GetRestorationTriggersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRestorationTriggers_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::GetRestorationTriggers(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest* request, ::seshat::GetRestorationTriggersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRestorationTriggers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetRestorationTriggersResponse>* ResourceService::Stub::PrepareAsyncGetRestorationTriggersRaw(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetRestorationTriggersResponse, ::seshat::GetRestorationTriggersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRestorationTriggers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetRestorationTriggersResponse>* ResourceService::Stub::AsyncGetRestorationTriggersRaw(::grpc::ClientContext* context, const ::seshat::GetRestorationTriggersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRestorationTriggersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::GetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::seshat::GetResourceHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetResourceHistoryRequest, ::seshat::GetResourceHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetResourceHistory_, context, request, response);
}

void ResourceService::Stub::async::GetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest* request, ::seshat::GetResourceHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetResourceHistoryRequest, ::seshat::GetResourceHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourceHistory_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::GetResourceHistory(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest* request, ::seshat::GetResourceHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourceHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetResourceHistoryResponse>* ResourceService::Stub::PrepareAsyncGetResourceHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetResourceHistoryResponse, ::seshat::GetResourceHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetResourceHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetResourceHistoryResponse>* ResourceService::Stub::AsyncGetResourceHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetResourceHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetResourceHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::GetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::seshat::GetLowResourceAlertsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetLowResourceAlertsRequest, ::seshat::GetLowResourceAlertsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLowResourceAlerts_, context, request, response);
}

void ResourceService::Stub::async::GetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest* request, ::seshat::GetLowResourceAlertsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetLowResourceAlertsRequest, ::seshat::GetLowResourceAlertsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLowResourceAlerts_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::GetLowResourceAlerts(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest* request, ::seshat::GetLowResourceAlertsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLowResourceAlerts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetLowResourceAlertsResponse>* ResourceService::Stub::PrepareAsyncGetLowResourceAlertsRaw(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetLowResourceAlertsResponse, ::seshat::GetLowResourceAlertsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLowResourceAlerts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetLowResourceAlertsResponse>* ResourceService::Stub::AsyncGetLowResourceAlertsRaw(::grpc::ClientContext* context, const ::seshat::GetLowResourceAlertsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLowResourceAlertsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::GetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::seshat::GetResourceTemplatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetResourceTemplatesRequest, ::seshat::GetResourceTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetResourceTemplates_, context, request, response);
}

void ResourceService::Stub::async::GetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest* request, ::seshat::GetResourceTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetResourceTemplatesRequest, ::seshat::GetResourceTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourceTemplates_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::GetResourceTemplates(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest* request, ::seshat::GetResourceTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourceTemplates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetResourceTemplatesResponse>* ResourceService::Stub::PrepareAsyncGetResourceTemplatesRaw(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetResourceTemplatesResponse, ::seshat::GetResourceTemplatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetResourceTemplates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetResourceTemplatesResponse>* ResourceService::Stub::AsyncGetResourceTemplatesRaw(::grpc::ClientContext* context, const ::seshat::GetResourceTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetResourceTemplatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::CreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::seshat::CreateResourceTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CreateResourceTemplateRequest, ::seshat::CreateResourceTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateResourceTemplate_, context, request, response);
}

void ResourceService::Stub::async::CreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest* request, ::seshat::CreateResourceTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CreateResourceTemplateRequest, ::seshat::CreateResourceTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateResourceTemplate_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::CreateResourceTemplate(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest* request, ::seshat::CreateResourceTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateResourceTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateResourceTemplateResponse>* ResourceService::Stub::PrepareAsyncCreateResourceTemplateRaw(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CreateResourceTemplateResponse, ::seshat::CreateResourceTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateResourceTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateResourceTemplateResponse>* ResourceService::Stub::AsyncCreateResourceTemplateRaw(::grpc::ClientContext* context, const ::seshat::CreateResourceTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateResourceTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

ResourceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::CreateResourcePoolRequest, ::seshat::CreateResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CreateResourcePoolRequest* req,
             ::seshat::CreateResourcePoolResponse* resp) {
               return service->CreateResourcePool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::GetResourcePoolRequest, ::seshat::GetResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetResourcePoolRequest* req,
             ::seshat::GetResourcePoolResponse* resp) {
               return service->GetResourcePool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::UpdateResourcePoolRequest, ::seshat::UpdateResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::UpdateResourcePoolRequest* req,
             ::seshat::UpdateResourcePoolResponse* resp) {
               return service->UpdateResourcePool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::DeleteResourcePoolRequest, ::seshat::DeleteResourcePoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::DeleteResourcePoolRequest* req,
             ::seshat::DeleteResourcePoolResponse* resp) {
               return service->DeleteResourcePool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::ConsumeResourceRequest, ::seshat::ConsumeResourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ConsumeResourceRequest* req,
             ::seshat::ConsumeResourceResponse* resp) {
               return service->ConsumeResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::RestoreResourceRequest, ::seshat::RestoreResourceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RestoreResourceRequest* req,
             ::seshat::RestoreResourceResponse* resp) {
               return service->RestoreResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::GetResourceStatusRequest, ::seshat::GetResourceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetResourceStatusRequest* req,
             ::seshat::GetResourceStatusResponse* resp) {
               return service->GetResourceStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::ConsumeMultipleResourcesRequest, ::seshat::ConsumeMultipleResourcesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ConsumeMultipleResourcesRequest* req,
             ::seshat::ConsumeMultipleResourcesResponse* resp) {
               return service->ConsumeMultipleResources(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::RestoreAllResourcesRequest, ::seshat::RestoreAllResourcesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::RestoreAllResourcesRequest* req,
             ::seshat::RestoreAllResourcesResponse* resp) {
               return service->RestoreAllResources(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::TriggerRestorationRequest, ::seshat::TriggerRestorationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::TriggerRestorationRequest* req,
             ::seshat::TriggerRestorationResponse* resp) {
               return service->TriggerRestoration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::GetRestorationTriggersRequest, ::seshat::GetRestorationTriggersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetRestorationTriggersRequest* req,
             ::seshat::GetRestorationTriggersResponse* resp) {
               return service->GetRestorationTriggers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::GetResourceHistoryRequest, ::seshat::GetResourceHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetResourceHistoryRequest* req,
             ::seshat::GetResourceHistoryResponse* resp) {
               return service->GetResourceHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::GetLowResourceAlertsRequest, ::seshat::GetLowResourceAlertsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetLowResourceAlertsRequest* req,
             ::seshat::GetLowResourceAlertsResponse* resp) {
               return service->GetLowResourceAlerts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::GetResourceTemplatesRequest, ::seshat::GetResourceTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetResourceTemplatesRequest* req,
             ::seshat::GetResourceTemplatesResponse* resp) {
               return service->GetResourceTemplates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::seshat::CreateResourceTemplateRequest, ::seshat::CreateResourceTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CreateResourceTemplateRequest* req,
             ::seshat::CreateResourceTemplateResponse* resp) {
               return service->CreateResourceTemplate(ctx, req, resp);
             }, this)));
}

ResourceService::Service::~Service() {
}

::grpc::Status ResourceService::Service::CreateResourcePool(::grpc::ServerContext* context, const ::seshat::CreateResourcePoolRequest* request, ::seshat::CreateResourcePoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetResourcePool(::grpc::ServerContext* context, const ::seshat::GetResourcePoolRequest* request, ::seshat::GetResourcePoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::UpdateResourcePool(::grpc::ServerContext* context, const ::seshat::UpdateResourcePoolRequest* request, ::seshat::UpdateResourcePoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::DeleteResourcePool(::grpc::ServerContext* context, const ::seshat::DeleteResourcePoolRequest* request, ::seshat::DeleteResourcePoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::ConsumeResource(::grpc::ServerContext* context, const ::seshat::ConsumeResourceRequest* request, ::seshat::ConsumeResourceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RestoreResource(::grpc::ServerContext* context, const ::seshat::RestoreResourceRequest* request, ::seshat::RestoreResourceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetResourceStatus(::grpc::ServerContext* context, const ::seshat::GetResourceStatusRequest* request, ::seshat::GetResourceStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::ConsumeMultipleResources(::grpc::ServerContext* context, const ::seshat::ConsumeMultipleResourcesRequest* request, ::seshat::ConsumeMultipleResourcesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RestoreAllResources(::grpc::ServerContext* context, const ::seshat::RestoreAllResourcesRequest* request, ::seshat::RestoreAllResourcesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::TriggerRestoration(::grpc::ServerContext* context, const ::seshat::TriggerRestorationRequest* request, ::seshat::TriggerRestorationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetRestorationTriggers(::grpc::ServerContext* context, const ::seshat::GetRestorationTriggersRequest* request, ::seshat::GetRestorationTriggersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetResourceHistory(::grpc::ServerContext* context, const ::seshat::GetResourceHistoryRequest* request, ::seshat::GetResourceHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetLowResourceAlerts(::grpc::ServerContext* context, const ::seshat::GetLowResourceAlertsRequest* request, ::seshat::GetLowResourceAlertsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetResourceTemplates(::grpc::ServerContext* context, const ::seshat::GetResourceTemplatesRequest* request, ::seshat::GetResourceTemplatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::CreateResourceTemplate(::grpc::ServerContext* context, const ::seshat::CreateResourceTemplateRequest* request, ::seshat::CreateResourceTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace seshat
#include <grpcpp/ports_undef.inc>


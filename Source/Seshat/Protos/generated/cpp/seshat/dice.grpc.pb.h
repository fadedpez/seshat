// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/dice.proto
#ifndef GRPC_seshat_2fdice_2eproto__INCLUDED
#define GRPC_seshat_2fdice_2eproto__INCLUDED

#include "seshat/dice.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace seshat {

// Dice rolling service - exposes all dice toolkit functionality
class DiceService final {
 public:
  static constexpr char const* service_full_name() {
    return "seshat.DiceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Basic single die roll
    virtual ::grpc::Status Roll(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::seshat::RollResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollResponse>> AsyncRoll(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollResponse>>(AsyncRollRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollResponse>> PrepareAsyncRoll(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollResponse>>(PrepareAsyncRollRaw(context, request, cq));
    }
    // Roll multiple dice of same type
    virtual ::grpc::Status RollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::seshat::RollMultipleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollMultipleResponse>> AsyncRollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollMultipleResponse>>(AsyncRollMultipleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollMultipleResponse>> PrepareAsyncRollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollMultipleResponse>>(PrepareAsyncRollMultipleRaw(context, request, cq));
    }
    // Roll with formula (e.g., "2d6+3", "1d20+5")
    virtual ::grpc::Status RollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::seshat::RollFormulaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollFormulaResponse>> AsyncRollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollFormulaResponse>>(AsyncRollFormulaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollFormulaResponse>> PrepareAsyncRollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollFormulaResponse>>(PrepareAsyncRollFormulaRaw(context, request, cq));
    }
    // Stream multiple rolls (for rapid rolling)
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::seshat::RollRequest, ::seshat::RollResponse>> StreamRolls(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::seshat::RollRequest, ::seshat::RollResponse>>(StreamRollsRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::seshat::RollRequest, ::seshat::RollResponse>> AsyncStreamRolls(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::seshat::RollRequest, ::seshat::RollResponse>>(AsyncStreamRollsRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::seshat::RollRequest, ::seshat::RollResponse>> PrepareAsyncStreamRolls(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::seshat::RollRequest, ::seshat::RollResponse>>(PrepareAsyncStreamRollsRaw(context, cq));
    }
    // Get roll statistics/history
    virtual ::grpc::Status GetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::seshat::RollHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollHistoryResponse>> AsyncGetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollHistoryResponse>>(AsyncGetRollHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollHistoryResponse>> PrepareAsyncGetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollHistoryResponse>>(PrepareAsyncGetRollHistoryRaw(context, request, cq));
    }
    // Test dice roller fairness
    virtual ::grpc::Status TestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::seshat::FairnessTestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::FairnessTestResponse>> AsyncTestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::FairnessTestResponse>>(AsyncTestFairnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::FairnessTestResponse>> PrepareAsyncTestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::FairnessTestResponse>>(PrepareAsyncTestFairnessRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Basic single die roll
      virtual void Roll(::grpc::ClientContext* context, const ::seshat::RollRequest* request, ::seshat::RollResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Roll(::grpc::ClientContext* context, const ::seshat::RollRequest* request, ::seshat::RollResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Roll multiple dice of same type
      virtual void RollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest* request, ::seshat::RollMultipleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest* request, ::seshat::RollMultipleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Roll with formula (e.g., "2d6+3", "1d20+5")
      virtual void RollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest* request, ::seshat::RollFormulaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest* request, ::seshat::RollFormulaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream multiple rolls (for rapid rolling)
      virtual void StreamRolls(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::seshat::RollRequest,::seshat::RollResponse>* reactor) = 0;
      // Get roll statistics/history
      virtual void GetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest* request, ::seshat::RollHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest* request, ::seshat::RollHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Test dice roller fairness
      virtual void TestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest* request, ::seshat::FairnessTestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest* request, ::seshat::FairnessTestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollResponse>* AsyncRollRaw(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollResponse>* PrepareAsyncRollRaw(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollMultipleResponse>* AsyncRollMultipleRaw(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollMultipleResponse>* PrepareAsyncRollMultipleRaw(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollFormulaResponse>* AsyncRollFormulaRaw(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollFormulaResponse>* PrepareAsyncRollFormulaRaw(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::seshat::RollRequest, ::seshat::RollResponse>* StreamRollsRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::seshat::RollRequest, ::seshat::RollResponse>* AsyncStreamRollsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::seshat::RollRequest, ::seshat::RollResponse>* PrepareAsyncStreamRollsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollHistoryResponse>* AsyncGetRollHistoryRaw(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::RollHistoryResponse>* PrepareAsyncGetRollHistoryRaw(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::FairnessTestResponse>* AsyncTestFairnessRaw(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::FairnessTestResponse>* PrepareAsyncTestFairnessRaw(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Roll(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::seshat::RollResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollResponse>> AsyncRoll(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollResponse>>(AsyncRollRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollResponse>> PrepareAsyncRoll(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollResponse>>(PrepareAsyncRollRaw(context, request, cq));
    }
    ::grpc::Status RollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::seshat::RollMultipleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollMultipleResponse>> AsyncRollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollMultipleResponse>>(AsyncRollMultipleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollMultipleResponse>> PrepareAsyncRollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollMultipleResponse>>(PrepareAsyncRollMultipleRaw(context, request, cq));
    }
    ::grpc::Status RollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::seshat::RollFormulaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollFormulaResponse>> AsyncRollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollFormulaResponse>>(AsyncRollFormulaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollFormulaResponse>> PrepareAsyncRollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollFormulaResponse>>(PrepareAsyncRollFormulaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>> StreamRolls(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>>(StreamRollsRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>> AsyncStreamRolls(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>>(AsyncStreamRollsRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>> PrepareAsyncStreamRolls(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>>(PrepareAsyncStreamRollsRaw(context, cq));
    }
    ::grpc::Status GetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::seshat::RollHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollHistoryResponse>> AsyncGetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollHistoryResponse>>(AsyncGetRollHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollHistoryResponse>> PrepareAsyncGetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::RollHistoryResponse>>(PrepareAsyncGetRollHistoryRaw(context, request, cq));
    }
    ::grpc::Status TestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::seshat::FairnessTestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::FairnessTestResponse>> AsyncTestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::FairnessTestResponse>>(AsyncTestFairnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::FairnessTestResponse>> PrepareAsyncTestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::FairnessTestResponse>>(PrepareAsyncTestFairnessRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Roll(::grpc::ClientContext* context, const ::seshat::RollRequest* request, ::seshat::RollResponse* response, std::function<void(::grpc::Status)>) override;
      void Roll(::grpc::ClientContext* context, const ::seshat::RollRequest* request, ::seshat::RollResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest* request, ::seshat::RollMultipleResponse* response, std::function<void(::grpc::Status)>) override;
      void RollMultiple(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest* request, ::seshat::RollMultipleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest* request, ::seshat::RollFormulaResponse* response, std::function<void(::grpc::Status)>) override;
      void RollFormula(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest* request, ::seshat::RollFormulaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamRolls(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::seshat::RollRequest,::seshat::RollResponse>* reactor) override;
      void GetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest* request, ::seshat::RollHistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRollHistory(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest* request, ::seshat::RollHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest* request, ::seshat::FairnessTestResponse* response, std::function<void(::grpc::Status)>) override;
      void TestFairness(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest* request, ::seshat::FairnessTestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::seshat::RollResponse>* AsyncRollRaw(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RollResponse>* PrepareAsyncRollRaw(::grpc::ClientContext* context, const ::seshat::RollRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RollMultipleResponse>* AsyncRollMultipleRaw(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RollMultipleResponse>* PrepareAsyncRollMultipleRaw(::grpc::ClientContext* context, const ::seshat::RollMultipleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RollFormulaResponse>* AsyncRollFormulaRaw(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RollFormulaResponse>* PrepareAsyncRollFormulaRaw(::grpc::ClientContext* context, const ::seshat::RollFormulaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>* StreamRollsRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>* AsyncStreamRollsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::seshat::RollRequest, ::seshat::RollResponse>* PrepareAsyncStreamRollsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RollHistoryResponse>* AsyncGetRollHistoryRaw(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::RollHistoryResponse>* PrepareAsyncGetRollHistoryRaw(::grpc::ClientContext* context, const ::seshat::RollHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::FairnessTestResponse>* AsyncTestFairnessRaw(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::FairnessTestResponse>* PrepareAsyncTestFairnessRaw(::grpc::ClientContext* context, const ::seshat::FairnessTestRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Roll_;
    const ::grpc::internal::RpcMethod rpcmethod_RollMultiple_;
    const ::grpc::internal::RpcMethod rpcmethod_RollFormula_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamRolls_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRollHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_TestFairness_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Basic single die roll
    virtual ::grpc::Status Roll(::grpc::ServerContext* context, const ::seshat::RollRequest* request, ::seshat::RollResponse* response);
    // Roll multiple dice of same type
    virtual ::grpc::Status RollMultiple(::grpc::ServerContext* context, const ::seshat::RollMultipleRequest* request, ::seshat::RollMultipleResponse* response);
    // Roll with formula (e.g., "2d6+3", "1d20+5")
    virtual ::grpc::Status RollFormula(::grpc::ServerContext* context, const ::seshat::RollFormulaRequest* request, ::seshat::RollFormulaResponse* response);
    // Stream multiple rolls (for rapid rolling)
    virtual ::grpc::Status StreamRolls(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::seshat::RollResponse, ::seshat::RollRequest>* stream);
    // Get roll statistics/history
    virtual ::grpc::Status GetRollHistory(::grpc::ServerContext* context, const ::seshat::RollHistoryRequest* request, ::seshat::RollHistoryResponse* response);
    // Test dice roller fairness
    virtual ::grpc::Status TestFairness(::grpc::ServerContext* context, const ::seshat::FairnessTestRequest* request, ::seshat::FairnessTestResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Roll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Roll() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Roll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Roll(::grpc::ServerContext* /*context*/, const ::seshat::RollRequest* /*request*/, ::seshat::RollResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRoll(::grpc::ServerContext* context, ::seshat::RollRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::RollResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RollMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RollMultiple() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RollMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollMultiple(::grpc::ServerContext* /*context*/, const ::seshat::RollMultipleRequest* /*request*/, ::seshat::RollMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollMultiple(::grpc::ServerContext* context, ::seshat::RollMultipleRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::RollMultipleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RollFormula : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RollFormula() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RollFormula() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollFormula(::grpc::ServerContext* /*context*/, const ::seshat::RollFormulaRequest* /*request*/, ::seshat::RollFormulaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollFormula(::grpc::ServerContext* context, ::seshat::RollFormulaRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::RollFormulaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamRolls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamRolls() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StreamRolls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRolls(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::seshat::RollResponse, ::seshat::RollRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamRolls(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::seshat::RollResponse, ::seshat::RollRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRollHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRollHistory() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetRollHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRollHistory(::grpc::ServerContext* /*context*/, const ::seshat::RollHistoryRequest* /*request*/, ::seshat::RollHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRollHistory(::grpc::ServerContext* context, ::seshat::RollHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::RollHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestFairness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestFairness() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_TestFairness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestFairness(::grpc::ServerContext* /*context*/, const ::seshat::FairnessTestRequest* /*request*/, ::seshat::FairnessTestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestFairness(::grpc::ServerContext* context, ::seshat::FairnessTestRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::FairnessTestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Roll<WithAsyncMethod_RollMultiple<WithAsyncMethod_RollFormula<WithAsyncMethod_StreamRolls<WithAsyncMethod_GetRollHistory<WithAsyncMethod_TestFairness<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Roll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Roll() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::RollRequest, ::seshat::RollResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::RollRequest* request, ::seshat::RollResponse* response) { return this->Roll(context, request, response); }));}
    void SetMessageAllocatorFor_Roll(
        ::grpc::MessageAllocator< ::seshat::RollRequest, ::seshat::RollResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::RollRequest, ::seshat::RollResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Roll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Roll(::grpc::ServerContext* /*context*/, const ::seshat::RollRequest* /*request*/, ::seshat::RollResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Roll(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::RollRequest* /*request*/, ::seshat::RollResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RollMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RollMultiple() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::RollMultipleRequest, ::seshat::RollMultipleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::RollMultipleRequest* request, ::seshat::RollMultipleResponse* response) { return this->RollMultiple(context, request, response); }));}
    void SetMessageAllocatorFor_RollMultiple(
        ::grpc::MessageAllocator< ::seshat::RollMultipleRequest, ::seshat::RollMultipleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::RollMultipleRequest, ::seshat::RollMultipleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RollMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollMultiple(::grpc::ServerContext* /*context*/, const ::seshat::RollMultipleRequest* /*request*/, ::seshat::RollMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RollMultiple(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::RollMultipleRequest* /*request*/, ::seshat::RollMultipleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RollFormula : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RollFormula() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::RollFormulaRequest, ::seshat::RollFormulaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::RollFormulaRequest* request, ::seshat::RollFormulaResponse* response) { return this->RollFormula(context, request, response); }));}
    void SetMessageAllocatorFor_RollFormula(
        ::grpc::MessageAllocator< ::seshat::RollFormulaRequest, ::seshat::RollFormulaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::RollFormulaRequest, ::seshat::RollFormulaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RollFormula() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollFormula(::grpc::ServerContext* /*context*/, const ::seshat::RollFormulaRequest* /*request*/, ::seshat::RollFormulaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RollFormula(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::RollFormulaRequest* /*request*/, ::seshat::RollFormulaResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamRolls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamRolls() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::seshat::RollRequest, ::seshat::RollResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamRolls(context); }));
    }
    ~WithCallbackMethod_StreamRolls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRolls(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::seshat::RollResponse, ::seshat::RollRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::seshat::RollRequest, ::seshat::RollResponse>* StreamRolls(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRollHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRollHistory() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::RollHistoryRequest, ::seshat::RollHistoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::RollHistoryRequest* request, ::seshat::RollHistoryResponse* response) { return this->GetRollHistory(context, request, response); }));}
    void SetMessageAllocatorFor_GetRollHistory(
        ::grpc::MessageAllocator< ::seshat::RollHistoryRequest, ::seshat::RollHistoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::RollHistoryRequest, ::seshat::RollHistoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRollHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRollHistory(::grpc::ServerContext* /*context*/, const ::seshat::RollHistoryRequest* /*request*/, ::seshat::RollHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRollHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::RollHistoryRequest* /*request*/, ::seshat::RollHistoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TestFairness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TestFairness() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::FairnessTestRequest, ::seshat::FairnessTestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::FairnessTestRequest* request, ::seshat::FairnessTestResponse* response) { return this->TestFairness(context, request, response); }));}
    void SetMessageAllocatorFor_TestFairness(
        ::grpc::MessageAllocator< ::seshat::FairnessTestRequest, ::seshat::FairnessTestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::FairnessTestRequest, ::seshat::FairnessTestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TestFairness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestFairness(::grpc::ServerContext* /*context*/, const ::seshat::FairnessTestRequest* /*request*/, ::seshat::FairnessTestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestFairness(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::FairnessTestRequest* /*request*/, ::seshat::FairnessTestResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Roll<WithCallbackMethod_RollMultiple<WithCallbackMethod_RollFormula<WithCallbackMethod_StreamRolls<WithCallbackMethod_GetRollHistory<WithCallbackMethod_TestFairness<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Roll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Roll() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Roll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Roll(::grpc::ServerContext* /*context*/, const ::seshat::RollRequest* /*request*/, ::seshat::RollResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RollMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RollMultiple() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RollMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollMultiple(::grpc::ServerContext* /*context*/, const ::seshat::RollMultipleRequest* /*request*/, ::seshat::RollMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RollFormula : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RollFormula() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RollFormula() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollFormula(::grpc::ServerContext* /*context*/, const ::seshat::RollFormulaRequest* /*request*/, ::seshat::RollFormulaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamRolls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamRolls() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StreamRolls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRolls(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::seshat::RollResponse, ::seshat::RollRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRollHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRollHistory() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetRollHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRollHistory(::grpc::ServerContext* /*context*/, const ::seshat::RollHistoryRequest* /*request*/, ::seshat::RollHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestFairness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestFairness() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_TestFairness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestFairness(::grpc::ServerContext* /*context*/, const ::seshat::FairnessTestRequest* /*request*/, ::seshat::FairnessTestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Roll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Roll() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Roll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Roll(::grpc::ServerContext* /*context*/, const ::seshat::RollRequest* /*request*/, ::seshat::RollResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRoll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RollMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RollMultiple() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RollMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollMultiple(::grpc::ServerContext* /*context*/, const ::seshat::RollMultipleRequest* /*request*/, ::seshat::RollMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollMultiple(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RollFormula : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RollFormula() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RollFormula() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollFormula(::grpc::ServerContext* /*context*/, const ::seshat::RollFormulaRequest* /*request*/, ::seshat::RollFormulaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollFormula(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamRolls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamRolls() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StreamRolls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRolls(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::seshat::RollResponse, ::seshat::RollRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamRolls(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRollHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRollHistory() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetRollHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRollHistory(::grpc::ServerContext* /*context*/, const ::seshat::RollHistoryRequest* /*request*/, ::seshat::RollHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRollHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestFairness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestFairness() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_TestFairness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestFairness(::grpc::ServerContext* /*context*/, const ::seshat::FairnessTestRequest* /*request*/, ::seshat::FairnessTestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestFairness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Roll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Roll() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Roll(context, request, response); }));
    }
    ~WithRawCallbackMethod_Roll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Roll(::grpc::ServerContext* /*context*/, const ::seshat::RollRequest* /*request*/, ::seshat::RollResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Roll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RollMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RollMultiple() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RollMultiple(context, request, response); }));
    }
    ~WithRawCallbackMethod_RollMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollMultiple(::grpc::ServerContext* /*context*/, const ::seshat::RollMultipleRequest* /*request*/, ::seshat::RollMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RollMultiple(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RollFormula : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RollFormula() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RollFormula(context, request, response); }));
    }
    ~WithRawCallbackMethod_RollFormula() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollFormula(::grpc::ServerContext* /*context*/, const ::seshat::RollFormulaRequest* /*request*/, ::seshat::RollFormulaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RollFormula(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamRolls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamRolls() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamRolls(context); }));
    }
    ~WithRawCallbackMethod_StreamRolls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRolls(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::seshat::RollResponse, ::seshat::RollRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamRolls(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRollHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRollHistory() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRollHistory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRollHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRollHistory(::grpc::ServerContext* /*context*/, const ::seshat::RollHistoryRequest* /*request*/, ::seshat::RollHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRollHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TestFairness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TestFairness() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestFairness(context, request, response); }));
    }
    ~WithRawCallbackMethod_TestFairness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestFairness(::grpc::ServerContext* /*context*/, const ::seshat::FairnessTestRequest* /*request*/, ::seshat::FairnessTestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TestFairness(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Roll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Roll() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::RollRequest, ::seshat::RollResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::RollRequest, ::seshat::RollResponse>* streamer) {
                       return this->StreamedRoll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Roll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Roll(::grpc::ServerContext* /*context*/, const ::seshat::RollRequest* /*request*/, ::seshat::RollResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRoll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::RollRequest,::seshat::RollResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RollMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RollMultiple() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::RollMultipleRequest, ::seshat::RollMultipleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::RollMultipleRequest, ::seshat::RollMultipleResponse>* streamer) {
                       return this->StreamedRollMultiple(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RollMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RollMultiple(::grpc::ServerContext* /*context*/, const ::seshat::RollMultipleRequest* /*request*/, ::seshat::RollMultipleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollMultiple(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::RollMultipleRequest,::seshat::RollMultipleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RollFormula : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RollFormula() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::RollFormulaRequest, ::seshat::RollFormulaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::RollFormulaRequest, ::seshat::RollFormulaResponse>* streamer) {
                       return this->StreamedRollFormula(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RollFormula() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RollFormula(::grpc::ServerContext* /*context*/, const ::seshat::RollFormulaRequest* /*request*/, ::seshat::RollFormulaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollFormula(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::RollFormulaRequest,::seshat::RollFormulaResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRollHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRollHistory() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::RollHistoryRequest, ::seshat::RollHistoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::RollHistoryRequest, ::seshat::RollHistoryResponse>* streamer) {
                       return this->StreamedGetRollHistory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRollHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRollHistory(::grpc::ServerContext* /*context*/, const ::seshat::RollHistoryRequest* /*request*/, ::seshat::RollHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRollHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::RollHistoryRequest,::seshat::RollHistoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestFairness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestFairness() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::FairnessTestRequest, ::seshat::FairnessTestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::FairnessTestRequest, ::seshat::FairnessTestResponse>* streamer) {
                       return this->StreamedTestFairness(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TestFairness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestFairness(::grpc::ServerContext* /*context*/, const ::seshat::FairnessTestRequest* /*request*/, ::seshat::FairnessTestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestFairness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::FairnessTestRequest,::seshat::FairnessTestResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Roll<WithStreamedUnaryMethod_RollMultiple<WithStreamedUnaryMethod_RollFormula<WithStreamedUnaryMethod_GetRollHistory<WithStreamedUnaryMethod_TestFairness<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Roll<WithStreamedUnaryMethod_RollMultiple<WithStreamedUnaryMethod_RollFormula<WithStreamedUnaryMethod_GetRollHistory<WithStreamedUnaryMethod_TestFairness<Service > > > > > StreamedService;
};

}  // namespace seshat


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_seshat_2fdice_2eproto__INCLUDED

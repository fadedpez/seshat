// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/environments.proto

#include "seshat/environments.pb.h"
#include "seshat/environments.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace seshat {

static const char* EnvironmentService_method_names[] = {
  "/seshat.EnvironmentService/GenerateRoom",
  "/seshat.EnvironmentService/GenerateRoomWithTemplate",
  "/seshat.EnvironmentService/GenerateWalls",
  "/seshat.EnvironmentService/DestroyWall",
  "/seshat.EnvironmentService/GetWallInfo",
  "/seshat.EnvironmentService/GetThemes",
  "/seshat.EnvironmentService/ApplyTheme",
  "/seshat.EnvironmentService/GetShapeTemplates",
  "/seshat.EnvironmentService/CreateCustomShape",
  "/seshat.EnvironmentService/AnalyzeCapacity",
  "/seshat.EnvironmentService/GetOptimalSize",
};

std::unique_ptr< EnvironmentService::Stub> EnvironmentService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EnvironmentService::Stub> stub(new EnvironmentService::Stub(channel, options));
  return stub;
}

EnvironmentService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GenerateRoom_(EnvironmentService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateRoomWithTemplate_(EnvironmentService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateWalls_(EnvironmentService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyWall_(EnvironmentService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWallInfo_(EnvironmentService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetThemes_(EnvironmentService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ApplyTheme_(EnvironmentService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetShapeTemplates_(EnvironmentService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCustomShape_(EnvironmentService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AnalyzeCapacity_(EnvironmentService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOptimalSize_(EnvironmentService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EnvironmentService::Stub::GenerateRoom(::grpc::ClientContext* context, const ::seshat::GenerateRoomRequest& request, ::seshat::GenerateRoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GenerateRoomRequest, ::seshat::GenerateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateRoom_, context, request, response);
}

void EnvironmentService::Stub::async::GenerateRoom(::grpc::ClientContext* context, const ::seshat::GenerateRoomRequest* request, ::seshat::GenerateRoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GenerateRoomRequest, ::seshat::GenerateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateRoom_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::GenerateRoom(::grpc::ClientContext* context, const ::seshat::GenerateRoomRequest* request, ::seshat::GenerateRoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GenerateRoomResponse>* EnvironmentService::Stub::PrepareAsyncGenerateRoomRaw(::grpc::ClientContext* context, const ::seshat::GenerateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GenerateRoomResponse, ::seshat::GenerateRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GenerateRoomResponse>* EnvironmentService::Stub::AsyncGenerateRoomRaw(::grpc::ClientContext* context, const ::seshat::GenerateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::GenerateRoomWithTemplate(::grpc::ClientContext* context, const ::seshat::GenerateRoomTemplateRequest& request, ::seshat::GenerateRoomTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GenerateRoomTemplateRequest, ::seshat::GenerateRoomTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateRoomWithTemplate_, context, request, response);
}

void EnvironmentService::Stub::async::GenerateRoomWithTemplate(::grpc::ClientContext* context, const ::seshat::GenerateRoomTemplateRequest* request, ::seshat::GenerateRoomTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GenerateRoomTemplateRequest, ::seshat::GenerateRoomTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateRoomWithTemplate_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::GenerateRoomWithTemplate(::grpc::ClientContext* context, const ::seshat::GenerateRoomTemplateRequest* request, ::seshat::GenerateRoomTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateRoomWithTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GenerateRoomTemplateResponse>* EnvironmentService::Stub::PrepareAsyncGenerateRoomWithTemplateRaw(::grpc::ClientContext* context, const ::seshat::GenerateRoomTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GenerateRoomTemplateResponse, ::seshat::GenerateRoomTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateRoomWithTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GenerateRoomTemplateResponse>* EnvironmentService::Stub::AsyncGenerateRoomWithTemplateRaw(::grpc::ClientContext* context, const ::seshat::GenerateRoomTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateRoomWithTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::GenerateWalls(::grpc::ClientContext* context, const ::seshat::GenerateWallsRequest& request, ::seshat::GenerateWallsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GenerateWallsRequest, ::seshat::GenerateWallsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateWalls_, context, request, response);
}

void EnvironmentService::Stub::async::GenerateWalls(::grpc::ClientContext* context, const ::seshat::GenerateWallsRequest* request, ::seshat::GenerateWallsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GenerateWallsRequest, ::seshat::GenerateWallsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateWalls_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::GenerateWalls(::grpc::ClientContext* context, const ::seshat::GenerateWallsRequest* request, ::seshat::GenerateWallsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateWalls_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GenerateWallsResponse>* EnvironmentService::Stub::PrepareAsyncGenerateWallsRaw(::grpc::ClientContext* context, const ::seshat::GenerateWallsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GenerateWallsResponse, ::seshat::GenerateWallsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateWalls_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GenerateWallsResponse>* EnvironmentService::Stub::AsyncGenerateWallsRaw(::grpc::ClientContext* context, const ::seshat::GenerateWallsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateWallsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::DestroyWall(::grpc::ClientContext* context, const ::seshat::DestroyWallRequest& request, ::seshat::DestroyWallResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::DestroyWallRequest, ::seshat::DestroyWallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyWall_, context, request, response);
}

void EnvironmentService::Stub::async::DestroyWall(::grpc::ClientContext* context, const ::seshat::DestroyWallRequest* request, ::seshat::DestroyWallResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::DestroyWallRequest, ::seshat::DestroyWallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyWall_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::DestroyWall(::grpc::ClientContext* context, const ::seshat::DestroyWallRequest* request, ::seshat::DestroyWallResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyWall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::DestroyWallResponse>* EnvironmentService::Stub::PrepareAsyncDestroyWallRaw(::grpc::ClientContext* context, const ::seshat::DestroyWallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::DestroyWallResponse, ::seshat::DestroyWallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyWall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::DestroyWallResponse>* EnvironmentService::Stub::AsyncDestroyWallRaw(::grpc::ClientContext* context, const ::seshat::DestroyWallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyWallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::GetWallInfo(::grpc::ClientContext* context, const ::seshat::GetWallInfoRequest& request, ::seshat::GetWallInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetWallInfoRequest, ::seshat::GetWallInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWallInfo_, context, request, response);
}

void EnvironmentService::Stub::async::GetWallInfo(::grpc::ClientContext* context, const ::seshat::GetWallInfoRequest* request, ::seshat::GetWallInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetWallInfoRequest, ::seshat::GetWallInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWallInfo_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::GetWallInfo(::grpc::ClientContext* context, const ::seshat::GetWallInfoRequest* request, ::seshat::GetWallInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWallInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetWallInfoResponse>* EnvironmentService::Stub::PrepareAsyncGetWallInfoRaw(::grpc::ClientContext* context, const ::seshat::GetWallInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetWallInfoResponse, ::seshat::GetWallInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWallInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetWallInfoResponse>* EnvironmentService::Stub::AsyncGetWallInfoRaw(::grpc::ClientContext* context, const ::seshat::GetWallInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWallInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::GetThemes(::grpc::ClientContext* context, const ::seshat::GetThemesRequest& request, ::seshat::GetThemesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetThemesRequest, ::seshat::GetThemesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetThemes_, context, request, response);
}

void EnvironmentService::Stub::async::GetThemes(::grpc::ClientContext* context, const ::seshat::GetThemesRequest* request, ::seshat::GetThemesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetThemesRequest, ::seshat::GetThemesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetThemes_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::GetThemes(::grpc::ClientContext* context, const ::seshat::GetThemesRequest* request, ::seshat::GetThemesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetThemes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetThemesResponse>* EnvironmentService::Stub::PrepareAsyncGetThemesRaw(::grpc::ClientContext* context, const ::seshat::GetThemesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetThemesResponse, ::seshat::GetThemesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetThemes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetThemesResponse>* EnvironmentService::Stub::AsyncGetThemesRaw(::grpc::ClientContext* context, const ::seshat::GetThemesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetThemesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::ApplyTheme(::grpc::ClientContext* context, const ::seshat::ApplyThemeRequest& request, ::seshat::ApplyThemeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::ApplyThemeRequest, ::seshat::ApplyThemeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApplyTheme_, context, request, response);
}

void EnvironmentService::Stub::async::ApplyTheme(::grpc::ClientContext* context, const ::seshat::ApplyThemeRequest* request, ::seshat::ApplyThemeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::ApplyThemeRequest, ::seshat::ApplyThemeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyTheme_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::ApplyTheme(::grpc::ClientContext* context, const ::seshat::ApplyThemeRequest* request, ::seshat::ApplyThemeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyTheme_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::ApplyThemeResponse>* EnvironmentService::Stub::PrepareAsyncApplyThemeRaw(::grpc::ClientContext* context, const ::seshat::ApplyThemeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::ApplyThemeResponse, ::seshat::ApplyThemeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApplyTheme_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::ApplyThemeResponse>* EnvironmentService::Stub::AsyncApplyThemeRaw(::grpc::ClientContext* context, const ::seshat::ApplyThemeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplyThemeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::GetShapeTemplates(::grpc::ClientContext* context, const ::seshat::GetShapeTemplatesRequest& request, ::seshat::GetShapeTemplatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetShapeTemplatesRequest, ::seshat::GetShapeTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetShapeTemplates_, context, request, response);
}

void EnvironmentService::Stub::async::GetShapeTemplates(::grpc::ClientContext* context, const ::seshat::GetShapeTemplatesRequest* request, ::seshat::GetShapeTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetShapeTemplatesRequest, ::seshat::GetShapeTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShapeTemplates_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::GetShapeTemplates(::grpc::ClientContext* context, const ::seshat::GetShapeTemplatesRequest* request, ::seshat::GetShapeTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShapeTemplates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetShapeTemplatesResponse>* EnvironmentService::Stub::PrepareAsyncGetShapeTemplatesRaw(::grpc::ClientContext* context, const ::seshat::GetShapeTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetShapeTemplatesResponse, ::seshat::GetShapeTemplatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetShapeTemplates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetShapeTemplatesResponse>* EnvironmentService::Stub::AsyncGetShapeTemplatesRaw(::grpc::ClientContext* context, const ::seshat::GetShapeTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetShapeTemplatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::CreateCustomShape(::grpc::ClientContext* context, const ::seshat::CreateCustomShapeRequest& request, ::seshat::CreateCustomShapeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::CreateCustomShapeRequest, ::seshat::CreateCustomShapeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCustomShape_, context, request, response);
}

void EnvironmentService::Stub::async::CreateCustomShape(::grpc::ClientContext* context, const ::seshat::CreateCustomShapeRequest* request, ::seshat::CreateCustomShapeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::CreateCustomShapeRequest, ::seshat::CreateCustomShapeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCustomShape_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::CreateCustomShape(::grpc::ClientContext* context, const ::seshat::CreateCustomShapeRequest* request, ::seshat::CreateCustomShapeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCustomShape_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateCustomShapeResponse>* EnvironmentService::Stub::PrepareAsyncCreateCustomShapeRaw(::grpc::ClientContext* context, const ::seshat::CreateCustomShapeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::CreateCustomShapeResponse, ::seshat::CreateCustomShapeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCustomShape_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::CreateCustomShapeResponse>* EnvironmentService::Stub::AsyncCreateCustomShapeRaw(::grpc::ClientContext* context, const ::seshat::CreateCustomShapeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCustomShapeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::AnalyzeCapacity(::grpc::ClientContext* context, const ::seshat::AnalyzeCapacityRequest& request, ::seshat::AnalyzeCapacityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::AnalyzeCapacityRequest, ::seshat::AnalyzeCapacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AnalyzeCapacity_, context, request, response);
}

void EnvironmentService::Stub::async::AnalyzeCapacity(::grpc::ClientContext* context, const ::seshat::AnalyzeCapacityRequest* request, ::seshat::AnalyzeCapacityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::AnalyzeCapacityRequest, ::seshat::AnalyzeCapacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AnalyzeCapacity_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::AnalyzeCapacity(::grpc::ClientContext* context, const ::seshat::AnalyzeCapacityRequest* request, ::seshat::AnalyzeCapacityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AnalyzeCapacity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::AnalyzeCapacityResponse>* EnvironmentService::Stub::PrepareAsyncAnalyzeCapacityRaw(::grpc::ClientContext* context, const ::seshat::AnalyzeCapacityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::AnalyzeCapacityResponse, ::seshat::AnalyzeCapacityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AnalyzeCapacity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::AnalyzeCapacityResponse>* EnvironmentService::Stub::AsyncAnalyzeCapacityRaw(::grpc::ClientContext* context, const ::seshat::AnalyzeCapacityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAnalyzeCapacityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentService::Stub::GetOptimalSize(::grpc::ClientContext* context, const ::seshat::GetOptimalSizeRequest& request, ::seshat::GetOptimalSizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::seshat::GetOptimalSizeRequest, ::seshat::GetOptimalSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOptimalSize_, context, request, response);
}

void EnvironmentService::Stub::async::GetOptimalSize(::grpc::ClientContext* context, const ::seshat::GetOptimalSizeRequest* request, ::seshat::GetOptimalSizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::seshat::GetOptimalSizeRequest, ::seshat::GetOptimalSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOptimalSize_, context, request, response, std::move(f));
}

void EnvironmentService::Stub::async::GetOptimalSize(::grpc::ClientContext* context, const ::seshat::GetOptimalSizeRequest* request, ::seshat::GetOptimalSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOptimalSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetOptimalSizeResponse>* EnvironmentService::Stub::PrepareAsyncGetOptimalSizeRaw(::grpc::ClientContext* context, const ::seshat::GetOptimalSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::seshat::GetOptimalSizeResponse, ::seshat::GetOptimalSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOptimalSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::seshat::GetOptimalSizeResponse>* EnvironmentService::Stub::AsyncGetOptimalSizeRaw(::grpc::ClientContext* context, const ::seshat::GetOptimalSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOptimalSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

EnvironmentService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::GenerateRoomRequest, ::seshat::GenerateRoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GenerateRoomRequest* req,
             ::seshat::GenerateRoomResponse* resp) {
               return service->GenerateRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::GenerateRoomTemplateRequest, ::seshat::GenerateRoomTemplateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GenerateRoomTemplateRequest* req,
             ::seshat::GenerateRoomTemplateResponse* resp) {
               return service->GenerateRoomWithTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::GenerateWallsRequest, ::seshat::GenerateWallsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GenerateWallsRequest* req,
             ::seshat::GenerateWallsResponse* resp) {
               return service->GenerateWalls(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::DestroyWallRequest, ::seshat::DestroyWallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::DestroyWallRequest* req,
             ::seshat::DestroyWallResponse* resp) {
               return service->DestroyWall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::GetWallInfoRequest, ::seshat::GetWallInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetWallInfoRequest* req,
             ::seshat::GetWallInfoResponse* resp) {
               return service->GetWallInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::GetThemesRequest, ::seshat::GetThemesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetThemesRequest* req,
             ::seshat::GetThemesResponse* resp) {
               return service->GetThemes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::ApplyThemeRequest, ::seshat::ApplyThemeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::ApplyThemeRequest* req,
             ::seshat::ApplyThemeResponse* resp) {
               return service->ApplyTheme(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::GetShapeTemplatesRequest, ::seshat::GetShapeTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetShapeTemplatesRequest* req,
             ::seshat::GetShapeTemplatesResponse* resp) {
               return service->GetShapeTemplates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::CreateCustomShapeRequest, ::seshat::CreateCustomShapeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::CreateCustomShapeRequest* req,
             ::seshat::CreateCustomShapeResponse* resp) {
               return service->CreateCustomShape(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::AnalyzeCapacityRequest, ::seshat::AnalyzeCapacityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::AnalyzeCapacityRequest* req,
             ::seshat::AnalyzeCapacityResponse* resp) {
               return service->AnalyzeCapacity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentService::Service, ::seshat::GetOptimalSizeRequest, ::seshat::GetOptimalSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::seshat::GetOptimalSizeRequest* req,
             ::seshat::GetOptimalSizeResponse* resp) {
               return service->GetOptimalSize(ctx, req, resp);
             }, this)));
}

EnvironmentService::Service::~Service() {
}

::grpc::Status EnvironmentService::Service::GenerateRoom(::grpc::ServerContext* context, const ::seshat::GenerateRoomRequest* request, ::seshat::GenerateRoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::GenerateRoomWithTemplate(::grpc::ServerContext* context, const ::seshat::GenerateRoomTemplateRequest* request, ::seshat::GenerateRoomTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::GenerateWalls(::grpc::ServerContext* context, const ::seshat::GenerateWallsRequest* request, ::seshat::GenerateWallsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::DestroyWall(::grpc::ServerContext* context, const ::seshat::DestroyWallRequest* request, ::seshat::DestroyWallResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::GetWallInfo(::grpc::ServerContext* context, const ::seshat::GetWallInfoRequest* request, ::seshat::GetWallInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::GetThemes(::grpc::ServerContext* context, const ::seshat::GetThemesRequest* request, ::seshat::GetThemesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::ApplyTheme(::grpc::ServerContext* context, const ::seshat::ApplyThemeRequest* request, ::seshat::ApplyThemeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::GetShapeTemplates(::grpc::ServerContext* context, const ::seshat::GetShapeTemplatesRequest* request, ::seshat::GetShapeTemplatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::CreateCustomShape(::grpc::ServerContext* context, const ::seshat::CreateCustomShapeRequest* request, ::seshat::CreateCustomShapeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::AnalyzeCapacity(::grpc::ServerContext* context, const ::seshat::AnalyzeCapacityRequest* request, ::seshat::AnalyzeCapacityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentService::Service::GetOptimalSize(::grpc::ServerContext* context, const ::seshat::GetOptimalSizeRequest* request, ::seshat::GetOptimalSizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace seshat
#include <grpcpp/ports_undef.inc>


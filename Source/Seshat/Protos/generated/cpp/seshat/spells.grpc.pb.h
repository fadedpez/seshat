// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seshat/spells.proto
#ifndef GRPC_seshat_2fspells_2eproto__INCLUDED
#define GRPC_seshat_2fspells_2eproto__INCLUDED

#include "seshat/spells.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace seshat {

// Spell system service - exposes all spells toolkit functionality
class SpellService final {
 public:
  static constexpr char const* service_full_name() {
    return "seshat.SpellService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Spell management
    virtual ::grpc::Status GetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::seshat::GetSpellResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellResponse>> AsyncGetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellResponse>>(AsyncGetSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellResponse>> PrepareAsyncGetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellResponse>>(PrepareAsyncGetSpellRaw(context, request, cq));
    }
    virtual ::grpc::Status ListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::seshat::ListSpellsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListSpellsResponse>> AsyncListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListSpellsResponse>>(AsyncListSpellsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListSpellsResponse>> PrepareAsyncListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListSpellsResponse>>(PrepareAsyncListSpellsRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::seshat::CreateCustomSpellResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateCustomSpellResponse>> AsyncCreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateCustomSpellResponse>>(AsyncCreateCustomSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateCustomSpellResponse>> PrepareAsyncCreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateCustomSpellResponse>>(PrepareAsyncCreateCustomSpellRaw(context, request, cq));
    }
    // Spell casting
    virtual ::grpc::Status CastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::seshat::CastSpellResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CastSpellResponse>> AsyncCastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CastSpellResponse>>(AsyncCastSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CastSpellResponse>> PrepareAsyncCastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CastSpellResponse>>(PrepareAsyncCastSpellRaw(context, request, cq));
    }
    virtual ::grpc::Status CanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::seshat::CanCastSpellResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CanCastSpellResponse>> AsyncCanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CanCastSpellResponse>>(AsyncCanCastSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CanCastSpellResponse>> PrepareAsyncCanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CanCastSpellResponse>>(PrepareAsyncCanCastSpellRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::seshat::GetCastingOptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetCastingOptionsResponse>> AsyncGetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetCastingOptionsResponse>>(AsyncGetCastingOptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetCastingOptionsResponse>> PrepareAsyncGetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetCastingOptionsResponse>>(PrepareAsyncGetCastingOptionsRaw(context, request, cq));
    }
    // Spell slots and preparation
    virtual ::grpc::Status GetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::seshat::GetSpellSlotsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellSlotsResponse>> AsyncGetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellSlotsResponse>>(AsyncGetSpellSlotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellSlotsResponse>> PrepareAsyncGetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellSlotsResponse>>(PrepareAsyncGetSpellSlotsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::seshat::UpdateSpellSlotsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateSpellSlotsResponse>> AsyncUpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateSpellSlotsResponse>>(AsyncUpdateSpellSlotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateSpellSlotsResponse>> PrepareAsyncUpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateSpellSlotsResponse>>(PrepareAsyncUpdateSpellSlotsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::seshat::GetPreparedSpellsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetPreparedSpellsResponse>> AsyncGetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetPreparedSpellsResponse>>(AsyncGetPreparedSpellsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetPreparedSpellsResponse>> PrepareAsyncGetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetPreparedSpellsResponse>>(PrepareAsyncGetPreparedSpellsRaw(context, request, cq));
    }
    virtual ::grpc::Status PrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::seshat::PrepareSpellResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::PrepareSpellResponse>> AsyncPrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::PrepareSpellResponse>>(AsyncPrepareSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::PrepareSpellResponse>> PrepareAsyncPrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::PrepareSpellResponse>>(PrepareAsyncPrepareSpellRaw(context, request, cq));
    }
    virtual ::grpc::Status UnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::seshat::UnprepareSpellResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UnprepareSpellResponse>> AsyncUnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UnprepareSpellResponse>>(AsyncUnprepareSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UnprepareSpellResponse>> PrepareAsyncUnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UnprepareSpellResponse>>(PrepareAsyncUnprepareSpellRaw(context, request, cq));
    }
    // Concentration management
    virtual ::grpc::Status StartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::seshat::StartConcentrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::StartConcentrationResponse>> AsyncStartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::StartConcentrationResponse>>(AsyncStartConcentrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::StartConcentrationResponse>> PrepareAsyncStartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::StartConcentrationResponse>>(PrepareAsyncStartConcentrationRaw(context, request, cq));
    }
    virtual ::grpc::Status EndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::seshat::EndConcentrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::EndConcentrationResponse>> AsyncEndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::EndConcentrationResponse>>(AsyncEndConcentrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::EndConcentrationResponse>> PrepareAsyncEndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::EndConcentrationResponse>>(PrepareAsyncEndConcentrationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::seshat::GetConcentrationStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetConcentrationStatusResponse>> AsyncGetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetConcentrationStatusResponse>>(AsyncGetConcentrationStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetConcentrationStatusResponse>> PrepareAsyncGetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetConcentrationStatusResponse>>(PrepareAsyncGetConcentrationStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status MakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::seshat::MakeConcentrationCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MakeConcentrationCheckResponse>> AsyncMakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MakeConcentrationCheckResponse>>(AsyncMakeConcentrationCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MakeConcentrationCheckResponse>> PrepareAsyncMakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MakeConcentrationCheckResponse>>(PrepareAsyncMakeConcentrationCheckRaw(context, request, cq));
    }
    // Spell effects and targeting
    virtual ::grpc::Status GetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::seshat::GetSpellTargetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellTargetsResponse>> AsyncGetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellTargetsResponse>>(AsyncGetSpellTargetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellTargetsResponse>> PrepareAsyncGetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellTargetsResponse>>(PrepareAsyncGetSpellTargetsRaw(context, request, cq));
    }
    virtual ::grpc::Status ApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::seshat::ApplySpellEffectsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ApplySpellEffectsResponse>> AsyncApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ApplySpellEffectsResponse>>(AsyncApplySpellEffectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ApplySpellEffectsResponse>> PrepareAsyncApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ApplySpellEffectsResponse>>(PrepareAsyncApplySpellEffectsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::seshat::GetSpellAreasResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellAreasResponse>> AsyncGetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellAreasResponse>>(AsyncGetSpellAreasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellAreasResponse>> PrepareAsyncGetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellAreasResponse>>(PrepareAsyncGetSpellAreasRaw(context, request, cq));
    }
    // Spell history and tracking
    virtual ::grpc::Status GetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::seshat::GetSpellHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellHistoryResponse>> AsyncGetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellHistoryResponse>>(AsyncGetSpellHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellHistoryResponse>> PrepareAsyncGetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellHistoryResponse>>(PrepareAsyncGetSpellHistoryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::seshat::GetActiveSpellsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetActiveSpellsResponse>> AsyncGetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetActiveSpellsResponse>>(AsyncGetActiveSpellsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetActiveSpellsResponse>> PrepareAsyncGetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetActiveSpellsResponse>>(PrepareAsyncGetActiveSpellsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Spell management
      virtual void GetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest* request, ::seshat::GetSpellResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest* request, ::seshat::GetSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest* request, ::seshat::ListSpellsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest* request, ::seshat::ListSpellsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest* request, ::seshat::CreateCustomSpellResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest* request, ::seshat::CreateCustomSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Spell casting
      virtual void CastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest* request, ::seshat::CastSpellResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest* request, ::seshat::CastSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest* request, ::seshat::CanCastSpellResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest* request, ::seshat::CanCastSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest* request, ::seshat::GetCastingOptionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest* request, ::seshat::GetCastingOptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Spell slots and preparation
      virtual void GetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest* request, ::seshat::GetSpellSlotsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest* request, ::seshat::GetSpellSlotsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest* request, ::seshat::UpdateSpellSlotsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest* request, ::seshat::UpdateSpellSlotsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest* request, ::seshat::GetPreparedSpellsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest* request, ::seshat::GetPreparedSpellsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest* request, ::seshat::PrepareSpellResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest* request, ::seshat::PrepareSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest* request, ::seshat::UnprepareSpellResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest* request, ::seshat::UnprepareSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Concentration management
      virtual void StartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest* request, ::seshat::StartConcentrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest* request, ::seshat::StartConcentrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest* request, ::seshat::EndConcentrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest* request, ::seshat::EndConcentrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest* request, ::seshat::GetConcentrationStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest* request, ::seshat::GetConcentrationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest* request, ::seshat::MakeConcentrationCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest* request, ::seshat::MakeConcentrationCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Spell effects and targeting
      virtual void GetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest* request, ::seshat::GetSpellTargetsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest* request, ::seshat::GetSpellTargetsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest* request, ::seshat::ApplySpellEffectsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest* request, ::seshat::ApplySpellEffectsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest* request, ::seshat::GetSpellAreasResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest* request, ::seshat::GetSpellAreasResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Spell history and tracking
      virtual void GetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest* request, ::seshat::GetSpellHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest* request, ::seshat::GetSpellHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest* request, ::seshat::GetActiveSpellsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest* request, ::seshat::GetActiveSpellsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellResponse>* AsyncGetSpellRaw(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellResponse>* PrepareAsyncGetSpellRaw(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListSpellsResponse>* AsyncListSpellsRaw(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ListSpellsResponse>* PrepareAsyncListSpellsRaw(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateCustomSpellResponse>* AsyncCreateCustomSpellRaw(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CreateCustomSpellResponse>* PrepareAsyncCreateCustomSpellRaw(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CastSpellResponse>* AsyncCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CastSpellResponse>* PrepareAsyncCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CanCastSpellResponse>* AsyncCanCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::CanCastSpellResponse>* PrepareAsyncCanCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetCastingOptionsResponse>* AsyncGetCastingOptionsRaw(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetCastingOptionsResponse>* PrepareAsyncGetCastingOptionsRaw(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellSlotsResponse>* AsyncGetSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellSlotsResponse>* PrepareAsyncGetSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateSpellSlotsResponse>* AsyncUpdateSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UpdateSpellSlotsResponse>* PrepareAsyncUpdateSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetPreparedSpellsResponse>* AsyncGetPreparedSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetPreparedSpellsResponse>* PrepareAsyncGetPreparedSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::PrepareSpellResponse>* AsyncPrepareSpellRaw(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::PrepareSpellResponse>* PrepareAsyncPrepareSpellRaw(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UnprepareSpellResponse>* AsyncUnprepareSpellRaw(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::UnprepareSpellResponse>* PrepareAsyncUnprepareSpellRaw(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::StartConcentrationResponse>* AsyncStartConcentrationRaw(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::StartConcentrationResponse>* PrepareAsyncStartConcentrationRaw(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::EndConcentrationResponse>* AsyncEndConcentrationRaw(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::EndConcentrationResponse>* PrepareAsyncEndConcentrationRaw(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetConcentrationStatusResponse>* AsyncGetConcentrationStatusRaw(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetConcentrationStatusResponse>* PrepareAsyncGetConcentrationStatusRaw(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MakeConcentrationCheckResponse>* AsyncMakeConcentrationCheckRaw(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::MakeConcentrationCheckResponse>* PrepareAsyncMakeConcentrationCheckRaw(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellTargetsResponse>* AsyncGetSpellTargetsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellTargetsResponse>* PrepareAsyncGetSpellTargetsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ApplySpellEffectsResponse>* AsyncApplySpellEffectsRaw(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::ApplySpellEffectsResponse>* PrepareAsyncApplySpellEffectsRaw(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellAreasResponse>* AsyncGetSpellAreasRaw(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellAreasResponse>* PrepareAsyncGetSpellAreasRaw(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellHistoryResponse>* AsyncGetSpellHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetSpellHistoryResponse>* PrepareAsyncGetSpellHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetActiveSpellsResponse>* AsyncGetActiveSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::seshat::GetActiveSpellsResponse>* PrepareAsyncGetActiveSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::seshat::GetSpellResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellResponse>> AsyncGetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellResponse>>(AsyncGetSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellResponse>> PrepareAsyncGetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellResponse>>(PrepareAsyncGetSpellRaw(context, request, cq));
    }
    ::grpc::Status ListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::seshat::ListSpellsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ListSpellsResponse>> AsyncListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ListSpellsResponse>>(AsyncListSpellsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ListSpellsResponse>> PrepareAsyncListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ListSpellsResponse>>(PrepareAsyncListSpellsRaw(context, request, cq));
    }
    ::grpc::Status CreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::seshat::CreateCustomSpellResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateCustomSpellResponse>> AsyncCreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateCustomSpellResponse>>(AsyncCreateCustomSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateCustomSpellResponse>> PrepareAsyncCreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CreateCustomSpellResponse>>(PrepareAsyncCreateCustomSpellRaw(context, request, cq));
    }
    ::grpc::Status CastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::seshat::CastSpellResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CastSpellResponse>> AsyncCastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CastSpellResponse>>(AsyncCastSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CastSpellResponse>> PrepareAsyncCastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CastSpellResponse>>(PrepareAsyncCastSpellRaw(context, request, cq));
    }
    ::grpc::Status CanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::seshat::CanCastSpellResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CanCastSpellResponse>> AsyncCanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CanCastSpellResponse>>(AsyncCanCastSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CanCastSpellResponse>> PrepareAsyncCanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::CanCastSpellResponse>>(PrepareAsyncCanCastSpellRaw(context, request, cq));
    }
    ::grpc::Status GetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::seshat::GetCastingOptionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetCastingOptionsResponse>> AsyncGetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetCastingOptionsResponse>>(AsyncGetCastingOptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetCastingOptionsResponse>> PrepareAsyncGetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetCastingOptionsResponse>>(PrepareAsyncGetCastingOptionsRaw(context, request, cq));
    }
    ::grpc::Status GetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::seshat::GetSpellSlotsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellSlotsResponse>> AsyncGetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellSlotsResponse>>(AsyncGetSpellSlotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellSlotsResponse>> PrepareAsyncGetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellSlotsResponse>>(PrepareAsyncGetSpellSlotsRaw(context, request, cq));
    }
    ::grpc::Status UpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::seshat::UpdateSpellSlotsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateSpellSlotsResponse>> AsyncUpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateSpellSlotsResponse>>(AsyncUpdateSpellSlotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateSpellSlotsResponse>> PrepareAsyncUpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UpdateSpellSlotsResponse>>(PrepareAsyncUpdateSpellSlotsRaw(context, request, cq));
    }
    ::grpc::Status GetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::seshat::GetPreparedSpellsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetPreparedSpellsResponse>> AsyncGetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetPreparedSpellsResponse>>(AsyncGetPreparedSpellsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetPreparedSpellsResponse>> PrepareAsyncGetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetPreparedSpellsResponse>>(PrepareAsyncGetPreparedSpellsRaw(context, request, cq));
    }
    ::grpc::Status PrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::seshat::PrepareSpellResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::PrepareSpellResponse>> AsyncPrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::PrepareSpellResponse>>(AsyncPrepareSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::PrepareSpellResponse>> PrepareAsyncPrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::PrepareSpellResponse>>(PrepareAsyncPrepareSpellRaw(context, request, cq));
    }
    ::grpc::Status UnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::seshat::UnprepareSpellResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UnprepareSpellResponse>> AsyncUnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UnprepareSpellResponse>>(AsyncUnprepareSpellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UnprepareSpellResponse>> PrepareAsyncUnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::UnprepareSpellResponse>>(PrepareAsyncUnprepareSpellRaw(context, request, cq));
    }
    ::grpc::Status StartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::seshat::StartConcentrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::StartConcentrationResponse>> AsyncStartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::StartConcentrationResponse>>(AsyncStartConcentrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::StartConcentrationResponse>> PrepareAsyncStartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::StartConcentrationResponse>>(PrepareAsyncStartConcentrationRaw(context, request, cq));
    }
    ::grpc::Status EndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::seshat::EndConcentrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::EndConcentrationResponse>> AsyncEndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::EndConcentrationResponse>>(AsyncEndConcentrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::EndConcentrationResponse>> PrepareAsyncEndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::EndConcentrationResponse>>(PrepareAsyncEndConcentrationRaw(context, request, cq));
    }
    ::grpc::Status GetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::seshat::GetConcentrationStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetConcentrationStatusResponse>> AsyncGetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetConcentrationStatusResponse>>(AsyncGetConcentrationStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetConcentrationStatusResponse>> PrepareAsyncGetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetConcentrationStatusResponse>>(PrepareAsyncGetConcentrationStatusRaw(context, request, cq));
    }
    ::grpc::Status MakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::seshat::MakeConcentrationCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::MakeConcentrationCheckResponse>> AsyncMakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::MakeConcentrationCheckResponse>>(AsyncMakeConcentrationCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::MakeConcentrationCheckResponse>> PrepareAsyncMakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::MakeConcentrationCheckResponse>>(PrepareAsyncMakeConcentrationCheckRaw(context, request, cq));
    }
    ::grpc::Status GetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::seshat::GetSpellTargetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellTargetsResponse>> AsyncGetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellTargetsResponse>>(AsyncGetSpellTargetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellTargetsResponse>> PrepareAsyncGetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellTargetsResponse>>(PrepareAsyncGetSpellTargetsRaw(context, request, cq));
    }
    ::grpc::Status ApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::seshat::ApplySpellEffectsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ApplySpellEffectsResponse>> AsyncApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ApplySpellEffectsResponse>>(AsyncApplySpellEffectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ApplySpellEffectsResponse>> PrepareAsyncApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::ApplySpellEffectsResponse>>(PrepareAsyncApplySpellEffectsRaw(context, request, cq));
    }
    ::grpc::Status GetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::seshat::GetSpellAreasResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellAreasResponse>> AsyncGetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellAreasResponse>>(AsyncGetSpellAreasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellAreasResponse>> PrepareAsyncGetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellAreasResponse>>(PrepareAsyncGetSpellAreasRaw(context, request, cq));
    }
    ::grpc::Status GetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::seshat::GetSpellHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellHistoryResponse>> AsyncGetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellHistoryResponse>>(AsyncGetSpellHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellHistoryResponse>> PrepareAsyncGetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellHistoryResponse>>(PrepareAsyncGetSpellHistoryRaw(context, request, cq));
    }
    ::grpc::Status GetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::seshat::GetActiveSpellsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetActiveSpellsResponse>> AsyncGetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetActiveSpellsResponse>>(AsyncGetActiveSpellsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetActiveSpellsResponse>> PrepareAsyncGetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::seshat::GetActiveSpellsResponse>>(PrepareAsyncGetActiveSpellsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest* request, ::seshat::GetSpellResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpell(::grpc::ClientContext* context, const ::seshat::GetSpellRequest* request, ::seshat::GetSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest* request, ::seshat::ListSpellsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSpells(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest* request, ::seshat::ListSpellsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest* request, ::seshat::CreateCustomSpellResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCustomSpell(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest* request, ::seshat::CreateCustomSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest* request, ::seshat::CastSpellResponse* response, std::function<void(::grpc::Status)>) override;
      void CastSpell(::grpc::ClientContext* context, const ::seshat::CastSpellRequest* request, ::seshat::CastSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest* request, ::seshat::CanCastSpellResponse* response, std::function<void(::grpc::Status)>) override;
      void CanCastSpell(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest* request, ::seshat::CanCastSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest* request, ::seshat::GetCastingOptionsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCastingOptions(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest* request, ::seshat::GetCastingOptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest* request, ::seshat::GetSpellSlotsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpellSlots(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest* request, ::seshat::GetSpellSlotsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest* request, ::seshat::UpdateSpellSlotsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateSpellSlots(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest* request, ::seshat::UpdateSpellSlotsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest* request, ::seshat::GetPreparedSpellsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPreparedSpells(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest* request, ::seshat::GetPreparedSpellsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest* request, ::seshat::PrepareSpellResponse* response, std::function<void(::grpc::Status)>) override;
      void PrepareSpell(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest* request, ::seshat::PrepareSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest* request, ::seshat::UnprepareSpellResponse* response, std::function<void(::grpc::Status)>) override;
      void UnprepareSpell(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest* request, ::seshat::UnprepareSpellResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest* request, ::seshat::StartConcentrationResponse* response, std::function<void(::grpc::Status)>) override;
      void StartConcentration(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest* request, ::seshat::StartConcentrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest* request, ::seshat::EndConcentrationResponse* response, std::function<void(::grpc::Status)>) override;
      void EndConcentration(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest* request, ::seshat::EndConcentrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest* request, ::seshat::GetConcentrationStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetConcentrationStatus(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest* request, ::seshat::GetConcentrationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest* request, ::seshat::MakeConcentrationCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void MakeConcentrationCheck(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest* request, ::seshat::MakeConcentrationCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest* request, ::seshat::GetSpellTargetsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpellTargets(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest* request, ::seshat::GetSpellTargetsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest* request, ::seshat::ApplySpellEffectsResponse* response, std::function<void(::grpc::Status)>) override;
      void ApplySpellEffects(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest* request, ::seshat::ApplySpellEffectsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest* request, ::seshat::GetSpellAreasResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpellAreas(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest* request, ::seshat::GetSpellAreasResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest* request, ::seshat::GetSpellHistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpellHistory(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest* request, ::seshat::GetSpellHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest* request, ::seshat::GetActiveSpellsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetActiveSpells(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest* request, ::seshat::GetActiveSpellsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellResponse>* AsyncGetSpellRaw(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellResponse>* PrepareAsyncGetSpellRaw(::grpc::ClientContext* context, const ::seshat::GetSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::ListSpellsResponse>* AsyncListSpellsRaw(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::ListSpellsResponse>* PrepareAsyncListSpellsRaw(::grpc::ClientContext* context, const ::seshat::ListSpellsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CreateCustomSpellResponse>* AsyncCreateCustomSpellRaw(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CreateCustomSpellResponse>* PrepareAsyncCreateCustomSpellRaw(::grpc::ClientContext* context, const ::seshat::CreateCustomSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CastSpellResponse>* AsyncCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CastSpellResponse>* PrepareAsyncCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CastSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CanCastSpellResponse>* AsyncCanCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::CanCastSpellResponse>* PrepareAsyncCanCastSpellRaw(::grpc::ClientContext* context, const ::seshat::CanCastSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetCastingOptionsResponse>* AsyncGetCastingOptionsRaw(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetCastingOptionsResponse>* PrepareAsyncGetCastingOptionsRaw(::grpc::ClientContext* context, const ::seshat::GetCastingOptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellSlotsResponse>* AsyncGetSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellSlotsResponse>* PrepareAsyncGetSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::UpdateSpellSlotsResponse>* AsyncUpdateSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::UpdateSpellSlotsResponse>* PrepareAsyncUpdateSpellSlotsRaw(::grpc::ClientContext* context, const ::seshat::UpdateSpellSlotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetPreparedSpellsResponse>* AsyncGetPreparedSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetPreparedSpellsResponse>* PrepareAsyncGetPreparedSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetPreparedSpellsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::PrepareSpellResponse>* AsyncPrepareSpellRaw(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::PrepareSpellResponse>* PrepareAsyncPrepareSpellRaw(::grpc::ClientContext* context, const ::seshat::PrepareSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::UnprepareSpellResponse>* AsyncUnprepareSpellRaw(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::UnprepareSpellResponse>* PrepareAsyncUnprepareSpellRaw(::grpc::ClientContext* context, const ::seshat::UnprepareSpellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::StartConcentrationResponse>* AsyncStartConcentrationRaw(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::StartConcentrationResponse>* PrepareAsyncStartConcentrationRaw(::grpc::ClientContext* context, const ::seshat::StartConcentrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::EndConcentrationResponse>* AsyncEndConcentrationRaw(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::EndConcentrationResponse>* PrepareAsyncEndConcentrationRaw(::grpc::ClientContext* context, const ::seshat::EndConcentrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetConcentrationStatusResponse>* AsyncGetConcentrationStatusRaw(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetConcentrationStatusResponse>* PrepareAsyncGetConcentrationStatusRaw(::grpc::ClientContext* context, const ::seshat::GetConcentrationStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::MakeConcentrationCheckResponse>* AsyncMakeConcentrationCheckRaw(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::MakeConcentrationCheckResponse>* PrepareAsyncMakeConcentrationCheckRaw(::grpc::ClientContext* context, const ::seshat::MakeConcentrationCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellTargetsResponse>* AsyncGetSpellTargetsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellTargetsResponse>* PrepareAsyncGetSpellTargetsRaw(::grpc::ClientContext* context, const ::seshat::GetSpellTargetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::ApplySpellEffectsResponse>* AsyncApplySpellEffectsRaw(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::ApplySpellEffectsResponse>* PrepareAsyncApplySpellEffectsRaw(::grpc::ClientContext* context, const ::seshat::ApplySpellEffectsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellAreasResponse>* AsyncGetSpellAreasRaw(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellAreasResponse>* PrepareAsyncGetSpellAreasRaw(::grpc::ClientContext* context, const ::seshat::GetSpellAreasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellHistoryResponse>* AsyncGetSpellHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetSpellHistoryResponse>* PrepareAsyncGetSpellHistoryRaw(::grpc::ClientContext* context, const ::seshat::GetSpellHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetActiveSpellsResponse>* AsyncGetActiveSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::seshat::GetActiveSpellsResponse>* PrepareAsyncGetActiveSpellsRaw(::grpc::ClientContext* context, const ::seshat::GetActiveSpellsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpell_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSpells_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCustomSpell_;
    const ::grpc::internal::RpcMethod rpcmethod_CastSpell_;
    const ::grpc::internal::RpcMethod rpcmethod_CanCastSpell_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCastingOptions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpellSlots_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSpellSlots_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPreparedSpells_;
    const ::grpc::internal::RpcMethod rpcmethod_PrepareSpell_;
    const ::grpc::internal::RpcMethod rpcmethod_UnprepareSpell_;
    const ::grpc::internal::RpcMethod rpcmethod_StartConcentration_;
    const ::grpc::internal::RpcMethod rpcmethod_EndConcentration_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConcentrationStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_MakeConcentrationCheck_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpellTargets_;
    const ::grpc::internal::RpcMethod rpcmethod_ApplySpellEffects_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpellAreas_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpellHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_GetActiveSpells_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Spell management
    virtual ::grpc::Status GetSpell(::grpc::ServerContext* context, const ::seshat::GetSpellRequest* request, ::seshat::GetSpellResponse* response);
    virtual ::grpc::Status ListSpells(::grpc::ServerContext* context, const ::seshat::ListSpellsRequest* request, ::seshat::ListSpellsResponse* response);
    virtual ::grpc::Status CreateCustomSpell(::grpc::ServerContext* context, const ::seshat::CreateCustomSpellRequest* request, ::seshat::CreateCustomSpellResponse* response);
    // Spell casting
    virtual ::grpc::Status CastSpell(::grpc::ServerContext* context, const ::seshat::CastSpellRequest* request, ::seshat::CastSpellResponse* response);
    virtual ::grpc::Status CanCastSpell(::grpc::ServerContext* context, const ::seshat::CanCastSpellRequest* request, ::seshat::CanCastSpellResponse* response);
    virtual ::grpc::Status GetCastingOptions(::grpc::ServerContext* context, const ::seshat::GetCastingOptionsRequest* request, ::seshat::GetCastingOptionsResponse* response);
    // Spell slots and preparation
    virtual ::grpc::Status GetSpellSlots(::grpc::ServerContext* context, const ::seshat::GetSpellSlotsRequest* request, ::seshat::GetSpellSlotsResponse* response);
    virtual ::grpc::Status UpdateSpellSlots(::grpc::ServerContext* context, const ::seshat::UpdateSpellSlotsRequest* request, ::seshat::UpdateSpellSlotsResponse* response);
    virtual ::grpc::Status GetPreparedSpells(::grpc::ServerContext* context, const ::seshat::GetPreparedSpellsRequest* request, ::seshat::GetPreparedSpellsResponse* response);
    virtual ::grpc::Status PrepareSpell(::grpc::ServerContext* context, const ::seshat::PrepareSpellRequest* request, ::seshat::PrepareSpellResponse* response);
    virtual ::grpc::Status UnprepareSpell(::grpc::ServerContext* context, const ::seshat::UnprepareSpellRequest* request, ::seshat::UnprepareSpellResponse* response);
    // Concentration management
    virtual ::grpc::Status StartConcentration(::grpc::ServerContext* context, const ::seshat::StartConcentrationRequest* request, ::seshat::StartConcentrationResponse* response);
    virtual ::grpc::Status EndConcentration(::grpc::ServerContext* context, const ::seshat::EndConcentrationRequest* request, ::seshat::EndConcentrationResponse* response);
    virtual ::grpc::Status GetConcentrationStatus(::grpc::ServerContext* context, const ::seshat::GetConcentrationStatusRequest* request, ::seshat::GetConcentrationStatusResponse* response);
    virtual ::grpc::Status MakeConcentrationCheck(::grpc::ServerContext* context, const ::seshat::MakeConcentrationCheckRequest* request, ::seshat::MakeConcentrationCheckResponse* response);
    // Spell effects and targeting
    virtual ::grpc::Status GetSpellTargets(::grpc::ServerContext* context, const ::seshat::GetSpellTargetsRequest* request, ::seshat::GetSpellTargetsResponse* response);
    virtual ::grpc::Status ApplySpellEffects(::grpc::ServerContext* context, const ::seshat::ApplySpellEffectsRequest* request, ::seshat::ApplySpellEffectsResponse* response);
    virtual ::grpc::Status GetSpellAreas(::grpc::ServerContext* context, const ::seshat::GetSpellAreasRequest* request, ::seshat::GetSpellAreasResponse* response);
    // Spell history and tracking
    virtual ::grpc::Status GetSpellHistory(::grpc::ServerContext* context, const ::seshat::GetSpellHistoryRequest* request, ::seshat::GetSpellHistoryResponse* response);
    virtual ::grpc::Status GetActiveSpells(::grpc::ServerContext* context, const ::seshat::GetActiveSpellsRequest* request, ::seshat::GetActiveSpellsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSpell() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpell(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellRequest* /*request*/, ::seshat::GetSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpell(::grpc::ServerContext* context, ::seshat::GetSpellRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetSpellResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSpells() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpells(::grpc::ServerContext* /*context*/, const ::seshat::ListSpellsRequest* /*request*/, ::seshat::ListSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSpells(::grpc::ServerContext* context, ::seshat::ListSpellsRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::ListSpellsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCustomSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCustomSpell() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateCustomSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomSpell(::grpc::ServerContext* /*context*/, const ::seshat::CreateCustomSpellRequest* /*request*/, ::seshat::CreateCustomSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCustomSpell(::grpc::ServerContext* context, ::seshat::CreateCustomSpellRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::CreateCustomSpellResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CastSpell() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CastSpellRequest* /*request*/, ::seshat::CastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCastSpell(::grpc::ServerContext* context, ::seshat::CastSpellRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::CastSpellResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CanCastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CanCastSpell() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CanCastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CanCastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CanCastSpellRequest* /*request*/, ::seshat::CanCastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCanCastSpell(::grpc::ServerContext* context, ::seshat::CanCastSpellRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::CanCastSpellResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCastingOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCastingOptions() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetCastingOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCastingOptions(::grpc::ServerContext* /*context*/, const ::seshat::GetCastingOptionsRequest* /*request*/, ::seshat::GetCastingOptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCastingOptions(::grpc::ServerContext* context, ::seshat::GetCastingOptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetCastingOptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSpellSlots() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellSlotsRequest* /*request*/, ::seshat::GetSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpellSlots(::grpc::ServerContext* context, ::seshat::GetSpellSlotsRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetSpellSlotsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSpellSlots() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UpdateSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::UpdateSpellSlotsRequest* /*request*/, ::seshat::UpdateSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSpellSlots(::grpc::ServerContext* context, ::seshat::UpdateSpellSlotsRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::UpdateSpellSlotsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPreparedSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPreparedSpells() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetPreparedSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPreparedSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetPreparedSpellsRequest* /*request*/, ::seshat::GetPreparedSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPreparedSpells(::grpc::ServerContext* context, ::seshat::GetPreparedSpellsRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetPreparedSpellsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PrepareSpell() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_PrepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::PrepareSpellRequest* /*request*/, ::seshat::PrepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepareSpell(::grpc::ServerContext* context, ::seshat::PrepareSpellRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::PrepareSpellResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnprepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnprepareSpell() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_UnprepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnprepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::UnprepareSpellRequest* /*request*/, ::seshat::UnprepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnprepareSpell(::grpc::ServerContext* context, ::seshat::UnprepareSpellRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::UnprepareSpellResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartConcentration() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_StartConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartConcentration(::grpc::ServerContext* /*context*/, const ::seshat::StartConcentrationRequest* /*request*/, ::seshat::StartConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartConcentration(::grpc::ServerContext* context, ::seshat::StartConcentrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::StartConcentrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndConcentration() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_EndConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndConcentration(::grpc::ServerContext* /*context*/, const ::seshat::EndConcentrationRequest* /*request*/, ::seshat::EndConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndConcentration(::grpc::ServerContext* context, ::seshat::EndConcentrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::EndConcentrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConcentrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConcentrationStatus() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetConcentrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConcentrationStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetConcentrationStatusRequest* /*request*/, ::seshat::GetConcentrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConcentrationStatus(::grpc::ServerContext* context, ::seshat::GetConcentrationStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetConcentrationStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MakeConcentrationCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MakeConcentrationCheck() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_MakeConcentrationCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeConcentrationCheck(::grpc::ServerContext* /*context*/, const ::seshat::MakeConcentrationCheckRequest* /*request*/, ::seshat::MakeConcentrationCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeConcentrationCheck(::grpc::ServerContext* context, ::seshat::MakeConcentrationCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::MakeConcentrationCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpellTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSpellTargets() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetSpellTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellTargets(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellTargetsRequest* /*request*/, ::seshat::GetSpellTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpellTargets(::grpc::ServerContext* context, ::seshat::GetSpellTargetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetSpellTargetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ApplySpellEffects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ApplySpellEffects() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_ApplySpellEffects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplySpellEffects(::grpc::ServerContext* /*context*/, const ::seshat::ApplySpellEffectsRequest* /*request*/, ::seshat::ApplySpellEffectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplySpellEffects(::grpc::ServerContext* context, ::seshat::ApplySpellEffectsRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::ApplySpellEffectsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpellAreas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSpellAreas() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetSpellAreas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellAreas(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellAreasRequest* /*request*/, ::seshat::GetSpellAreasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpellAreas(::grpc::ServerContext* context, ::seshat::GetSpellAreasRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetSpellAreasResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpellHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSpellHistory() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetSpellHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellHistoryRequest* /*request*/, ::seshat::GetSpellHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpellHistory(::grpc::ServerContext* context, ::seshat::GetSpellHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetSpellHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetActiveSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetActiveSpells() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GetActiveSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActiveSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetActiveSpellsRequest* /*request*/, ::seshat::GetActiveSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActiveSpells(::grpc::ServerContext* context, ::seshat::GetActiveSpellsRequest* request, ::grpc::ServerAsyncResponseWriter< ::seshat::GetActiveSpellsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSpell<WithAsyncMethod_ListSpells<WithAsyncMethod_CreateCustomSpell<WithAsyncMethod_CastSpell<WithAsyncMethod_CanCastSpell<WithAsyncMethod_GetCastingOptions<WithAsyncMethod_GetSpellSlots<WithAsyncMethod_UpdateSpellSlots<WithAsyncMethod_GetPreparedSpells<WithAsyncMethod_PrepareSpell<WithAsyncMethod_UnprepareSpell<WithAsyncMethod_StartConcentration<WithAsyncMethod_EndConcentration<WithAsyncMethod_GetConcentrationStatus<WithAsyncMethod_MakeConcentrationCheck<WithAsyncMethod_GetSpellTargets<WithAsyncMethod_ApplySpellEffects<WithAsyncMethod_GetSpellAreas<WithAsyncMethod_GetSpellHistory<WithAsyncMethod_GetActiveSpells<Service > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSpell() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetSpellRequest, ::seshat::GetSpellResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetSpellRequest* request, ::seshat::GetSpellResponse* response) { return this->GetSpell(context, request, response); }));}
    void SetMessageAllocatorFor_GetSpell(
        ::grpc::MessageAllocator< ::seshat::GetSpellRequest, ::seshat::GetSpellResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetSpellRequest, ::seshat::GetSpellResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpell(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellRequest* /*request*/, ::seshat::GetSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetSpellRequest* /*request*/, ::seshat::GetSpellResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListSpells() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::ListSpellsRequest, ::seshat::ListSpellsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::ListSpellsRequest* request, ::seshat::ListSpellsResponse* response) { return this->ListSpells(context, request, response); }));}
    void SetMessageAllocatorFor_ListSpells(
        ::grpc::MessageAllocator< ::seshat::ListSpellsRequest, ::seshat::ListSpellsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::ListSpellsRequest, ::seshat::ListSpellsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpells(::grpc::ServerContext* /*context*/, const ::seshat::ListSpellsRequest* /*request*/, ::seshat::ListSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSpells(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::ListSpellsRequest* /*request*/, ::seshat::ListSpellsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCustomSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCustomSpell() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::CreateCustomSpellRequest, ::seshat::CreateCustomSpellResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::CreateCustomSpellRequest* request, ::seshat::CreateCustomSpellResponse* response) { return this->CreateCustomSpell(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCustomSpell(
        ::grpc::MessageAllocator< ::seshat::CreateCustomSpellRequest, ::seshat::CreateCustomSpellResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::CreateCustomSpellRequest, ::seshat::CreateCustomSpellResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCustomSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomSpell(::grpc::ServerContext* /*context*/, const ::seshat::CreateCustomSpellRequest* /*request*/, ::seshat::CreateCustomSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCustomSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::CreateCustomSpellRequest* /*request*/, ::seshat::CreateCustomSpellResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CastSpell() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::CastSpellRequest, ::seshat::CastSpellResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::CastSpellRequest* request, ::seshat::CastSpellResponse* response) { return this->CastSpell(context, request, response); }));}
    void SetMessageAllocatorFor_CastSpell(
        ::grpc::MessageAllocator< ::seshat::CastSpellRequest, ::seshat::CastSpellResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::CastSpellRequest, ::seshat::CastSpellResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CastSpellRequest* /*request*/, ::seshat::CastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CastSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::CastSpellRequest* /*request*/, ::seshat::CastSpellResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CanCastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CanCastSpell() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::CanCastSpellRequest, ::seshat::CanCastSpellResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::CanCastSpellRequest* request, ::seshat::CanCastSpellResponse* response) { return this->CanCastSpell(context, request, response); }));}
    void SetMessageAllocatorFor_CanCastSpell(
        ::grpc::MessageAllocator< ::seshat::CanCastSpellRequest, ::seshat::CanCastSpellResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::CanCastSpellRequest, ::seshat::CanCastSpellResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CanCastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CanCastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CanCastSpellRequest* /*request*/, ::seshat::CanCastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CanCastSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::CanCastSpellRequest* /*request*/, ::seshat::CanCastSpellResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCastingOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCastingOptions() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetCastingOptionsRequest, ::seshat::GetCastingOptionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetCastingOptionsRequest* request, ::seshat::GetCastingOptionsResponse* response) { return this->GetCastingOptions(context, request, response); }));}
    void SetMessageAllocatorFor_GetCastingOptions(
        ::grpc::MessageAllocator< ::seshat::GetCastingOptionsRequest, ::seshat::GetCastingOptionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetCastingOptionsRequest, ::seshat::GetCastingOptionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCastingOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCastingOptions(::grpc::ServerContext* /*context*/, const ::seshat::GetCastingOptionsRequest* /*request*/, ::seshat::GetCastingOptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCastingOptions(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetCastingOptionsRequest* /*request*/, ::seshat::GetCastingOptionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSpellSlots() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetSpellSlotsRequest, ::seshat::GetSpellSlotsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetSpellSlotsRequest* request, ::seshat::GetSpellSlotsResponse* response) { return this->GetSpellSlots(context, request, response); }));}
    void SetMessageAllocatorFor_GetSpellSlots(
        ::grpc::MessageAllocator< ::seshat::GetSpellSlotsRequest, ::seshat::GetSpellSlotsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetSpellSlotsRequest, ::seshat::GetSpellSlotsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellSlotsRequest* /*request*/, ::seshat::GetSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpellSlots(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetSpellSlotsRequest* /*request*/, ::seshat::GetSpellSlotsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateSpellSlots() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::UpdateSpellSlotsRequest, ::seshat::UpdateSpellSlotsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::UpdateSpellSlotsRequest* request, ::seshat::UpdateSpellSlotsResponse* response) { return this->UpdateSpellSlots(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSpellSlots(
        ::grpc::MessageAllocator< ::seshat::UpdateSpellSlotsRequest, ::seshat::UpdateSpellSlotsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::UpdateSpellSlotsRequest, ::seshat::UpdateSpellSlotsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::UpdateSpellSlotsRequest* /*request*/, ::seshat::UpdateSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSpellSlots(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::UpdateSpellSlotsRequest* /*request*/, ::seshat::UpdateSpellSlotsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPreparedSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPreparedSpells() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetPreparedSpellsRequest, ::seshat::GetPreparedSpellsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetPreparedSpellsRequest* request, ::seshat::GetPreparedSpellsResponse* response) { return this->GetPreparedSpells(context, request, response); }));}
    void SetMessageAllocatorFor_GetPreparedSpells(
        ::grpc::MessageAllocator< ::seshat::GetPreparedSpellsRequest, ::seshat::GetPreparedSpellsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetPreparedSpellsRequest, ::seshat::GetPreparedSpellsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPreparedSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPreparedSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetPreparedSpellsRequest* /*request*/, ::seshat::GetPreparedSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPreparedSpells(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetPreparedSpellsRequest* /*request*/, ::seshat::GetPreparedSpellsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PrepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PrepareSpell() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::PrepareSpellRequest, ::seshat::PrepareSpellResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::PrepareSpellRequest* request, ::seshat::PrepareSpellResponse* response) { return this->PrepareSpell(context, request, response); }));}
    void SetMessageAllocatorFor_PrepareSpell(
        ::grpc::MessageAllocator< ::seshat::PrepareSpellRequest, ::seshat::PrepareSpellResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::PrepareSpellRequest, ::seshat::PrepareSpellResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PrepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::PrepareSpellRequest* /*request*/, ::seshat::PrepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrepareSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::PrepareSpellRequest* /*request*/, ::seshat::PrepareSpellResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnprepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnprepareSpell() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::UnprepareSpellRequest, ::seshat::UnprepareSpellResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::UnprepareSpellRequest* request, ::seshat::UnprepareSpellResponse* response) { return this->UnprepareSpell(context, request, response); }));}
    void SetMessageAllocatorFor_UnprepareSpell(
        ::grpc::MessageAllocator< ::seshat::UnprepareSpellRequest, ::seshat::UnprepareSpellResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::UnprepareSpellRequest, ::seshat::UnprepareSpellResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnprepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnprepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::UnprepareSpellRequest* /*request*/, ::seshat::UnprepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnprepareSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::UnprepareSpellRequest* /*request*/, ::seshat::UnprepareSpellResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StartConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartConcentration() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::StartConcentrationRequest, ::seshat::StartConcentrationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::StartConcentrationRequest* request, ::seshat::StartConcentrationResponse* response) { return this->StartConcentration(context, request, response); }));}
    void SetMessageAllocatorFor_StartConcentration(
        ::grpc::MessageAllocator< ::seshat::StartConcentrationRequest, ::seshat::StartConcentrationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::StartConcentrationRequest, ::seshat::StartConcentrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartConcentration(::grpc::ServerContext* /*context*/, const ::seshat::StartConcentrationRequest* /*request*/, ::seshat::StartConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartConcentration(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::StartConcentrationRequest* /*request*/, ::seshat::StartConcentrationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EndConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EndConcentration() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::EndConcentrationRequest, ::seshat::EndConcentrationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::EndConcentrationRequest* request, ::seshat::EndConcentrationResponse* response) { return this->EndConcentration(context, request, response); }));}
    void SetMessageAllocatorFor_EndConcentration(
        ::grpc::MessageAllocator< ::seshat::EndConcentrationRequest, ::seshat::EndConcentrationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::EndConcentrationRequest, ::seshat::EndConcentrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EndConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndConcentration(::grpc::ServerContext* /*context*/, const ::seshat::EndConcentrationRequest* /*request*/, ::seshat::EndConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndConcentration(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::EndConcentrationRequest* /*request*/, ::seshat::EndConcentrationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetConcentrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetConcentrationStatus() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetConcentrationStatusRequest, ::seshat::GetConcentrationStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetConcentrationStatusRequest* request, ::seshat::GetConcentrationStatusResponse* response) { return this->GetConcentrationStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetConcentrationStatus(
        ::grpc::MessageAllocator< ::seshat::GetConcentrationStatusRequest, ::seshat::GetConcentrationStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetConcentrationStatusRequest, ::seshat::GetConcentrationStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetConcentrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConcentrationStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetConcentrationStatusRequest* /*request*/, ::seshat::GetConcentrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConcentrationStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetConcentrationStatusRequest* /*request*/, ::seshat::GetConcentrationStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MakeConcentrationCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MakeConcentrationCheck() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::MakeConcentrationCheckRequest, ::seshat::MakeConcentrationCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::MakeConcentrationCheckRequest* request, ::seshat::MakeConcentrationCheckResponse* response) { return this->MakeConcentrationCheck(context, request, response); }));}
    void SetMessageAllocatorFor_MakeConcentrationCheck(
        ::grpc::MessageAllocator< ::seshat::MakeConcentrationCheckRequest, ::seshat::MakeConcentrationCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::MakeConcentrationCheckRequest, ::seshat::MakeConcentrationCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MakeConcentrationCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeConcentrationCheck(::grpc::ServerContext* /*context*/, const ::seshat::MakeConcentrationCheckRequest* /*request*/, ::seshat::MakeConcentrationCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MakeConcentrationCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::MakeConcentrationCheckRequest* /*request*/, ::seshat::MakeConcentrationCheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSpellTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSpellTargets() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetSpellTargetsRequest, ::seshat::GetSpellTargetsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetSpellTargetsRequest* request, ::seshat::GetSpellTargetsResponse* response) { return this->GetSpellTargets(context, request, response); }));}
    void SetMessageAllocatorFor_GetSpellTargets(
        ::grpc::MessageAllocator< ::seshat::GetSpellTargetsRequest, ::seshat::GetSpellTargetsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetSpellTargetsRequest, ::seshat::GetSpellTargetsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSpellTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellTargets(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellTargetsRequest* /*request*/, ::seshat::GetSpellTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpellTargets(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetSpellTargetsRequest* /*request*/, ::seshat::GetSpellTargetsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ApplySpellEffects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ApplySpellEffects() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::ApplySpellEffectsRequest, ::seshat::ApplySpellEffectsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::ApplySpellEffectsRequest* request, ::seshat::ApplySpellEffectsResponse* response) { return this->ApplySpellEffects(context, request, response); }));}
    void SetMessageAllocatorFor_ApplySpellEffects(
        ::grpc::MessageAllocator< ::seshat::ApplySpellEffectsRequest, ::seshat::ApplySpellEffectsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::ApplySpellEffectsRequest, ::seshat::ApplySpellEffectsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ApplySpellEffects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplySpellEffects(::grpc::ServerContext* /*context*/, const ::seshat::ApplySpellEffectsRequest* /*request*/, ::seshat::ApplySpellEffectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplySpellEffects(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::ApplySpellEffectsRequest* /*request*/, ::seshat::ApplySpellEffectsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSpellAreas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSpellAreas() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetSpellAreasRequest, ::seshat::GetSpellAreasResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetSpellAreasRequest* request, ::seshat::GetSpellAreasResponse* response) { return this->GetSpellAreas(context, request, response); }));}
    void SetMessageAllocatorFor_GetSpellAreas(
        ::grpc::MessageAllocator< ::seshat::GetSpellAreasRequest, ::seshat::GetSpellAreasResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetSpellAreasRequest, ::seshat::GetSpellAreasResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSpellAreas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellAreas(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellAreasRequest* /*request*/, ::seshat::GetSpellAreasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpellAreas(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetSpellAreasRequest* /*request*/, ::seshat::GetSpellAreasResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSpellHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSpellHistory() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetSpellHistoryRequest, ::seshat::GetSpellHistoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetSpellHistoryRequest* request, ::seshat::GetSpellHistoryResponse* response) { return this->GetSpellHistory(context, request, response); }));}
    void SetMessageAllocatorFor_GetSpellHistory(
        ::grpc::MessageAllocator< ::seshat::GetSpellHistoryRequest, ::seshat::GetSpellHistoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetSpellHistoryRequest, ::seshat::GetSpellHistoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSpellHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellHistoryRequest* /*request*/, ::seshat::GetSpellHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpellHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetSpellHistoryRequest* /*request*/, ::seshat::GetSpellHistoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetActiveSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetActiveSpells() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::seshat::GetActiveSpellsRequest, ::seshat::GetActiveSpellsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::seshat::GetActiveSpellsRequest* request, ::seshat::GetActiveSpellsResponse* response) { return this->GetActiveSpells(context, request, response); }));}
    void SetMessageAllocatorFor_GetActiveSpells(
        ::grpc::MessageAllocator< ::seshat::GetActiveSpellsRequest, ::seshat::GetActiveSpellsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::seshat::GetActiveSpellsRequest, ::seshat::GetActiveSpellsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetActiveSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActiveSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetActiveSpellsRequest* /*request*/, ::seshat::GetActiveSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetActiveSpells(
      ::grpc::CallbackServerContext* /*context*/, const ::seshat::GetActiveSpellsRequest* /*request*/, ::seshat::GetActiveSpellsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetSpell<WithCallbackMethod_ListSpells<WithCallbackMethod_CreateCustomSpell<WithCallbackMethod_CastSpell<WithCallbackMethod_CanCastSpell<WithCallbackMethod_GetCastingOptions<WithCallbackMethod_GetSpellSlots<WithCallbackMethod_UpdateSpellSlots<WithCallbackMethod_GetPreparedSpells<WithCallbackMethod_PrepareSpell<WithCallbackMethod_UnprepareSpell<WithCallbackMethod_StartConcentration<WithCallbackMethod_EndConcentration<WithCallbackMethod_GetConcentrationStatus<WithCallbackMethod_MakeConcentrationCheck<WithCallbackMethod_GetSpellTargets<WithCallbackMethod_ApplySpellEffects<WithCallbackMethod_GetSpellAreas<WithCallbackMethod_GetSpellHistory<WithCallbackMethod_GetActiveSpells<Service > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSpell() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpell(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellRequest* /*request*/, ::seshat::GetSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSpells() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpells(::grpc::ServerContext* /*context*/, const ::seshat::ListSpellsRequest* /*request*/, ::seshat::ListSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCustomSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCustomSpell() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateCustomSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomSpell(::grpc::ServerContext* /*context*/, const ::seshat::CreateCustomSpellRequest* /*request*/, ::seshat::CreateCustomSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CastSpell() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CastSpellRequest* /*request*/, ::seshat::CastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CanCastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CanCastSpell() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CanCastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CanCastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CanCastSpellRequest* /*request*/, ::seshat::CanCastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCastingOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCastingOptions() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetCastingOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCastingOptions(::grpc::ServerContext* /*context*/, const ::seshat::GetCastingOptionsRequest* /*request*/, ::seshat::GetCastingOptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSpellSlots() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellSlotsRequest* /*request*/, ::seshat::GetSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSpellSlots() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UpdateSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::UpdateSpellSlotsRequest* /*request*/, ::seshat::UpdateSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPreparedSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPreparedSpells() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetPreparedSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPreparedSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetPreparedSpellsRequest* /*request*/, ::seshat::GetPreparedSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PrepareSpell() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_PrepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::PrepareSpellRequest* /*request*/, ::seshat::PrepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnprepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnprepareSpell() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_UnprepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnprepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::UnprepareSpellRequest* /*request*/, ::seshat::UnprepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartConcentration() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_StartConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartConcentration(::grpc::ServerContext* /*context*/, const ::seshat::StartConcentrationRequest* /*request*/, ::seshat::StartConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndConcentration() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_EndConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndConcentration(::grpc::ServerContext* /*context*/, const ::seshat::EndConcentrationRequest* /*request*/, ::seshat::EndConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConcentrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConcentrationStatus() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetConcentrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConcentrationStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetConcentrationStatusRequest* /*request*/, ::seshat::GetConcentrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MakeConcentrationCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MakeConcentrationCheck() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_MakeConcentrationCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeConcentrationCheck(::grpc::ServerContext* /*context*/, const ::seshat::MakeConcentrationCheckRequest* /*request*/, ::seshat::MakeConcentrationCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpellTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSpellTargets() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetSpellTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellTargets(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellTargetsRequest* /*request*/, ::seshat::GetSpellTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ApplySpellEffects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ApplySpellEffects() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_ApplySpellEffects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplySpellEffects(::grpc::ServerContext* /*context*/, const ::seshat::ApplySpellEffectsRequest* /*request*/, ::seshat::ApplySpellEffectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpellAreas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSpellAreas() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetSpellAreas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellAreas(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellAreasRequest* /*request*/, ::seshat::GetSpellAreasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpellHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSpellHistory() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetSpellHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellHistoryRequest* /*request*/, ::seshat::GetSpellHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetActiveSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetActiveSpells() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GetActiveSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActiveSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetActiveSpellsRequest* /*request*/, ::seshat::GetActiveSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSpell() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpell(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellRequest* /*request*/, ::seshat::GetSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpell(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSpells() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpells(::grpc::ServerContext* /*context*/, const ::seshat::ListSpellsRequest* /*request*/, ::seshat::ListSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSpells(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCustomSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCustomSpell() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateCustomSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomSpell(::grpc::ServerContext* /*context*/, const ::seshat::CreateCustomSpellRequest* /*request*/, ::seshat::CreateCustomSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCustomSpell(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CastSpell() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CastSpellRequest* /*request*/, ::seshat::CastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCastSpell(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CanCastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CanCastSpell() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CanCastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CanCastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CanCastSpellRequest* /*request*/, ::seshat::CanCastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCanCastSpell(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCastingOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCastingOptions() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetCastingOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCastingOptions(::grpc::ServerContext* /*context*/, const ::seshat::GetCastingOptionsRequest* /*request*/, ::seshat::GetCastingOptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCastingOptions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSpellSlots() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellSlotsRequest* /*request*/, ::seshat::GetSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpellSlots(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSpellSlots() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UpdateSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::UpdateSpellSlotsRequest* /*request*/, ::seshat::UpdateSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSpellSlots(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPreparedSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPreparedSpells() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetPreparedSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPreparedSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetPreparedSpellsRequest* /*request*/, ::seshat::GetPreparedSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPreparedSpells(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PrepareSpell() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_PrepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::PrepareSpellRequest* /*request*/, ::seshat::PrepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepareSpell(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnprepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnprepareSpell() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_UnprepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnprepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::UnprepareSpellRequest* /*request*/, ::seshat::UnprepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnprepareSpell(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartConcentration() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_StartConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartConcentration(::grpc::ServerContext* /*context*/, const ::seshat::StartConcentrationRequest* /*request*/, ::seshat::StartConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartConcentration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndConcentration() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_EndConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndConcentration(::grpc::ServerContext* /*context*/, const ::seshat::EndConcentrationRequest* /*request*/, ::seshat::EndConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndConcentration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConcentrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConcentrationStatus() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetConcentrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConcentrationStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetConcentrationStatusRequest* /*request*/, ::seshat::GetConcentrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConcentrationStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MakeConcentrationCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MakeConcentrationCheck() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_MakeConcentrationCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeConcentrationCheck(::grpc::ServerContext* /*context*/, const ::seshat::MakeConcentrationCheckRequest* /*request*/, ::seshat::MakeConcentrationCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeConcentrationCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpellTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSpellTargets() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetSpellTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellTargets(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellTargetsRequest* /*request*/, ::seshat::GetSpellTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpellTargets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ApplySpellEffects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ApplySpellEffects() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_ApplySpellEffects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplySpellEffects(::grpc::ServerContext* /*context*/, const ::seshat::ApplySpellEffectsRequest* /*request*/, ::seshat::ApplySpellEffectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplySpellEffects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpellAreas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSpellAreas() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetSpellAreas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellAreas(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellAreasRequest* /*request*/, ::seshat::GetSpellAreasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpellAreas(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpellHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSpellHistory() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetSpellHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellHistoryRequest* /*request*/, ::seshat::GetSpellHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpellHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetActiveSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetActiveSpells() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_GetActiveSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActiveSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetActiveSpellsRequest* /*request*/, ::seshat::GetActiveSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActiveSpells(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSpell() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSpell(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpell(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellRequest* /*request*/, ::seshat::GetSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListSpells() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSpells(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpells(::grpc::ServerContext* /*context*/, const ::seshat::ListSpellsRequest* /*request*/, ::seshat::ListSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSpells(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCustomSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCustomSpell() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCustomSpell(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCustomSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCustomSpell(::grpc::ServerContext* /*context*/, const ::seshat::CreateCustomSpellRequest* /*request*/, ::seshat::CreateCustomSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCustomSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CastSpell() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CastSpell(context, request, response); }));
    }
    ~WithRawCallbackMethod_CastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CastSpellRequest* /*request*/, ::seshat::CastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CastSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CanCastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CanCastSpell() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CanCastSpell(context, request, response); }));
    }
    ~WithRawCallbackMethod_CanCastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CanCastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CanCastSpellRequest* /*request*/, ::seshat::CanCastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CanCastSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCastingOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCastingOptions() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCastingOptions(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCastingOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCastingOptions(::grpc::ServerContext* /*context*/, const ::seshat::GetCastingOptionsRequest* /*request*/, ::seshat::GetCastingOptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCastingOptions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSpellSlots() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSpellSlots(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellSlotsRequest* /*request*/, ::seshat::GetSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpellSlots(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateSpellSlots() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSpellSlots(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::UpdateSpellSlotsRequest* /*request*/, ::seshat::UpdateSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSpellSlots(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPreparedSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPreparedSpells() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPreparedSpells(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPreparedSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPreparedSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetPreparedSpellsRequest* /*request*/, ::seshat::GetPreparedSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPreparedSpells(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PrepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PrepareSpell() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PrepareSpell(context, request, response); }));
    }
    ~WithRawCallbackMethod_PrepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::PrepareSpellRequest* /*request*/, ::seshat::PrepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrepareSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnprepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnprepareSpell() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnprepareSpell(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnprepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnprepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::UnprepareSpellRequest* /*request*/, ::seshat::UnprepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnprepareSpell(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartConcentration() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartConcentration(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartConcentration(::grpc::ServerContext* /*context*/, const ::seshat::StartConcentrationRequest* /*request*/, ::seshat::StartConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartConcentration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EndConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EndConcentration() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndConcentration(context, request, response); }));
    }
    ~WithRawCallbackMethod_EndConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndConcentration(::grpc::ServerContext* /*context*/, const ::seshat::EndConcentrationRequest* /*request*/, ::seshat::EndConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndConcentration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetConcentrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetConcentrationStatus() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConcentrationStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetConcentrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConcentrationStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetConcentrationStatusRequest* /*request*/, ::seshat::GetConcentrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConcentrationStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MakeConcentrationCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MakeConcentrationCheck() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MakeConcentrationCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_MakeConcentrationCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeConcentrationCheck(::grpc::ServerContext* /*context*/, const ::seshat::MakeConcentrationCheckRequest* /*request*/, ::seshat::MakeConcentrationCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MakeConcentrationCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSpellTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSpellTargets() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSpellTargets(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSpellTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellTargets(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellTargetsRequest* /*request*/, ::seshat::GetSpellTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpellTargets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ApplySpellEffects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ApplySpellEffects() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ApplySpellEffects(context, request, response); }));
    }
    ~WithRawCallbackMethod_ApplySpellEffects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplySpellEffects(::grpc::ServerContext* /*context*/, const ::seshat::ApplySpellEffectsRequest* /*request*/, ::seshat::ApplySpellEffectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplySpellEffects(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSpellAreas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSpellAreas() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSpellAreas(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSpellAreas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellAreas(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellAreasRequest* /*request*/, ::seshat::GetSpellAreasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpellAreas(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSpellHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSpellHistory() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSpellHistory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSpellHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpellHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellHistoryRequest* /*request*/, ::seshat::GetSpellHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSpellHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetActiveSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetActiveSpells() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetActiveSpells(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetActiveSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActiveSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetActiveSpellsRequest* /*request*/, ::seshat::GetActiveSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetActiveSpells(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSpell() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetSpellRequest, ::seshat::GetSpellResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetSpellRequest, ::seshat::GetSpellResponse>* streamer) {
                       return this->StreamedGetSpell(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpell(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellRequest* /*request*/, ::seshat::GetSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpell(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetSpellRequest,::seshat::GetSpellResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSpells() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::ListSpellsRequest, ::seshat::ListSpellsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::ListSpellsRequest, ::seshat::ListSpellsResponse>* streamer) {
                       return this->StreamedListSpells(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSpells(::grpc::ServerContext* /*context*/, const ::seshat::ListSpellsRequest* /*request*/, ::seshat::ListSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSpells(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::ListSpellsRequest,::seshat::ListSpellsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCustomSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCustomSpell() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::CreateCustomSpellRequest, ::seshat::CreateCustomSpellResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::CreateCustomSpellRequest, ::seshat::CreateCustomSpellResponse>* streamer) {
                       return this->StreamedCreateCustomSpell(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCustomSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCustomSpell(::grpc::ServerContext* /*context*/, const ::seshat::CreateCustomSpellRequest* /*request*/, ::seshat::CreateCustomSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCustomSpell(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::CreateCustomSpellRequest,::seshat::CreateCustomSpellResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CastSpell() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::CastSpellRequest, ::seshat::CastSpellResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::CastSpellRequest, ::seshat::CastSpellResponse>* streamer) {
                       return this->StreamedCastSpell(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CastSpellRequest* /*request*/, ::seshat::CastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCastSpell(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::CastSpellRequest,::seshat::CastSpellResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CanCastSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CanCastSpell() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::CanCastSpellRequest, ::seshat::CanCastSpellResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::CanCastSpellRequest, ::seshat::CanCastSpellResponse>* streamer) {
                       return this->StreamedCanCastSpell(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CanCastSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CanCastSpell(::grpc::ServerContext* /*context*/, const ::seshat::CanCastSpellRequest* /*request*/, ::seshat::CanCastSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCanCastSpell(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::CanCastSpellRequest,::seshat::CanCastSpellResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCastingOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCastingOptions() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetCastingOptionsRequest, ::seshat::GetCastingOptionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetCastingOptionsRequest, ::seshat::GetCastingOptionsResponse>* streamer) {
                       return this->StreamedGetCastingOptions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCastingOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCastingOptions(::grpc::ServerContext* /*context*/, const ::seshat::GetCastingOptionsRequest* /*request*/, ::seshat::GetCastingOptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCastingOptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetCastingOptionsRequest,::seshat::GetCastingOptionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSpellSlots() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetSpellSlotsRequest, ::seshat::GetSpellSlotsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetSpellSlotsRequest, ::seshat::GetSpellSlotsResponse>* streamer) {
                       return this->StreamedGetSpellSlots(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellSlotsRequest* /*request*/, ::seshat::GetSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpellSlots(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetSpellSlotsRequest,::seshat::GetSpellSlotsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSpellSlots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSpellSlots() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::UpdateSpellSlotsRequest, ::seshat::UpdateSpellSlotsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::UpdateSpellSlotsRequest, ::seshat::UpdateSpellSlotsResponse>* streamer) {
                       return this->StreamedUpdateSpellSlots(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSpellSlots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSpellSlots(::grpc::ServerContext* /*context*/, const ::seshat::UpdateSpellSlotsRequest* /*request*/, ::seshat::UpdateSpellSlotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSpellSlots(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::UpdateSpellSlotsRequest,::seshat::UpdateSpellSlotsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPreparedSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPreparedSpells() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetPreparedSpellsRequest, ::seshat::GetPreparedSpellsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetPreparedSpellsRequest, ::seshat::GetPreparedSpellsResponse>* streamer) {
                       return this->StreamedGetPreparedSpells(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPreparedSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPreparedSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetPreparedSpellsRequest* /*request*/, ::seshat::GetPreparedSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPreparedSpells(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetPreparedSpellsRequest,::seshat::GetPreparedSpellsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PrepareSpell() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::PrepareSpellRequest, ::seshat::PrepareSpellResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::PrepareSpellRequest, ::seshat::PrepareSpellResponse>* streamer) {
                       return this->StreamedPrepareSpell(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PrepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::PrepareSpellRequest* /*request*/, ::seshat::PrepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepareSpell(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::PrepareSpellRequest,::seshat::PrepareSpellResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnprepareSpell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnprepareSpell() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::UnprepareSpellRequest, ::seshat::UnprepareSpellResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::UnprepareSpellRequest, ::seshat::UnprepareSpellResponse>* streamer) {
                       return this->StreamedUnprepareSpell(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnprepareSpell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnprepareSpell(::grpc::ServerContext* /*context*/, const ::seshat::UnprepareSpellRequest* /*request*/, ::seshat::UnprepareSpellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnprepareSpell(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::UnprepareSpellRequest,::seshat::UnprepareSpellResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartConcentration() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::StartConcentrationRequest, ::seshat::StartConcentrationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::StartConcentrationRequest, ::seshat::StartConcentrationResponse>* streamer) {
                       return this->StreamedStartConcentration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartConcentration(::grpc::ServerContext* /*context*/, const ::seshat::StartConcentrationRequest* /*request*/, ::seshat::StartConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartConcentration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::StartConcentrationRequest,::seshat::StartConcentrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndConcentration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndConcentration() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::EndConcentrationRequest, ::seshat::EndConcentrationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::EndConcentrationRequest, ::seshat::EndConcentrationResponse>* streamer) {
                       return this->StreamedEndConcentration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndConcentration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndConcentration(::grpc::ServerContext* /*context*/, const ::seshat::EndConcentrationRequest* /*request*/, ::seshat::EndConcentrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndConcentration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::EndConcentrationRequest,::seshat::EndConcentrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConcentrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConcentrationStatus() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetConcentrationStatusRequest, ::seshat::GetConcentrationStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetConcentrationStatusRequest, ::seshat::GetConcentrationStatusResponse>* streamer) {
                       return this->StreamedGetConcentrationStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConcentrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConcentrationStatus(::grpc::ServerContext* /*context*/, const ::seshat::GetConcentrationStatusRequest* /*request*/, ::seshat::GetConcentrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConcentrationStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetConcentrationStatusRequest,::seshat::GetConcentrationStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MakeConcentrationCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MakeConcentrationCheck() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::MakeConcentrationCheckRequest, ::seshat::MakeConcentrationCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::MakeConcentrationCheckRequest, ::seshat::MakeConcentrationCheckResponse>* streamer) {
                       return this->StreamedMakeConcentrationCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MakeConcentrationCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MakeConcentrationCheck(::grpc::ServerContext* /*context*/, const ::seshat::MakeConcentrationCheckRequest* /*request*/, ::seshat::MakeConcentrationCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMakeConcentrationCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::MakeConcentrationCheckRequest,::seshat::MakeConcentrationCheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpellTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSpellTargets() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetSpellTargetsRequest, ::seshat::GetSpellTargetsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetSpellTargetsRequest, ::seshat::GetSpellTargetsResponse>* streamer) {
                       return this->StreamedGetSpellTargets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSpellTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpellTargets(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellTargetsRequest* /*request*/, ::seshat::GetSpellTargetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpellTargets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetSpellTargetsRequest,::seshat::GetSpellTargetsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApplySpellEffects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ApplySpellEffects() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::ApplySpellEffectsRequest, ::seshat::ApplySpellEffectsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::ApplySpellEffectsRequest, ::seshat::ApplySpellEffectsResponse>* streamer) {
                       return this->StreamedApplySpellEffects(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ApplySpellEffects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApplySpellEffects(::grpc::ServerContext* /*context*/, const ::seshat::ApplySpellEffectsRequest* /*request*/, ::seshat::ApplySpellEffectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApplySpellEffects(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::ApplySpellEffectsRequest,::seshat::ApplySpellEffectsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpellAreas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSpellAreas() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetSpellAreasRequest, ::seshat::GetSpellAreasResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetSpellAreasRequest, ::seshat::GetSpellAreasResponse>* streamer) {
                       return this->StreamedGetSpellAreas(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSpellAreas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpellAreas(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellAreasRequest* /*request*/, ::seshat::GetSpellAreasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpellAreas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetSpellAreasRequest,::seshat::GetSpellAreasResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpellHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSpellHistory() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetSpellHistoryRequest, ::seshat::GetSpellHistoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetSpellHistoryRequest, ::seshat::GetSpellHistoryResponse>* streamer) {
                       return this->StreamedGetSpellHistory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSpellHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpellHistory(::grpc::ServerContext* /*context*/, const ::seshat::GetSpellHistoryRequest* /*request*/, ::seshat::GetSpellHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpellHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetSpellHistoryRequest,::seshat::GetSpellHistoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetActiveSpells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetActiveSpells() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::seshat::GetActiveSpellsRequest, ::seshat::GetActiveSpellsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::seshat::GetActiveSpellsRequest, ::seshat::GetActiveSpellsResponse>* streamer) {
                       return this->StreamedGetActiveSpells(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetActiveSpells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetActiveSpells(::grpc::ServerContext* /*context*/, const ::seshat::GetActiveSpellsRequest* /*request*/, ::seshat::GetActiveSpellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetActiveSpells(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::seshat::GetActiveSpellsRequest,::seshat::GetActiveSpellsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSpell<WithStreamedUnaryMethod_ListSpells<WithStreamedUnaryMethod_CreateCustomSpell<WithStreamedUnaryMethod_CastSpell<WithStreamedUnaryMethod_CanCastSpell<WithStreamedUnaryMethod_GetCastingOptions<WithStreamedUnaryMethod_GetSpellSlots<WithStreamedUnaryMethod_UpdateSpellSlots<WithStreamedUnaryMethod_GetPreparedSpells<WithStreamedUnaryMethod_PrepareSpell<WithStreamedUnaryMethod_UnprepareSpell<WithStreamedUnaryMethod_StartConcentration<WithStreamedUnaryMethod_EndConcentration<WithStreamedUnaryMethod_GetConcentrationStatus<WithStreamedUnaryMethod_MakeConcentrationCheck<WithStreamedUnaryMethod_GetSpellTargets<WithStreamedUnaryMethod_ApplySpellEffects<WithStreamedUnaryMethod_GetSpellAreas<WithStreamedUnaryMethod_GetSpellHistory<WithStreamedUnaryMethod_GetActiveSpells<Service > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSpell<WithStreamedUnaryMethod_ListSpells<WithStreamedUnaryMethod_CreateCustomSpell<WithStreamedUnaryMethod_CastSpell<WithStreamedUnaryMethod_CanCastSpell<WithStreamedUnaryMethod_GetCastingOptions<WithStreamedUnaryMethod_GetSpellSlots<WithStreamedUnaryMethod_UpdateSpellSlots<WithStreamedUnaryMethod_GetPreparedSpells<WithStreamedUnaryMethod_PrepareSpell<WithStreamedUnaryMethod_UnprepareSpell<WithStreamedUnaryMethod_StartConcentration<WithStreamedUnaryMethod_EndConcentration<WithStreamedUnaryMethod_GetConcentrationStatus<WithStreamedUnaryMethod_MakeConcentrationCheck<WithStreamedUnaryMethod_GetSpellTargets<WithStreamedUnaryMethod_ApplySpellEffects<WithStreamedUnaryMethod_GetSpellAreas<WithStreamedUnaryMethod_GetSpellHistory<WithStreamedUnaryMethod_GetActiveSpells<Service > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace seshat


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_seshat_2fspells_2eproto__INCLUDED
